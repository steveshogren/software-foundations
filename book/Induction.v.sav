(*HIDE*)Cg==
(*UHIDE*)

(** * Induction: Proof by Induction *)

(** First, we import all of our definitions from the previous
    chapter. *)

Require Export chap1.

(** For the [Require Export] to work, you first need to use
    [coqc] to compile [Basics.v] into [Basics.vo].  This is like
    making a .class file from a .java file, or a .o file from a .c
    file.  There are two ways to do it:

     - In CoqIDE:

         Open [Basics.v].  In the "Compile" menu, click on "Compile
         Buffer".

     - From the command line:

         Run [coqc Basics.v]

    *)

(* ################################################################# *)
(** * Proof by Induction *)

(** We proved in the last chapter that [0] is a neutral element
    for [+] on the left using an easy argument based on
    simplification.  The fact that it is also a neutral element on the
    _right_... *)

Theorem plus_n_O_firsttry : forall n:nat,
  n = n + 0.

(** ... cannot be proved in the same simple way.  Just applying
  [reflexivity] doesn't work, since the [n] in [n + 0] is an arbitrary
  unknown number, so the [match] in the definition of [+] can't be
  simplified.  *)

Proof.
  intros n.
  simpl. 
Abort.

(** And reasoning by cases using [destruct n] doesn't get us much
   further: the branch of the case analysis where we assume [n = 0]
   goes through fine, but in the branch where [n = S n'] for some [n'] we
   get stuck in exactly the same way.  We could use [destruct n'] to
   get one step further, but, since [n] can be arbitrarily large, if we
   try to keep on like this we'll never be done. *)


Theorem plus_n_O_secondtry : forall n:nat,
  n = n + 0.
Proof.
  intros n. destruct n as [| n'].
  - (* n = 0 *)
    reflexivity. (* so far so good... *)
  - (* n = S n' *)
    simpl.       (* ...but here we are stuck again *)
Abort.

(** To prove interesting facts about numbers, lists, and other
    inductively defined sets, we usually need a more powerful
    reasoning principle: _induction_.

    Recall (from high school, a discrete math course, etc.) the
    principle of induction over natural numbers: If [P(n)] is some
    proposition involving a natural number [n] and we want to show
    that [P] holds for _all_ numbers [n], we can reason like this:
         - show that [P(O)] holds;
         - show that, for any [n'], if [P(n')] holds, then so does
           [P(S n')];
         - conclude that [P(n)] holds for all [n].

    In Coq, the steps are the same but the order is backwards: we
    begin with the goal of proving [P(n)] for all [n] and break it
    down (by applying the [induction] tactic) into two separate
    subgoals: first showing [P(O)] and then showing [P(n') -> P(S
    n')].  Here's how this works for the theorem at hand: *)

Theorem plus_n_O : forall n:nat, n = n + 0.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)    reflexivity.
  - (* n = S n' *) simpl. rewrite <- IHn'. reflexivity.  Qed.

(** Like [destruct], the [induction] tactic takes an [as...]
    clause that specifies the names of the variables to be introduced
    in the subgoals.  In the first branch, [n] is replaced by [0] and
    the goal becomes [0 + 0 = 0], which follows by simplification.  In
    the second, [n] is replaced by [S n'] and the assumption [n' + 0 =
    n'] is added to the context (with the name [IHn'], i.e., the
    Induction Hypothesis for [n'] -- notice that this name is
    explicitly chosen in the [as...] clause of the call to [induction]
    rather than letting Coq choose one arbitrarily). The goal in this
    case becomes [(S n') + 0 = S n'], which simplifies to [S (n' + 0)
    = S n'], which in turn follows from [IHn']. *)

(* We cannot use destruct here, because it is not forall n, just for that
specific n. After the O case, we are left with the n case, which is exactly what
we are trying to prove! *)
Theorem plus_n_Od : forall n:nat, n = n + 0.
Proof.
  intros n. destruct n.
  - (* n = 0 *)    reflexivity.
  - (* S n = S (n + 0) *) simpl. Admitted.

(* So induction differs in that it works forall n, not just n. It also creates a
hypothesis we can use for our matching. I am still very confused on the concept
of how using the thing we are proving to prove our Theorem makes any sense at
all... :/ *)

Theorem minus_diag : forall n,
  minus n n = 0.
Proof.
  (* WORKED IN CLASS *)
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)
    simpl. reflexivity.
  - (* n = S n' *)
    simpl. rewrite -> IHn'. reflexivity.  Qed.

(** (The use of the [intros] tactic in these proofs is actually
    redundant.  When applied to a goal that contains quantified
    variables, the [induction] tactic will automatically move them
    into the context as needed.) *)

(** **** Exercise: 2 stars, recommended (basic_induction)  *)
(** Prove the following using induction. You might need previously
    proven results. *)
(* Its becoming more and more apparent that proofs must be built up out of
smaller proofs. A good first step would be to consider what proofs I have
already proven. This book seems to link exercises and examples together: the
solution for a proof is highly likely to be found in the prior proofs. *)

(*HIDE*)CgpUaGVvcmVtIG11bHRfMF9yIDogZm9yYWxsIG46bmF0LAogIG4gKiAwID0gMC4KUHJvb2YuCiAg
aW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICAgc2ltcGwuIHJlZmxleGl2
aXR5LgogICAgc2ltcGwuIHJld3JpdGUgLT4gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9y
ZW0gYWRkX2VxdWl2IDogZm9yYWxsIG46bmF0LAogIFMobikgPSBTKG4pLgpQcm9vZi4KICBpbnRy
b3Mgbi4gaW5kdWN0aW9uIG4gYXMgW3wgbicgSUhuJ10uCiAgICBzaW1wbC4gcmVmbGV4aXZpdHku
CiAgICBzaW1wbC4gcmVmbGV4aXZpdHkuClFlZC4KCigqIFNldCBQcmludGluZyBBbGwuICopClRo
ZW9yZW0gcGx1c19uX1NtIDogZm9yYWxsIG4gbSA6IG5hdCwgCiAgUyAobiArIG0pID0gbiArIChT
IG0pLgpQcm9vZi4KICAoKiB3aXRob3V0IGludHJvZHVjaW5nIG4gQU5OTk5ORCBtIGhlcmUsIHRo
ZSByZXdyaXRlIGRvZXNuJ3QgbWF0Y2guIGdycnJyICopCiAgaW50cm9zIG4gbS4gaW5kdWN0aW9u
IG4gYXMgW3wgbicgSUhuJ10uCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyBzaW1w
bC4gcmV3cml0ZSA8LSBJSG4nLiByZWZsZXhpdml0eS4gfQpRZWQuIAoKVGhlb3JlbSBwbHVzX2Nv
bW0gOiBmb3JhbGwgbiBtIDogbmF0LAogIG4gKyBtID0gbSArIG4uClByb29mLgogIGludHJvcyBu
IG0uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICgqIEkgaGF2ZSB0byByZW1lbWJlciB0
byB1c2UgZXhpc3RpbmcgcHJvb2ZzISAqKQogIHNpbXBsLiByZXdyaXRlIDwtIHBsdXNfbl9PLiBy
ZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8LSBwbHVzX25fU20uIHJld3JpdGUgLT4gSUhu
Jy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9yZW0gcGx1c19hc3NvYyA6IGZvcmFsbCBuIG0gcCA6
IG5hdCwKICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgpQcm9vZi4KICBpbnRyb3MgbiBtIHAu
IGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLiAKICBzaW1wbC4gcmVmbGV4aXZpdHkuCiAgc2lt
cGwuIHJld3JpdGUgPC0gSUhuJy4gc2ltcGwuIHJlZmxleGl2aXR5LgpRZWQuCigqKiBbXSAqKQoK
CigqKiAqKioqIEV4ZXJjaXNlOiAyIHN0YXJzIChkb3VibGVfcGx1cykgICopCigqKiBDb25zaWRl
ciB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uLCB3aGljaCBkb3VibGVzIGl0cyBhcmd1bWVudDogKikK
CkZpeHBvaW50IGRvdWJsZSAobjpuYXQpIDo9CiAgbWF0Y2ggbiB3aXRoCiAgfCBPID0+IE8KICB8
IFMgbicgPT4gUyAoUyAoZG91YmxlIG4nKSkKICBlbmQuCgooKiogVXNlIGluZHVjdGlvbiB0byBw
cm92ZSB0aGlzIHNpbXBsZSBmYWN0IGFib3V0IFtkb3VibGVdOiAqKQoKTGVtbWEgZG91YmxlX3Bs
dXMgOiBmb3JhbGwgbiwgZG91YmxlIG4gPSBuICsgbiAuClByb29mLgogIGludHJvcyBuLiBpbmR1
Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8
LSBwbHVzX25fU20uIHJld3JpdGUgPC0gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KKCoqIFtdICop
CgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGV2ZW5iX1MpICAqKQooKiog
T25lIGluY29udmVuaW5lbnQgYXNwZWN0IG9mIG91ciBkZWZpbml0aW9uIG9mIFtldmVuYiBuXSBp
cyB0aGF0IGl0CiAgICBtYXkgbmVlZCB0byBwZXJmb3JtIGEgcmVjdXJzaXZlIGNhbGwgb24gW24g
LSAyXS4gVGhpcyBtYWtlcyBwcm9vZnMKICAgIGFib3V0IFtldmVuYiBuXSBoYXJkZXIgd2hlbiBk
b25lIGJ5IGluZHVjdGlvbiBvbiBbbl0sIHNpbmNlIHdlIG1heQogICAgbmVlZCBhbiBpbmR1Y3Rp
b24gaHlwb3RoZXNpcyBhYm91dCBbbiAtIDJdLiBUaGUgZm9sbG93aW5nIGxlbW1hCiAgICBnaXZl
cyBhIGJldHRlciBjaGFyYWN0ZXJpemF0aW9uIG9mIFtldmVuYiAoUyBuKV06ICopCgpUaGVvcmVt
IG5lZ2JfZG91YmxlZCA6IGZvcmFsbCBiIDogYm9vbCwgbmVnYiAobmVnYiBiKSA9IGIuClByb29m
LgogIGludHJvcyBiLiBpbmR1Y3Rpb24gYi4KICByZWZsZXhpdml0eS4KICByZWZsZXhpdml0eS4K
UWVkLgoKVGhlb3JlbSBldmVuYl9TIDogZm9yYWxsIG4gOiBuYXQsCiAgZXZlbmIgKFMgbikgPSBu
ZWdiIChldmVuYiBuKS4KUHJvb2YuCiAgaW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElI
biddLgogIHJlZmxleGl2aXR5LgogIGluZHVjdGlvbiBuJy4KICAtIHsgc2ltcGwuIHJlZmxleGl2
aXR5LiB9CiAgLSB7IHJld3JpdGUgLT4gSUhuJy4KICAgICAgcmV3cml0ZSAtPiBuZWdiX2RvdWJs
ZWQuCiAgICAgIHJlZmxleGl2aXR5LiB9ClFlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lz
ZTogMSBzdGFyIChkZXN0cnVjdF9pbmR1Y3Rpb24pICAqKQooKiogQnJpZWZseSBleHBsYWluIHRo
ZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHRhY3RpY3MgW2Rlc3RydWN0XSAKICAgIGFuZCBbaW5k
dWN0aW9uXS4KCigqIEZJTEwgSU4gSEVSRSAqKQoqKQooKiogW10gKikKCg==
(*UHIDE*)

(* ################################################################# *)
(** * Proofs Within Proofs *)

(** In Coq, as in informal mathematics, large proofs are often
    broken into a sequence of theorems, with later proofs referring to
    earlier theorems.  But sometimes a proof will require some
    miscellaneous fact that is too trivial and of too little general
    interest to bother giving it its own top-level name.  In such
    cases, it is convenient to be able to simply state and prove the
    needed "sub-theorem" right at the point where it is used.  The
    [assert] tactic allows us to do this.  For example, our earlier
    proof of the [mult_0_plus] theorem referred to a previous theorem
    named [plus_O_n].  We could instead use [assert] to state and
    prove [plus_O_n] in-line: *)

Theorem mult_0_plus' : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H: 0 + n = n). { reflexivity. }
  rewrite -> H.
  reflexivity.  Qed.

(** The [assert] tactic introduces two sub-goals.  The first is
    the assertion itself; by prefixing it with [H:] we name the
    assertion [H].  (We can also name the assertion with [as] just as
    we did above with [destruct] and [induction], i.e., [assert (0 + n
    = n) as H].)  Note that we surround the proof of this assertion
    with curly braces [{ ... }], both for readability and so that,
    when using Coq interactively, we can see more easily when we have
    finished this sub-proof.  The second goal is the same as the one
    at the point where we invoke [assert] except that, in the context,
    we now have the assumption [H] that [0 + n = n].  That is,
    [assert] generates one subgoal where we must prove the asserted
    fact and a second subgoal where we can use the asserted fact to
    make progress on whatever we were trying to prove in the first
    place. *)

(** The [assert] tactic is handy in many sorts of situations.  For
    example, suppose we want to prove that [(n + m) + (p + q) = (m +
    n) + (p + q)]. The only difference between the two sides of the
    [=] is that the arguments [m] and [n] to the first inner [+] are
    swapped, so it seems we should be able to use the commutativity of
    addition ([plus_comm]) to rewrite one into the other.  However,
    the [rewrite] tactic is a little stupid about _where_ it applies
    the rewrite.  There are three uses of [+] here, and it turns out
    that doing [rewrite -> plus_comm] will affect only the _outer_
    one... *)

Theorem plus_rearrange_firsttry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  (* We just need to swap (n + m) for (m + n)...
     it seems like plus_comm should do the trick! *)
  rewrite -> plus_comm.
  (* Doesn't work...Coq rewrote the wrong plus! *)
Abort.

(** To get [plus_comm] to apply at the point where we want it to, we
    can introduce a local lemma stating that [n + m = m + n] (for the
    particular [m] and [n] that we are talking about here), prove this
    lemma using [plus_comm], and then use it to do the desired
    rewrite. *)

Theorem plus_rearrange : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  assert (H: n + m = m + n).
  { rewrite -> plus_comm. reflexivity. }
  rewrite -> H. reflexivity.  Qed.

(* ################################################################# *)
(*HIDE*)CigqKiAqIE1vcmUgRXhlcmNpc2VzICopCgooKiogKioqKiBFeGVyY2lzZTogMyBzdGFycywgcmVj
b21tZW5kZWQgKG11bHRfY29tbSkgICopCigqKiBVc2UgW2Fzc2VydF0gdG8gaGVscCBwcm92ZSB0
aGlzIHRoZW9yZW0uICBZb3Ugc2hvdWxkbid0IG5lZWQgdG8KICAgIHVzZSBpbmR1Y3Rpb24gb24g
W3BsdXNfc3dhcF0uICopCgooKiBUaGVvcmVtIHBsdXNfYXNzb2MgOiBmb3JhbGwgbiBtIHAgOiBu
YXQsICopCigqICAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4gKikKCigqIFRoZW9yZW0gcGx1
c19jb21tIDogZm9yYWxsIG4gbSA6IG5hdCwgKikKKCogICBuICsgbSA9IG0gKyBuLiAqKQoKVGhl
b3JlbSBwbHVzX3N3YXAgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkgPSBtICsg
KG4gKyBwKS4KUHJvb2YuCiAgaW50cm9zIG4gbSBwLgogIHJld3JpdGUgLT4gcGx1c19jb21tLgog
IHJld3JpdGUgPC0gcGx1c19hc3NvYy4KICBhc3NlcnQgKEg6IHAgKyBuID0gbiArIHApLgogIHsg
cmV3cml0ZSAtPiBwbHVzX2NvbW0uIHJlZmxleGl2aXR5LiB9CiAgcmV3cml0ZSAtPiBILiAgCiAg
cmVmbGV4aXZpdHkuClFlZC4KCigqKiBOb3cgcHJvdmUgY29tbXV0YXRpdml0eSBvZiBtdWx0aXBs
aWNhdGlvbi4gIChZb3Ugd2lsbCBwcm9iYWJseQogICAgbmVlZCB0byBkZWZpbmUgYW5kIHByb3Zl
IGEgc2VwYXJhdGUgc3Vic2lkaWFyeSB0aGVvcmVtIHRvIGJlIHVzZWQKICAgIGluIHRoZSBwcm9v
ZiBvZiB0aGlzIG9uZS4gIFlvdSBtYXkgZmluZCB0aGF0IFtwbHVzX3N3YXBdIGNvbWVzIGluCiAg
ICBoYW5keS4pICopCgpUaGVvcmVtIG11bHRfMV9uIDogZm9yYWxsIG4sIG4gKiAxID0gbi4KUHJv
b2YuCiAgaW50cm9zIG4uCiAgaW5kdWN0aW9uIG4gYXMgW3wgbiddLgogIHNpbXBsLiByZWZsZXhp
dml0eS4KICBzaW1wbC4gcmV3cml0ZSAtPiBJSG4nLiByZWZsZXhpdml0eS4KUWVkLgoKVGhlb3Jl
bSBtdWx0X2NvbW1fbGVtbWEgOiBmb3JhbGwgbiBtLCBtICogUyBuID0gbSArIG0gKiBuLgpQcm9v
Zi4KICBpbnRyb3MgbiBtLgogIGluZHVjdGlvbiBtIGFzIFt8IHBdLgogIHtzaW1wbC4gcmVmbGV4
aXZpdHkuIH0KICB7IHNpbXBsLiByZXdyaXRlIC0+IHBsdXNfc3dhcC4gcmV3cml0ZSAtPiBJSHAu
IHJlZmxleGl2aXR5LiB9ClFlZC4KClRoZW9yZW0gbXVsdF9jb21tIDogZm9yYWxsIG0gbiA6IG5h
dCwKICBtICogbiA9IG4gKiBtLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQu
CigqKiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDMgc3RhcnMsIG9wdGlvbmFsIChtb3JlX2V4
ZXJjaXNlcykgICopCigqKiBUYWtlIGEgcGllY2Ugb2YgcGFwZXIuICBGb3IgZWFjaCBvZiB0aGUg
Zm9sbG93aW5nIHRoZW9yZW1zLCBmaXJzdAogICAgX3RoaW5rXyBhYm91dCB3aGV0aGVyIChhKSBp
dCBjYW4gYmUgcHJvdmVkIHVzaW5nIG9ubHkKICAgIHNpbXBsaWZpY2F0aW9uIGFuZCByZXdyaXRp
bmcsIChiKSBpdCBhbHNvIHJlcXVpcmVzIGNhc2UKICAgIGFuYWx5c2lzIChbZGVzdHJ1Y3RdKSwg
b3IgKGMpIGl0IGFsc28gcmVxdWlyZXMgaW5kdWN0aW9uLiAgV3JpdGUKICAgIGRvd24geW91ciBw
cmVkaWN0aW9uLiAgVGhlbiBmaWxsIGluIHRoZSBwcm9vZi4gIChUaGVyZSBpcyBubyBuZWVkCiAg
ICB0byB0dXJuIGluIHlvdXIgcGllY2Ugb2YgcGFwZXI7IHRoaXMgaXMganVzdCB0byBlbmNvdXJh
Z2UgeW91IHRvCiAgICByZWZsZWN0IGJlZm9yZSB5b3UgaGFjayEpICopCgpUaGVvcmVtIGxlYl9y
ZWZsIDogZm9yYWxsIG46bmF0LAogIHRydWUgPSBsZWIgbiBuLgpQcm9vZi4KICAoKiBGSUxMIElO
IEhFUkUgKikgQWRtaXR0ZWQuCgpUaGVvcmVtIHplcm9fbmJlcV9TIDogZm9yYWxsIG46bmF0LAog
IGJlcV9uYXQgMCAoUyBuKSA9IGZhbHNlLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRt
aXR0ZWQuCgpUaGVvcmVtIGFuZGJfZmFsc2VfciA6IGZvcmFsbCBiIDogYm9vbCwKICBhbmRiIGIg
ZmFsc2UgPSBmYWxzZS4KUHJvb2YuCiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVkLgoKVGhl
b3JlbSBwbHVzX2JsZV9jb21wYXRfbCA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBsZWIgbiBtID0g
dHJ1ZSAtPiBsZWIgKHAgKyBuKSAocCArIG0pID0gdHJ1ZS4KUHJvb2YuCiAgKCogRklMTCBJTiBI
RVJFICopIEFkbWl0dGVkLgoKVGhlb3JlbSBTX25iZXFfMCA6IGZvcmFsbCBuOm5hdCwKICBiZXFf
bmF0IChTIG4pIDAgPSBmYWxzZS4KUHJvb2YuCiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVk
LgoKVGhlb3JlbSBtdWx0XzFfbCA6IGZvcmFsbCBuOm5hdCwgMSAqIG4gPSBuLgpQcm9vZi4KICAo
KiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQuCgpUaGVvcmVtIGFsbDNfc3BlYyA6IGZvcmFsbCBi
IGMgOiBib29sLAogICAgb3JiCiAgICAgIChhbmRiIGIgYykKICAgICAgKG9yYiAobmVnYiBiKQog
ICAgICAgICAgICAgICAobmVnYiBjKSkKICA9IHRydWUuClByb29mLgogICgqIEZJTEwgSU4gSEVS
RSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gbXVsdF9wbHVzX2Rpc3RyX3IgOiBmb3JhbGwgbiBtIHAg
OiBuYXQsCiAgKG4gKyBtKSAqIHAgPSAobiAqIHApICsgKG0gKiBwKS4KUHJvb2YuCiAgKCogRklM
TCBJTiBIRVJFICopIEFkbWl0dGVkLgoKVGhlb3JlbSBtdWx0X2Fzc29jIDogZm9yYWxsIG4gbSBw
IDogbmF0LAogIG4gKiAobSAqIHApID0gKG4gKiBtKSAqIHAuClByb29mLgogICgqIEZJTEwgSU4g
SEVSRSAqKSBBZG1pdHRlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywg
b3B0aW9uYWwgKGJlcV9uYXRfcmVmbCkgICopCigqKiBQcm92ZSB0aGUgZm9sbG93aW5nIHRoZW9y
ZW0uICAoUHV0dGluZyB0aGUgW3RydWVdIG9uIHRoZSBsZWZ0LWhhbmQKICAgIHNpZGUgb2YgdGhl
IGVxdWFsaXR5IG1heSBsb29rIG9kZCwgYnV0IHRoaXMgaXMgaG93IHRoZSB0aGVvcmVtIGlzCiAg
ICBzdGF0ZWQgaW4gdGhlIENvcSBzdGFuZGFyZCBsaWJyYXJ5LCBzbyB3ZSBmb2xsb3cgc3VpdC4g
IFJld3JpdGluZwogICAgd29ya3MgZXF1YWxseSB3ZWxsIGluIGVpdGhlciBkaXJlY3Rpb24sIHNv
IHdlIHdpbGwgaGF2ZSBubyBwcm9ibGVtCiAgICB1c2luZyB0aGUgdGhlb3JlbSBubyBtYXR0ZXIg
d2hpY2ggd2F5IHdlIHN0YXRlIGl0LikgKikKClRoZW9yZW0gYmVxX25hdF9yZWZsIDogZm9yYWxs
IG4gOiBuYXQsCiAgdHJ1ZSA9IGJlcV9uYXQgbiBuLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUg
KikgQWRtaXR0ZWQuCigqKiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDIgc3RhcnMsIG9wdGlv
bmFsIChwbHVzX3N3YXAnKSAgKikKKCoqIFRoZSBbcmVwbGFjZV0gdGFjdGljIGFsbG93cyB5b3Ug
dG8gc3BlY2lmeSBhIHBhcnRpY3VsYXIgc3VidGVybSB0bwogICByZXdyaXRlIGFuZCB3aGF0IHlv
dSB3YW50IGl0IHJld3JpdHRlbiB0bzogW3JlcGxhY2UgKHQpIHdpdGggKHUpXQogICByZXBsYWNl
cyAoYWxsIGNvcGllcyBvZikgZXhwcmVzc2lvbiBbdF0gaW4gdGhlIGdvYWwgYnkgZXhwcmVzc2lv
bgogICBbdV0sIGFuZCBnZW5lcmF0ZXMgW3QgPSB1XSBhcyBhbiBhZGRpdGlvbmFsIHN1YmdvYWwu
IFRoaXMgaXMgb2Z0ZW4KICAgdXNlZnVsIHdoZW4gYSBwbGFpbiBbcmV3cml0ZV0gYWN0cyBvbiB0
aGUgd3JvbmcgcGFydCBvZiB0aGUgZ29hbC4KCiAgIFVzZSB0aGUgW3JlcGxhY2VdIHRhY3RpYyB0
byBkbyBhIHByb29mIG9mIFtwbHVzX3N3YXAnXSwganVzdCBsaWtlCiAgIFtwbHVzX3N3YXBdIGJ1
dCB3aXRob3V0IG5lZWRpbmcgW2Fzc2VydCAobiArIG0gPSBtICsgbildLiAqKQoKVGhlb3JlbSBw
bHVzX3N3YXAnIDogZm9yYWxsIG4gbSBwIDogbmF0LAogIG4gKyAobSArIHApID0gbSArIChuICsg
cCkuClByb29mLgogICgqIEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KKCoqIFtdICopCgooKiog
KioqKiBFeGVyY2lzZTogMyBzdGFycywgcmVjb21tZW5kZWQgKGJpbmFyeV9jb21tdXRlKSAgKikK
KCoqIFJlY2FsbCB0aGUgW2luY3JdIGFuZCBbYmluX3RvX25hdF0gZnVuY3Rpb25zIHRoYXQgeW91
CiAgICB3cm90ZSBmb3IgdGhlIFtiaW5hcnldIGV4ZXJjaXNlIGluIHRoZSBbQmFzaWNzXSBjaGFw
dGVyLiAgUHJvdmUKICAgIHRoYXQgdGhlIGZvbGxvd2luZyBkaWFncmFtIGNvbW11dGVzOgoKICAg
ICAgICAgICAgICAgYmluIC0tLS0tLS0tLSBpbmNyIC0tLS0tLS0+IGJpbgogICAgICAgICAgICAg
ICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgYmluX3RvX25hdCAg
ICAgICAgICAgICAgICAgIGJpbl90b19uYXQKICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAg
ICAgICAgICAgICAgICB8CiAgICAgICAgICAgICAgICB2ICAgICAgICAgICAgICAgICAgICAgICAg
ICAgdgogICAgICAgICAgICAgICBuYXQgLS0tLS0tLS0tLSBTIC0tLS0tLS0tLT4gbmF0CgogICAg
VGhhdCBpcywgaW5jcmVtZW50aW5nIGEgYmluYXJ5IG51bWJlciBhbmQgdGhlbiBjb252ZXJ0aW5n
IGl0IHRvIAogICAgYSAodW5hcnkpIG5hdHVyYWwgbnVtYmVyIHlpZWxkcyB0aGUgc2FtZSByZXN1
bHQgYXMgZmlyc3QgY29udmVydGluZwogICAgaXQgdG8gYSBuYXR1cmFsIG51bWJlciBhbmQgdGhl
biBpbmNyZW1lbnRpbmcuICAKICAgIE5hbWUgeW91ciB0aGVvcmVtIFtiaW5fdG9fbmF0X3ByZXNf
aW5jcl0gKCJwcmVzIiBmb3IgInByZXNlcnZlcyIpLgoKICAgIEJlZm9yZSB5b3Ugc3RhcnQgd29y
a2luZyBvbiB0aGlzIGV4ZXJjaXNlLCBwbGVhc2UgY29weSB0aGUKICAgIGRlZmluaXRpb25zIGZy
b20geW91ciBzb2x1dGlvbiB0byB0aGUgW2JpbmFyeV0gZXhlcmNpc2UgaGVyZSBzbwogICAgdGhh
dCB0aGlzIGZpbGUgY2FuIGJlIGdyYWRlZCBvbiBpdHMgb3duLiAgSWYgeW91IGZpbmQgeW91cnNl
bGYKICAgIHdhbnRpbmcgdG8gY2hhbmdlIHlvdXIgb3JpZ2luYWwgZGVmaW5pdGlvbnMgdG8gbWFr
ZSB0aGUgcHJvcGVydHkKICAgIGVhc2llciB0byBwcm92ZSwgZmVlbCBmcmVlIHRvIGRvIHNvISAq
KQoKKCogRklMTCBJTiBIRVJFICopCigqKiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDUgc3Rh
cnMsIGFkdmFuY2VkIChiaW5hcnlfaW52ZXJzZSkgICopCigqKiBUaGlzIGV4ZXJjaXNlIGlzIGEg
Y29udGludWF0aW9uIG9mIHRoZSBwcmV2aW91cyBleGVyY2lzZSBhYm91dAogICAgYmluYXJ5IG51
bWJlcnMuICBZb3Ugd2lsbCBuZWVkIHlvdXIgZGVmaW5pdGlvbnMgYW5kIHRoZW9yZW1zIGZyb20K
ICAgIHRoZXJlIHRvIGNvbXBsZXRlIHRoaXMgb25lLgoKICAgIChhKSBGaXJzdCwgd3JpdGUgYSBm
dW5jdGlvbiB0byBjb252ZXJ0IG5hdHVyYWwgbnVtYmVycyB0byBiaW5hcnkKICAgICAgICBudW1i
ZXJzLiAgVGhlbiBwcm92ZSB0aGF0IHN0YXJ0aW5nIHdpdGggYW55IG5hdHVyYWwgbnVtYmVyLAog
ICAgICAgIGNvbnZlcnRpbmcgdG8gYmluYXJ5LCB0aGVuIGNvbnZlcnRpbmcgYmFjayB5aWVsZHMg
dGhlIHNhbWUKICAgICAgICBuYXR1cmFsIG51bWJlciB5b3Ugc3RhcnRlZCB3aXRoLgoKICAgIChi
KSBZb3UgbWlnaHQgbmF0dXJhbGx5IHRoaW5rIHRoYXQgd2Ugc2hvdWxkIGFsc28gcHJvdmUgdGhl
CiAgICAgICAgb3Bwb3NpdGUgZGlyZWN0aW9uOiB0aGF0IHN0YXJ0aW5nIHdpdGggYSBiaW5hcnkg
bnVtYmVyLAogICAgICAgIGNvbnZlcnRpbmcgdG8gYSBuYXR1cmFsLCBhbmQgdGhlbiBiYWNrIHRv
IGJpbmFyeSB5aWVsZHMgdGhlCiAgICAgICAgc2FtZSBudW1iZXIgd2Ugc3RhcnRlZCB3aXRoLiAg
SG93ZXZlciwgdGhpcyBpcyBub3QgdHJ1ZSEKICAgICAgICBFeHBsYWluIHdoYXQgdGhlIHByb2Js
ZW0gaXMuCgogICAgKGMpIERlZmluZSBhICJkaXJlY3QiIG5vcm1hbGl6YXRpb24gZnVuY3Rpb24g
LS0gaS5lLiwgYSBmdW5jdGlvbgogICAgICAgIFtub3JtYWxpemVdIGZyb20gYmluYXJ5IG51bWJl
cnMgdG8gYmluYXJ5IG51bWJlcnMgc3VjaCB0aGF0LAogICAgICAgIGZvciBhbnkgYmluYXJ5IG51
bWJlciBiLCBjb252ZXJ0aW5nIHRvIGEgbmF0dXJhbCBhbmQgdGhlbiBiYWNrCiAgICAgICAgdG8g
YmluYXJ5IHlpZWxkcyBbKG5vcm1hbGl6ZSBiKV0uICBQcm92ZSBpdC4gIChXYXJuaW5nOiBUaGlz
CiAgICAgICAgcGFydCBpcyB0cmlja3khKQoKICAgIEFnYWluLCBmZWVsIGZyZWUgdG8gY2hhbmdl
IHlvdXIgZWFybGllciBkZWZpbml0aW9ucyBpZiB0aGlzIGhlbHBzCiAgICBoZXJlLiAqKQoKKCog
RklMTCBJTiBIRVJFICopCigqKiBbXSAqKQoKKCogIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgKikKKCoqICogRm9ybWFsIHZz
LiBJbmZvcm1hbCBQcm9vZiAoT3B0aW9uYWwpICopCgooKiogIl9JbmZvcm1hbCBwcm9vZnMgYXJl
IGFsZ29yaXRobXM7IGZvcm1hbCBwcm9vZnMgYXJlIGNvZGVfLiIgKikKCigqKiBUaGUgcXVlc3Rp
b24gb2Ygd2hhdCBjb25zdGl0dXRlcyBhIHByb29mIG9mIGEgbWF0aGVtYXRpY2FsCiAgICBjbGFp
bSBoYXMgY2hhbGxlbmdlZCBwaGlsb3NvcGhlcnMgZm9yIG1pbGxlbm5pYSwgYnV0IGEgcm91Z2gg
YW5kCiAgICByZWFkeSBkZWZpbml0aW9uIGNvdWxkIGJlIHRoaXM6IEEgcHJvb2Ygb2YgYSBtYXRo
ZW1hdGljYWwKICAgIHByb3Bvc2l0aW9uIFtQXSBpcyBhIHdyaXR0ZW4gKG9yIHNwb2tlbikgdGV4
dCB0aGF0IGluc3RpbGxzIGluIHRoZQogICAgcmVhZGVyIG9yIGhlYXJlciB0aGUgY2VydGFpbnR5
IHRoYXQgW1BdIGlzIHRydWUuICBUaGF0IGlzLCBhIHByb29mCiAgICBpcyBhbiBhY3Qgb2YgY29t
bXVuaWNhdGlvbi4KCiAgICBBY3RzIG9mIGNvbW11bmljYXRpb24gbWF5IGludm9sdmUgZGlmZmVy
ZW50IHNvcnRzIG9mIHJlYWRlcnMuICBPbgogICAgb25lIGhhbmQsIHRoZSAicmVhZGVyIiBjYW4g
YmUgYSBwcm9ncmFtIGxpa2UgQ29xLCBpbiB3aGljaCBjYXNlCiAgICB0aGUgImJlbGllZiIgdGhh
dCBpcyBpbnN0aWxsZWQgaXMgdGhhdCBbUF0gY2FuIGJlIG1lY2hhbmljYWxseQogICAgZGVyaXZl
ZCBmcm9tIGEgY2VydGFpbiBzZXQgb2YgZm9ybWFsIGxvZ2ljYWwgcnVsZXMsIGFuZCB0aGUgcHJv
b2YKICAgIGlzIGEgcmVjaXBlIHRoYXQgZ3VpZGVzIHRoZSBwcm9ncmFtIGluIGNoZWNraW5nIHRo
aXMgZmFjdC4gIFN1Y2gKICAgIHJlY2lwZXMgYXJlIF9mb3JtYWxfIHByb29mcy4KCiAgICBBbHRl
cm5hdGl2ZWx5LCB0aGUgcmVhZGVyIGNhbiBiZSBhIGh1bWFuIGJlaW5nLCBpbiB3aGljaCBjYXNl
IHRoZQogICAgcHJvb2Ygd2lsbCBiZSB3cml0dGVuIGluIEVuZ2xpc2ggb3Igc29tZSBvdGhlciBu
YXR1cmFsIGxhbmd1YWdlLAogICAgYW5kIHdpbGwgdGh1cyBuZWNlc3NhcmlseSBiZSBfaW5mb3Jt
YWxfLiAgSGVyZSwgdGhlIGNyaXRlcmlhIGZvcgogICAgc3VjY2VzcyBhcmUgbGVzcyBjbGVhcmx5
IHNwZWNpZmllZC4gIEEgInZhbGlkIiBwcm9vZiBpcyBvbmUgdGhhdAogICAgbWFrZXMgdGhlIHJl
YWRlciBiZWxpZXZlIFtQXS4gIEJ1dCB0aGUgc2FtZSBwcm9vZiBtYXkgYmUgcmVhZCBieQogICAg
bWFueSBkaWZmZXJlbnQgcmVhZGVycywgc29tZSBvZiB3aG9tIG1heSBiZSBjb252aW5jZWQgYnkg
YQogICAgcGFydGljdWxhciB3YXkgb2YgcGhyYXNpbmcgdGhlIGFyZ3VtZW50LCB3aGlsZSBvdGhl
cnMgbWF5IG5vdCBiZS4KICAgIFNvbWUgcmVhZGVycyBtYXkgYmUgcGFydGljdWxhcmx5IHBlZGFu
dGljLCBpbmV4cGVyaWVuY2VkLCBvciBqdXN0CiAgICBwbGFpbiB0aGljay1oZWFkZWQ7IHRoZSBv
bmx5IHdheSB0byBjb252aW5jZSB0aGVtIHdpbGwgYmUgdG8gbWFrZQogICAgdGhlIGFyZ3VtZW50
IGluIHBhaW5zdGFraW5nIGRldGFpbC4gIEJ1dCBvdGhlciByZWFkZXJzLCBtb3JlCiAgICBmYW1p
bGlhciBpbiB0aGUgYXJlYSwgbWF5IGZpbmQgYWxsIHRoaXMgZGV0YWlsIHNvIG92ZXJ3aGVsbWlu
ZwogICAgdGhhdCB0aGV5IGxvc2UgdGhlIG92ZXJhbGwgdGhyZWFkOyBhbGwgdGhleSB3YW50IGlz
IHRvIGJlIHRvbGQgdGhlCiAgICBtYWluIGlkZWFzLCBzaW5jZSBpdCBpcyBlYXNpZXIgZm9yIHRo
ZW0gdG8gZmlsbCBpbiB0aGUgZGV0YWlscyBmb3IKICAgIHRoZW1zZWx2ZXMgdGhhbiB0byB3YWRl
IHRocm91Z2ggYSB3cml0dGVuIHByZXNlbnRhdGlvbiBvZiB0aGVtLgogICAgVWx0aW1hdGVseSwg
dGhlcmUgaXMgbm8gdW5pdmVyc2FsIHN0YW5kYXJkLCBiZWNhdXNlIHRoZXJlIGlzIG5vCiAgICBz
aW5nbGUgd2F5IG9mIHdyaXRpbmcgYW4gaW5mb3JtYWwgcHJvb2YgdGhhdCBpcyBndWFyYW50ZWVk
IHRvCiAgICBjb252aW5jZSBldmVyeSBjb25jZWl2YWJsZSByZWFkZXIuCgogICAgSW4gcHJhY3Rp
Y2UsIGhvd2V2ZXIsIG1hdGhlbWF0aWNpYW5zIGhhdmUgZGV2ZWxvcGVkIGEgcmljaCBzZXQgb2YK
ICAgIGNvbnZlbnRpb25zIGFuZCBpZGlvbXMgZm9yIHdyaXRpbmcgYWJvdXQgY29tcGxleCBtYXRo
ZW1hdGljYWwKICAgIG9iamVjdHMgdGhhdCAtLSBhdCBsZWFzdCB3aXRoaW4gYSBjZXJ0YWluIGNv
bW11bml0eSAtLSBtYWtlCiAgICBjb21tdW5pY2F0aW9uIGZhaXJseSByZWxpYWJsZS4gIFRoZSBj
b252ZW50aW9ucyBvZiB0aGlzIHN0eWxpemVkCiAgICBmb3JtIG9mIGNvbW11bmljYXRpb24gZ2l2
ZSBhIGZhaXJseSBjbGVhciBzdGFuZGFyZCBmb3IganVkZ2luZwogICAgcHJvb2ZzIGdvb2Qgb3Ig
YmFkLgoKICAgIEJlY2F1c2Ugd2UgYXJlIHVzaW5nIENvcSBpbiB0aGlzIGNvdXJzZSwgd2Ugd2ls
bCBiZSB3b3JraW5nCiAgICBoZWF2aWx5IHdpdGggZm9ybWFsIHByb29mcy4gIEJ1dCB0aGlzIGRv
ZXNuJ3QgbWVhbiB3ZSBjYW4KICAgIGNvbXBsZXRlbHkgZm9yZ2V0IGFib3V0IGluZm9ybWFsIG9u
ZXMhICBGb3JtYWwgcHJvb2ZzIGFyZSB1c2VmdWwKICAgIGluIG1hbnkgd2F5cywgYnV0IHRoZXkg
YXJlIF9ub3RfIHZlcnkgZWZmaWNpZW50IHdheXMgb2YKICAgIGNvbW11bmljYXRpbmcgaWRlYXMg
YmV0d2VlbiBodW1hbiBiZWluZ3MuICopCgooKiogRm9yIGV4YW1wbGUsIGhlcmUgaXMgYSBwcm9v
ZiB0aGF0IGFkZGl0aW9uIGlzIGFzc29jaWF0aXZlOiAqKQoKVGhlb3JlbSBwbHVzX2Fzc29jJyA6
IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgpQcm9vZi4g
aW50cm9zIG4gbSBwLiBpbmR1Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4gcmVmbGV4aXZpdHkuCiAg
c2ltcGwuIHJld3JpdGUgLT4gSUhuJy4gcmVmbGV4aXZpdHkuICBRZWQuCgooKiogQ29xIGlzIHBl
cmZlY3RseSBoYXBweSB3aXRoIHRoaXMuICBGb3IgYSBodW1hbiwgaG93ZXZlciwgaXQKICAgIGlz
IGRpZmZpY3VsdCB0byBtYWtlIG11Y2ggc2Vuc2Ugb2YgaXQuICBXZSBjYW4gdXNlIGNvbW1lbnRz
IGFuZAogICAgYnVsbGV0cyB0byBzaG93IHRoZSBzdHJ1Y3R1cmUgYSBsaXR0bGUgbW9yZSBjbGVh
cmx5Li4uICopCgpUaGVvcmVtIHBsdXNfYXNzb2MnJyA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBu
ICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgpQcm9vZi4KICBpbnRyb3MgbiBtIHAuIGluZHVjdGlv
biBuIGFzIFt8IG4nIElIbiddLgogIC0gKCogbiA9IDAgKikKICAgIHJlZmxleGl2aXR5LgogIC0g
KCogbiA9IFMgbicgKikKICAgIHNpbXBsLiByZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5LiAg
IFFlZC4KCigqKiAuLi4gYW5kIGlmIHlvdSdyZSB1c2VkIHRvIENvcSB5b3UgbWF5IGJlIGFibGUg
dG8gc3RlcAogICAgdGhyb3VnaCB0aGUgdGFjdGljcyBvbmUgYWZ0ZXIgdGhlIG90aGVyIGluIHlv
dXIgbWluZCBhbmQgaW1hZ2luZQogICAgdGhlIHN0YXRlIG9mIHRoZSBjb250ZXh0IGFuZCBnb2Fs
IHN0YWNrIGF0IGVhY2ggcG9pbnQsIGJ1dCBpZiB0aGUKICAgIHByb29mIHdlcmUgZXZlbiBhIGxp
dHRsZSBiaXQgbW9yZSBjb21wbGljYXRlZCB0aGlzIHdvdWxkIGJlIG5leHQKICAgIHRvIGltcG9z
c2libGUuCgogICAgQSAocGVkYW50aWMpIG1hdGhlbWF0aWNpYW4gbWlnaHQgd3JpdGUgdGhlIHBy
b29mIHNvbWV0aGluZyBsaWtlCiAgICB0aGlzOiAqKQoKKCoqIC0gX1RoZW9yZW1fOiBGb3IgYW55
IFtuXSwgW21dIGFuZCBbcF0sCgogICAgICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgoKICAg
IF9Qcm9vZl86IEJ5IGluZHVjdGlvbiBvbiBbbl0uCgogICAgLSBGaXJzdCwgc3VwcG9zZSBbbiA9
IDBdLiAgV2UgbXVzdCBzaG93CgogICAgICAgIDAgKyAobSArIHApID0gKDAgKyBtKSArIHAuCgog
ICAgICBUaGlzIGZvbGxvd3MgZGlyZWN0bHkgZnJvbSB0aGUgZGVmaW5pdGlvbiBvZiBbK10uCgog
ICAgLSBOZXh0LCBzdXBwb3NlIFtuID0gUyBuJ10sIHdoZXJlCgogICAgICAgIG4nICsgKG0gKyBw
KSA9IChuJyArIG0pICsgcC4KCiAgICAgIFdlIG11c3Qgc2hvdwoKICAgICAgICAoUyBuJykgKyAo
bSArIHApID0gKChTIG4nKSArIG0pICsgcC4KCiAgICAgIEJ5IHRoZSBkZWZpbml0aW9uIG9mIFsr
XSwgdGhpcyBmb2xsb3dzIGZyb20KCiAgICAgICAgUyAobicgKyAobSArIHApKSA9IFMgKChuJyAr
IG0pICsgcCksCgogICAgICB3aGljaCBpcyBpbW1lZGlhdGUgZnJvbSB0aGUgaW5kdWN0aW9uIGh5
cG90aGVzaXMuICBfUWVkXy4gKikKCgooKiogVGhlIG92ZXJhbGwgZm9ybSBvZiB0aGUgcHJvb2Yg
aXMgYmFzaWNhbGx5IHNpbWlsYXIsIGFuZCBvZgogICAgY291cnNlIHRoaXMgaXMgbm8gYWNjaWRl
bnQ6IENvcSBoYXMgYmVlbiBkZXNpZ25lZCBzbyB0aGF0IGl0cwogICAgW2luZHVjdGlvbl0gdGFj
dGljIGdlbmVyYXRlcyB0aGUgc2FtZSBzdWItZ29hbHMsIGluIHRoZSBzYW1lCiAgICBvcmRlciwg
YXMgdGhlIGJ1bGxldCBwb2ludHMgdGhhdCBhIG1hdGhlbWF0aWNpYW4gd291bGQgd3JpdGUuICBC
dXQKICAgIHRoZXJlIGFyZSBzaWduaWZpY2FudCBkaWZmZXJlbmNlcyBvZiBkZXRhaWw6IHRoZSBm
b3JtYWwgcHJvb2YgaXMKICAgIG11Y2ggbW9yZSBleHBsaWNpdCBpbiBzb21lIHdheXMgKGUuZy4s
IHRoZSB1c2Ugb2YgW3JlZmxleGl2aXR5XSkKICAgIGJ1dCBtdWNoIGxlc3MgZXhwbGljaXQgaW4g
b3RoZXJzIChpbiBwYXJ0aWN1bGFyLCB0aGUgInByb29mIHN0YXRlIgogICAgYXQgYW55IGdpdmVu
IHBvaW50IGluIHRoZSBDb3EgcHJvb2YgaXMgY29tcGxldGVseSBpbXBsaWNpdCwKICAgIHdoZXJl
YXMgdGhlIGluZm9ybWFsIHByb29mIHJlbWluZHMgdGhlIHJlYWRlciBzZXZlcmFsIHRpbWVzIHdo
ZXJlCiAgICB0aGluZ3Mgc3RhbmQpLiAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDIgc3RhcnMsIGFk
dmFuY2VkLCByZWNvbW1lbmRlZCAocGx1c19jb21tX2luZm9ybWFsKSAgKikKKCoqIFRyYW5zbGF0
ZSB5b3VyIHNvbHV0aW9uIGZvciBbcGx1c19jb21tXSBpbnRvIGFuIGluZm9ybWFsIHByb29mOgoK
ICAgIFRoZW9yZW06IEFkZGl0aW9uIGlzIGNvbW11dGF0aXZlLgoKICAgIFByb29mOiAoKiBGSUxM
IElOIEhFUkUgKikKKikKKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywgb3B0
aW9uYWwgKGJlcV9uYXRfcmVmbF9pbmZvcm1hbCkgICopCigqKiBXcml0ZSBhbiBpbmZvcm1hbCBw
cm9vZiBvZiB0aGUgZm9sbG93aW5nIHRoZW9yZW0sIHVzaW5nIHRoZQogICAgaW5mb3JtYWwgcHJv
b2Ygb2YgW3BsdXNfYXNzb2NdIGFzIGEgbW9kZWwuICBEb24ndCBqdXN0CiAgICBwYXJhcGhyYXNl
IHRoZSBDb3EgdGFjdGljcyBpbnRvIEVuZ2xpc2ghCgogICAgVGhlb3JlbTogW3RydWUgPSBiZXFf
bmF0IG4gbl0gZm9yIGFueSBbbl0uCgogICAgUHJvb2Y6ICgqIEZJTEwgSU4gSEVSRSAqKQpbXSAq
KQoKKCoqICREYXRlOiAyMDE2LTA1LTI2IDE2OjE3OjE5IC0wNDAwIChUaHUsIDI2IE1heSAyMDE2
KSAkICopCgo=
(*UHIDE*)