(*HIDE*)Cg==
(*UHIDE*)

(** * Induction: Proof by Induction *)

(** First, we import all of our definitions from the previous
    chapter. *)

Require Export chap1.

(** For the [Require Export] to work, you first need to use
    [coqc] to compile [Basics.v] into [Basics.vo].  This is like
    making a .class file from a .java file, or a .o file from a .c
    file.  There are two ways to do it:

     - In CoqIDE:

         Open [Basics.v].  In the "Compile" menu, click on "Compile
         Buffer".

     - From the command line:

         Run [coqc Basics.v]

    *)

(* ################################################################# *)
(** * Proof by Induction *)

(** We proved in the last chapter that [0] is a neutral element
    for [+] on the left using an easy argument based on
    simplification.  The fact that it is also a neutral element on the
    _right_... *)

Theorem plus_n_O_firsttry : forall n:nat,
  n = n + 0.

(** ... cannot be proved in the same simple way.  Just applying
  [reflexivity] doesn't work, since the [n] in [n + 0] is an arbitrary
  unknown number, so the [match] in the definition of [+] can't be
  simplified.  *)

Proof.
  intros n.
  simpl. 
Abort.

(** And reasoning by cases using [destruct n] doesn't get us much
   further: the branch of the case analysis where we assume [n = 0]
   goes through fine, but in the branch where [n = S n'] for some [n'] we
   get stuck in exactly the same way.  We could use [destruct n'] to
   get one step further, but, since [n] can be arbitrarily large, if we
   try to keep on like this we'll never be done. *)


Theorem plus_n_O_secondtry : forall n:nat,
  n = n + 0.
Proof.
  intros n. destruct n as [| n'].
  - (* n = 0 *)
    reflexivity. (* so far so good... *)
  - (* n = S n' *)
    simpl.       (* ...but here we are stuck again *)
Abort.

(** To prove interesting facts about numbers, lists, and other
    inductively defined sets, we usually need a more powerful
    reasoning principle: _induction_.

    Recall (from high school, a discrete math course, etc.) the
    principle of induction over natural numbers: If [P(n)] is some
    proposition involving a natural number [n] and we want to show
    that [P] holds for _all_ numbers [n], we can reason like this:
         - show that [P(O)] holds;
         - show that, for any [n'], if [P(n')] holds, then so does
           [P(S n')];
         - conclude that [P(n)] holds for all [n].

    In Coq, the steps are the same but the order is backwards: we
    begin with the goal of proving [P(n)] for all [n] and break it
    down (by applying the [induction] tactic) into two separate
    subgoals: first showing [P(O)] and then showing [P(n') -> P(S
    n')].  Here's how this works for the theorem at hand: *)

Theorem plus_n_O : forall n:nat, n = n + 0.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)    reflexivity.
  - (* n = S n' *) simpl. rewrite <- IHn'. reflexivity.  Qed.

(** Like [destruct], the [induction] tactic takes an [as...]
    clause that specifies the names of the variables to be introduced
    in the subgoals.  In the first branch, [n] is replaced by [0] and
    the goal becomes [0 + 0 = 0], which follows by simplification.  In
    the second, [n] is replaced by [S n'] and the assumption [n' + 0 =
    n'] is added to the context (with the name [IHn'], i.e., the
    Induction Hypothesis for [n'] -- notice that this name is
    explicitly chosen in the [as...] clause of the call to [induction]
    rather than letting Coq choose one arbitrarily). The goal in this
    case becomes [(S n') + 0 = S n'], which simplifies to [S (n' + 0)
    = S n'], which in turn follows from [IHn']. *)

(* We cannot use destruct here, because it is not forall n, just for that
specific n. After the O case, we are left with the n case, which is exactly what
we are trying to prove! *)
Theorem plus_n_Od : forall n:nat, n = n + 0.
Proof.
  intros n. destruct n.
  - (* n = 0 *)    reflexivity.
  - (* S n = S (n + 0) *) simpl. Admitted.

(* So induction differs in that it works forall n, not just n. It also creates a
hypothesis we can use for our matching. I am still very confused on the concept
of how using the thing we are proving to prove our Theorem makes any sense at
all... :/ *)

Theorem minus_diag : forall n,
  minus n n = 0.
Proof.
  (* WORKED IN CLASS *)
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)
    simpl. reflexivity.
  - (* n = S n' *)
    simpl. rewrite -> IHn'. reflexivity.  Qed.

(** (The use of the [intros] tactic in these proofs is actually
    redundant.  When applied to a goal that contains quantified
    variables, the [induction] tactic will automatically move them
    into the context as needed.) *)

(** **** Exercise: 2 stars, recommended (basic_induction)  *)
(** Prove the following using induction. You might need previously
    proven results. *)
(* Its becoming more and more apparent that proofs must be built up out of
smaller proofs. A good first step would be to consider what proofs I have
already proven. This book seems to link exercises and examples together: the
solution for a proof is highly likely to be found in the prior proofs. *)

(*HIDE*)CgpUaGVvcmVtIG11bHRfMF9yIDogZm9yYWxsIG46bmF0LAogIG4gKiAwID0gMC4KUHJvb2YuCiAg
aW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICAgc2ltcGwuIHJlZmxleGl2
aXR5LgogICAgc2ltcGwuIHJld3JpdGUgLT4gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9y
ZW0gYWRkX2VxdWl2IDogZm9yYWxsIG46bmF0LAogIFMobikgPSBTKG4pLgpQcm9vZi4KICBpbnRy
b3Mgbi4gaW5kdWN0aW9uIG4gYXMgW3wgbicgSUhuJ10uCiAgICBzaW1wbC4gcmVmbGV4aXZpdHku
CiAgICBzaW1wbC4gcmVmbGV4aXZpdHkuClFlZC4KCigqIFNldCBQcmludGluZyBBbGwuICopClRo
ZW9yZW0gcGx1c19uX1NtIDogZm9yYWxsIG4gbSA6IG5hdCwgCiAgUyAobiArIG0pID0gbiArIChT
IG0pLgpQcm9vZi4KICAoKiB3aXRob3V0IGludHJvZHVjaW5nIG4gQU5OTk5ORCBtIGhlcmUsIHRo
ZSByZXdyaXRlIGRvZXNuJ3QgbWF0Y2guIGdycnJyICopCiAgaW50cm9zIG4gbS4gaW5kdWN0aW9u
IG4gYXMgW3wgbicgSUhuJ10uCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyBzaW1w
bC4gcmV3cml0ZSA8LSBJSG4nLiByZWZsZXhpdml0eS4gfQpRZWQuIAoKVGhlb3JlbSBwbHVzX2Nv
bW0gOiBmb3JhbGwgbiBtIDogbmF0LAogIG4gKyBtID0gbSArIG4uClByb29mLgogIGludHJvcyBu
IG0uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICgqIEkgaGF2ZSB0byByZW1lbWJlciB0
byB1c2UgZXhpc3RpbmcgcHJvb2ZzISAqKQogIHNpbXBsLiByZXdyaXRlIDwtIHBsdXNfbl9PLiBy
ZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8LSBwbHVzX25fU20uIHJld3JpdGUgLT4gSUhu
Jy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9yZW0gcGx1c19hc3NvYyA6IGZvcmFsbCBuIG0gcCA6
IG5hdCwKICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgpQcm9vZi4KICBpbnRyb3MgbiBtIHAu
IGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLiAKICBzaW1wbC4gcmVmbGV4aXZpdHkuCiAgc2lt
cGwuIHJld3JpdGUgPC0gSUhuJy4gc2ltcGwuIHJlZmxleGl2aXR5LgpRZWQuCigqKiBbXSAqKQoK
CigqKiAqKioqIEV4ZXJjaXNlOiAyIHN0YXJzIChkb3VibGVfcGx1cykgICopCigqKiBDb25zaWRl
ciB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uLCB3aGljaCBkb3VibGVzIGl0cyBhcmd1bWVudDogKikK
CkZpeHBvaW50IGRvdWJsZSAobjpuYXQpIDo9CiAgbWF0Y2ggbiB3aXRoCiAgfCBPID0+IE8KICB8
IFMgbicgPT4gUyAoUyAoZG91YmxlIG4nKSkKICBlbmQuCgooKiogVXNlIGluZHVjdGlvbiB0byBw
cm92ZSB0aGlzIHNpbXBsZSBmYWN0IGFib3V0IFtkb3VibGVdOiAqKQoKTGVtbWEgZG91YmxlX3Bs
dXMgOiBmb3JhbGwgbiwgZG91YmxlIG4gPSBuICsgbiAuClByb29mLgogIGludHJvcyBuLiBpbmR1
Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8
LSBwbHVzX25fU20uIHJld3JpdGUgPC0gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KKCoqIFtdICop
CgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGV2ZW5iX1MpICAqKQooKiog
T25lIGluY29udmVuaW5lbnQgYXNwZWN0IG9mIG91ciBkZWZpbml0aW9uIG9mIFtldmVuYiBuXSBp
cyB0aGF0IGl0CiAgICBtYXkgbmVlZCB0byBwZXJmb3JtIGEgcmVjdXJzaXZlIGNhbGwgb24gW24g
LSAyXS4gVGhpcyBtYWtlcyBwcm9vZnMKICAgIGFib3V0IFtldmVuYiBuXSBoYXJkZXIgd2hlbiBk
b25lIGJ5IGluZHVjdGlvbiBvbiBbbl0sIHNpbmNlIHdlIG1heQogICAgbmVlZCBhbiBpbmR1Y3Rp
b24gaHlwb3RoZXNpcyBhYm91dCBbbiAtIDJdLiBUaGUgZm9sbG93aW5nIGxlbW1hCiAgICBnaXZl
cyBhIGJldHRlciBjaGFyYWN0ZXJpemF0aW9uIG9mIFtldmVuYiAoUyBuKV06ICopCgpUaGVvcmVt
IG5lZ2JfZG91YmxlZCA6IGZvcmFsbCBiIDogYm9vbCwgbmVnYiAobmVnYiBiKSA9IGIuClByb29m
LgogIGludHJvcyBiLiBpbmR1Y3Rpb24gYi4KICByZWZsZXhpdml0eS4KICByZWZsZXhpdml0eS4K
UWVkLgoKVGhlb3JlbSBldmVuYl9TIDogZm9yYWxsIG4gOiBuYXQsCiAgZXZlbmIgKFMgbikgPSBu
ZWdiIChldmVuYiBuKS4KUHJvb2YuCiAgaW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElI
biddLgogIHJlZmxleGl2aXR5LgogIGluZHVjdGlvbiBuJy4KICAtIHsgc2ltcGwuIHJlZmxleGl2
aXR5LiB9CiAgLSB7IHJld3JpdGUgLT4gSUhuJy4KICAgICAgcmV3cml0ZSAtPiBuZWdiX2RvdWJs
ZWQuCiAgICAgIHJlZmxleGl2aXR5LiB9ClFlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lz
ZTogMSBzdGFyIChkZXN0cnVjdF9pbmR1Y3Rpb24pICAqKQooKiogQnJpZWZseSBleHBsYWluIHRo
ZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHRhY3RpY3MgW2Rlc3RydWN0XSAKICAgIGFuZCBbaW5k
dWN0aW9uXS4KCigqIEZJTEwgSU4gSEVSRSAqKQoqKQooKiogW10gKikKCg==
(*UHIDE*)

(* ################################################################# *)
(** * Proofs Within Proofs *)

(** In Coq, as in informal mathematics, large proofs are often
    broken into a sequence of theorems, with later proofs referring to
    earlier theorems.  But sometimes a proof will require some
    miscellaneous fact that is too trivial and of too little general
    interest to bother giving it its own top-level name.  In such
    cases, it is convenient to be able to simply state and prove the
    needed "sub-theorem" right at the point where it is used.  The
    [assert] tactic allows us to do this.  For example, our earlier
    proof of the [mult_0_plus] theorem referred to a previous theorem
    named [plus_O_n].  We could instead use [assert] to state and
    prove [plus_O_n] in-line: *)

Theorem mult_0_plus' : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H: 0 + n = n). { reflexivity. }
  rewrite -> H.
  reflexivity.  Qed.

(** The [assert] tactic introduces two sub-goals.  The first is
    the assertion itself; by prefixing it with [H:] we name the
    assertion [H].  (We can also name the assertion with [as] just as
    we did above with [destruct] and [induction], i.e., [assert (0 + n
    = n) as H].)  Note that we surround the proof of this assertion
    with curly braces [{ ... }], both for readability and so that,
    when using Coq interactively, we can see more easily when we have
    finished this sub-proof.  The second goal is the same as the one
    at the point where we invoke [assert] except that, in the context,
    we now have the assumption [H] that [0 + n = n].  That is,
    [assert] generates one subgoal where we must prove the asserted
    fact and a second subgoal where we can use the asserted fact to
    make progress on whatever we were trying to prove in the first
    place. *)

(** The [assert] tactic is handy in many sorts of situations.  For
    example, suppose we want to prove that [(n + m) + (p + q) = (m +
    n) + (p + q)]. The only difference between the two sides of the
    [=] is that the arguments [m] and [n] to the first inner [+] are
    swapped, so it seems we should be able to use the commutativity of
    addition ([plus_comm]) to rewrite one into the other.  However,
    the [rewrite] tactic is a little stupid about _where_ it applies
    the rewrite.  There are three uses of [+] here, and it turns out
    that doing [rewrite -> plus_comm] will affect only the _outer_
    one... *)

Theorem plus_rearrange_firsttry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  (* We just need to swap (n + m) for (m + n)...
     it seems like plus_comm should do the trick! *)
  rewrite -> plus_comm.
  (* Doesn't work...Coq rewrote the wrong plus! *)
Abort.

(** To get [plus_comm] to apply at the point where we want it to, we
    can introduce a local lemma stating that [n + m = m + n] (for the
    particular [m] and [n] that we are talking about here), prove this
    lemma using [plus_comm], and then use it to do the desired
    rewrite. *)

Theorem plus_rearrange : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  assert (H: n + m = m + n).
  { rewrite -> plus_comm. reflexivity. }
  rewrite -> H. reflexivity.  Qed.

(* ################################################################# *)
(*HIDE*)CigqKiAqIE1vcmUgRXhlcmNpc2VzICopCgooKiogKioqKiBFeGVyY2lzZTogMyBzdGFycywgcmVj
b21tZW5kZWQgKG11bHRfY29tbSkgICopCigqKiBVc2UgW2Fzc2VydF0gdG8gaGVscCBwcm92ZSB0
aGlzIHRoZW9yZW0uICBZb3Ugc2hvdWxkbid0IG5lZWQgdG8KICAgIHVzZSBpbmR1Y3Rpb24gb24g
W3BsdXNfc3dhcF0uICopCgooKiBUaGVvcmVtIHBsdXNfYXNzb2MgOiBmb3JhbGwgbiBtIHAgOiBu
YXQsICopCigqICAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4gKikKCigqIFRoZW9yZW0gcGx1
c19jb21tIDogZm9yYWxsIG4gbSA6IG5hdCwgKikKKCogICBuICsgbSA9IG0gKyBuLiAqKQoKVGhl
b3JlbSBwbHVzX3N3YXAgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkgPSBtICsg
KG4gKyBwKS4KUHJvb2YuCiAgaW50cm9zIG4gbSBwLgogIHJld3JpdGUgLT4gcGx1c19jb21tLgog
IHJld3JpdGUgPC0gcGx1c19hc3NvYy4KICBhc3NlcnQgKEg6IHAgKyBuID0gbiArIHApLgogIHsg
cmV3cml0ZSAtPiBwbHVzX2NvbW0uIHJlZmxleGl2aXR5LiB9CiAgcmV3cml0ZSAtPiBILiAgCiAg
cmVmbGV4aXZpdHkuClFlZC4KCigqKiBOb3cgcHJvdmUgY29tbXV0YXRpdml0eSBvZiBtdWx0aXBs
aWNhdGlvbi4gIChZb3Ugd2lsbCBwcm9iYWJseQogICAgbmVlZCB0byBkZWZpbmUgYW5kIHByb3Zl
IGEgc2VwYXJhdGUgc3Vic2lkaWFyeSB0aGVvcmVtIHRvIGJlIHVzZWQKICAgIGluIHRoZSBwcm9v
ZiBvZiB0aGlzIG9uZS4gIFlvdSBtYXkgZmluZCB0aGF0IFtwbHVzX3N3YXBdIGNvbWVzIGluCiAg
ICBoYW5keS4pICopCgpUaGVvcmVtIG11bHRfY29tbSA6IGZvcmFsbCBtIG4gOiBuYXQsCiAgbSAq
IG4gPSBuICogbS4KUHJvb2YuCiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVkLgooKiogW10g
KikKCigqKiAqKioqIEV4ZXJjaXNlOiAzIHN0YXJzLCBvcHRpb25hbCAobW9yZV9leGVyY2lzZXMp
ICAqKQooKiogVGFrZSBhIHBpZWNlIG9mIHBhcGVyLiAgRm9yIGVhY2ggb2YgdGhlIGZvbGxvd2lu
ZyB0aGVvcmVtcywgZmlyc3QKICAgIF90aGlua18gYWJvdXQgd2hldGhlciAoYSkgaXQgY2FuIGJl
IHByb3ZlZCB1c2luZyBvbmx5CiAgICBzaW1wbGlmaWNhdGlvbiBhbmQgcmV3cml0aW5nLCAoYikg
aXQgYWxzbyByZXF1aXJlcyBjYXNlCiAgICBhbmFseXNpcyAoW2Rlc3RydWN0XSksIG9yIChjKSBp
dCBhbHNvIHJlcXVpcmVzIGluZHVjdGlvbi4gIFdyaXRlCiAgICBkb3duIHlvdXIgcHJlZGljdGlv
bi4gIFRoZW4gZmlsbCBpbiB0aGUgcHJvb2YuICAoVGhlcmUgaXMgbm8gbmVlZAogICAgdG8gdHVy
biBpbiB5b3VyIHBpZWNlIG9mIHBhcGVyOyB0aGlzIGlzIGp1c3QgdG8gZW5jb3VyYWdlIHlvdSB0
bwogICAgcmVmbGVjdCBiZWZvcmUgeW91IGhhY2shKSAqKQoKVGhlb3JlbSBsZWJfcmVmbCA6IGZv
cmFsbCBuOm5hdCwKICB0cnVlID0gbGViIG4gbi4KUHJvb2YuCiAgKCogRklMTCBJTiBIRVJFICop
IEFkbWl0dGVkLgoKVGhlb3JlbSB6ZXJvX25iZXFfUyA6IGZvcmFsbCBuOm5hdCwKICBiZXFfbmF0
IDAgKFMgbikgPSBmYWxzZS4KUHJvb2YuCiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVkLgoK
VGhlb3JlbSBhbmRiX2ZhbHNlX3IgOiBmb3JhbGwgYiA6IGJvb2wsCiAgYW5kYiBiIGZhbHNlID0g
ZmFsc2UuClByb29mLgogICgqIEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gcGx1
c19ibGVfY29tcGF0X2wgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbGViIG4gbSA9IHRydWUgLT4g
bGViIChwICsgbikgKHAgKyBtKSA9IHRydWUuClByb29mLgogICgqIEZJTEwgSU4gSEVSRSAqKSBB
ZG1pdHRlZC4KClRoZW9yZW0gU19uYmVxXzAgOiBmb3JhbGwgbjpuYXQsCiAgYmVxX25hdCAoUyBu
KSAwID0gZmFsc2UuClByb29mLgogICgqIEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KClRoZW9y
ZW0gbXVsdF8xX2wgOiBmb3JhbGwgbjpuYXQsIDEgKiBuID0gbi4KUHJvb2YuCiAgKCogRklMTCBJ
TiBIRVJFICopIEFkbWl0dGVkLgoKVGhlb3JlbSBhbGwzX3NwZWMgOiBmb3JhbGwgYiBjIDogYm9v
bCwKICAgIG9yYgogICAgICAoYW5kYiBiIGMpCiAgICAgIChvcmIgKG5lZ2IgYikKICAgICAgICAg
ICAgICAgKG5lZ2IgYykpCiAgPSB0cnVlLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRt
aXR0ZWQuCgpUaGVvcmVtIG11bHRfcGx1c19kaXN0cl9yIDogZm9yYWxsIG4gbSBwIDogbmF0LAog
IChuICsgbSkgKiBwID0gKG4gKiBwKSArIChtICogcCkuClByb29mLgogICgqIEZJTEwgSU4gSEVS
RSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gbXVsdF9hc3NvYyA6IGZvcmFsbCBuIG0gcCA6IG5hdCwK
ICBuICogKG0gKiBwKSA9IChuICogbSkgKiBwLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikg
QWRtaXR0ZWQuCigqKiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDIgc3RhcnMsIG9wdGlvbmFs
IChiZXFfbmF0X3JlZmwpICAqKQooKiogUHJvdmUgdGhlIGZvbGxvd2luZyB0aGVvcmVtLiAgKFB1
dHRpbmcgdGhlIFt0cnVlXSBvbiB0aGUgbGVmdC1oYW5kCiAgICBzaWRlIG9mIHRoZSBlcXVhbGl0
eSBtYXkgbG9vayBvZGQsIGJ1dCB0aGlzIGlzIGhvdyB0aGUgdGhlb3JlbSBpcwogICAgc3RhdGVk
IGluIHRoZSBDb3Egc3RhbmRhcmQgbGlicmFyeSwgc28gd2UgZm9sbG93IHN1aXQuICBSZXdyaXRp
bmcKICAgIHdvcmtzIGVxdWFsbHkgd2VsbCBpbiBlaXRoZXIgZGlyZWN0aW9uLCBzbyB3ZSB3aWxs
IGhhdmUgbm8gcHJvYmxlbQogICAgdXNpbmcgdGhlIHRoZW9yZW0gbm8gbWF0dGVyIHdoaWNoIHdh
eSB3ZSBzdGF0ZSBpdC4pICopCgpUaGVvcmVtIGJlcV9uYXRfcmVmbCA6IGZvcmFsbCBuIDogbmF0
LAogIHRydWUgPSBiZXFfbmF0IG4gbi4KUHJvb2YuCiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0
dGVkLgooKiogW10gKikKCigqKiAqKioqIEV4ZXJjaXNlOiAyIHN0YXJzLCBvcHRpb25hbCAocGx1
c19zd2FwJykgICopCigqKiBUaGUgW3JlcGxhY2VdIHRhY3RpYyBhbGxvd3MgeW91IHRvIHNwZWNp
ZnkgYSBwYXJ0aWN1bGFyIHN1YnRlcm0gdG8KICAgcmV3cml0ZSBhbmQgd2hhdCB5b3Ugd2FudCBp
dCByZXdyaXR0ZW4gdG86IFtyZXBsYWNlICh0KSB3aXRoICh1KV0KICAgcmVwbGFjZXMgKGFsbCBj
b3BpZXMgb2YpIGV4cHJlc3Npb24gW3RdIGluIHRoZSBnb2FsIGJ5IGV4cHJlc3Npb24KICAgW3Vd
LCBhbmQgZ2VuZXJhdGVzIFt0ID0gdV0gYXMgYW4gYWRkaXRpb25hbCBzdWJnb2FsLiBUaGlzIGlz
IG9mdGVuCiAgIHVzZWZ1bCB3aGVuIGEgcGxhaW4gW3Jld3JpdGVdIGFjdHMgb24gdGhlIHdyb25n
IHBhcnQgb2YgdGhlIGdvYWwuCgogICBVc2UgdGhlIFtyZXBsYWNlXSB0YWN0aWMgdG8gZG8gYSBw
cm9vZiBvZiBbcGx1c19zd2FwJ10sIGp1c3QgbGlrZQogICBbcGx1c19zd2FwXSBidXQgd2l0aG91
dCBuZWVkaW5nIFthc3NlcnQgKG4gKyBtID0gbSArIG4pXS4gKikKClRoZW9yZW0gcGx1c19zd2Fw
JyA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBuICsgKG0gKyBwKSA9IG0gKyAobiArIHApLgpQcm9v
Zi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQuCigqKiBbXSAqKQoKKCoqICoqKiogRXhl
cmNpc2U6IDMgc3RhcnMsIHJlY29tbWVuZGVkIChiaW5hcnlfY29tbXV0ZSkgICopCigqKiBSZWNh
bGwgdGhlIFtpbmNyXSBhbmQgW2Jpbl90b19uYXRdIGZ1bmN0aW9ucyB0aGF0IHlvdQogICAgd3Jv
dGUgZm9yIHRoZSBbYmluYXJ5XSBleGVyY2lzZSBpbiB0aGUgW0Jhc2ljc10gY2hhcHRlci4gIFBy
b3ZlCiAgICB0aGF0IHRoZSBmb2xsb3dpbmcgZGlhZ3JhbSBjb21tdXRlczoKCiAgICAgICAgICAg
ICAgIGJpbiAtLS0tLS0tLS0gaW5jciAtLS0tLS0tPiBiaW4KICAgICAgICAgICAgICAgIHwgICAg
ICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAgICAgICAgIGJpbl90b19uYXQgICAgICAgICAg
ICAgICAgICBiaW5fdG9fbmF0CiAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAg
ICAgICAgfAogICAgICAgICAgICAgICAgdiAgICAgICAgICAgICAgICAgICAgICAgICAgIHYKICAg
ICAgICAgICAgICAgbmF0IC0tLS0tLS0tLS0gUyAtLS0tLS0tLS0+IG5hdAoKICAgIFRoYXQgaXMs
IGluY3JlbWVudGluZyBhIGJpbmFyeSBudW1iZXIgYW5kIHRoZW4gY29udmVydGluZyBpdCB0byAK
ICAgIGEgKHVuYXJ5KSBuYXR1cmFsIG51bWJlciB5aWVsZHMgdGhlIHNhbWUgcmVzdWx0IGFzIGZp
cnN0IGNvbnZlcnRpbmcKICAgIGl0IHRvIGEgbmF0dXJhbCBudW1iZXIgYW5kIHRoZW4gaW5jcmVt
ZW50aW5nLiAgCiAgICBOYW1lIHlvdXIgdGhlb3JlbSBbYmluX3RvX25hdF9wcmVzX2luY3JdICgi
cHJlcyIgZm9yICJwcmVzZXJ2ZXMiKS4KCiAgICBCZWZvcmUgeW91IHN0YXJ0IHdvcmtpbmcgb24g
dGhpcyBleGVyY2lzZSwgcGxlYXNlIGNvcHkgdGhlCiAgICBkZWZpbml0aW9ucyBmcm9tIHlvdXIg
c29sdXRpb24gdG8gdGhlIFtiaW5hcnldIGV4ZXJjaXNlIGhlcmUgc28KICAgIHRoYXQgdGhpcyBm
aWxlIGNhbiBiZSBncmFkZWQgb24gaXRzIG93bi4gIElmIHlvdSBmaW5kIHlvdXJzZWxmCiAgICB3
YW50aW5nIHRvIGNoYW5nZSB5b3VyIG9yaWdpbmFsIGRlZmluaXRpb25zIHRvIG1ha2UgdGhlIHBy
b3BlcnR5CiAgICBlYXNpZXIgdG8gcHJvdmUsIGZlZWwgZnJlZSB0byBkbyBzbyEgKikKCigqIEZJ
TEwgSU4gSEVSRSAqKQooKiogW10gKikKCigqKiAqKioqIEV4ZXJjaXNlOiA1IHN0YXJzLCBhZHZh
bmNlZCAoYmluYXJ5X2ludmVyc2UpICAqKQooKiogVGhpcyBleGVyY2lzZSBpcyBhIGNvbnRpbnVh
dGlvbiBvZiB0aGUgcHJldmlvdXMgZXhlcmNpc2UgYWJvdXQKICAgIGJpbmFyeSBudW1iZXJzLiAg
WW91IHdpbGwgbmVlZCB5b3VyIGRlZmluaXRpb25zIGFuZCB0aGVvcmVtcyBmcm9tCiAgICB0aGVy
ZSB0byBjb21wbGV0ZSB0aGlzIG9uZS4KCiAgICAoYSkgRmlyc3QsIHdyaXRlIGEgZnVuY3Rpb24g
dG8gY29udmVydCBuYXR1cmFsIG51bWJlcnMgdG8gYmluYXJ5CiAgICAgICAgbnVtYmVycy4gIFRo
ZW4gcHJvdmUgdGhhdCBzdGFydGluZyB3aXRoIGFueSBuYXR1cmFsIG51bWJlciwKICAgICAgICBj
b252ZXJ0aW5nIHRvIGJpbmFyeSwgdGhlbiBjb252ZXJ0aW5nIGJhY2sgeWllbGRzIHRoZSBzYW1l
CiAgICAgICAgbmF0dXJhbCBudW1iZXIgeW91IHN0YXJ0ZWQgd2l0aC4KCiAgICAoYikgWW91IG1p
Z2h0IG5hdHVyYWxseSB0aGluayB0aGF0IHdlIHNob3VsZCBhbHNvIHByb3ZlIHRoZQogICAgICAg
IG9wcG9zaXRlIGRpcmVjdGlvbjogdGhhdCBzdGFydGluZyB3aXRoIGEgYmluYXJ5IG51bWJlciwK
ICAgICAgICBjb252ZXJ0aW5nIHRvIGEgbmF0dXJhbCwgYW5kIHRoZW4gYmFjayB0byBiaW5hcnkg
eWllbGRzIHRoZQogICAgICAgIHNhbWUgbnVtYmVyIHdlIHN0YXJ0ZWQgd2l0aC4gIEhvd2V2ZXIs
IHRoaXMgaXMgbm90IHRydWUhCiAgICAgICAgRXhwbGFpbiB3aGF0IHRoZSBwcm9ibGVtIGlzLgoK
ICAgIChjKSBEZWZpbmUgYSAiZGlyZWN0IiBub3JtYWxpemF0aW9uIGZ1bmN0aW9uIC0tIGkuZS4s
IGEgZnVuY3Rpb24KICAgICAgICBbbm9ybWFsaXplXSBmcm9tIGJpbmFyeSBudW1iZXJzIHRvIGJp
bmFyeSBudW1iZXJzIHN1Y2ggdGhhdCwKICAgICAgICBmb3IgYW55IGJpbmFyeSBudW1iZXIgYiwg
Y29udmVydGluZyB0byBhIG5hdHVyYWwgYW5kIHRoZW4gYmFjawogICAgICAgIHRvIGJpbmFyeSB5
aWVsZHMgWyhub3JtYWxpemUgYildLiAgUHJvdmUgaXQuICAoV2FybmluZzogVGhpcwogICAgICAg
IHBhcnQgaXMgdHJpY2t5ISkKCiAgICBBZ2FpbiwgZmVlbCBmcmVlIHRvIGNoYW5nZSB5b3VyIGVh
cmxpZXIgZGVmaW5pdGlvbnMgaWYgdGhpcyBoZWxwcwogICAgaGVyZS4gKikKCigqIEZJTEwgSU4g
SEVSRSAqKQooKiogW10gKikKCigqICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjICopCigqKiAqIEZvcm1hbCB2cy4gSW5mb3Jt
YWwgUHJvb2YgKE9wdGlvbmFsKSAqKQoKKCoqICJfSW5mb3JtYWwgcHJvb2ZzIGFyZSBhbGdvcml0
aG1zOyBmb3JtYWwgcHJvb2ZzIGFyZSBjb2RlXy4iICopCgooKiogVGhlIHF1ZXN0aW9uIG9mIHdo
YXQgY29uc3RpdHV0ZXMgYSBwcm9vZiBvZiBhIG1hdGhlbWF0aWNhbAogICAgY2xhaW0gaGFzIGNo
YWxsZW5nZWQgcGhpbG9zb3BoZXJzIGZvciBtaWxsZW5uaWEsIGJ1dCBhIHJvdWdoIGFuZAogICAg
cmVhZHkgZGVmaW5pdGlvbiBjb3VsZCBiZSB0aGlzOiBBIHByb29mIG9mIGEgbWF0aGVtYXRpY2Fs
CiAgICBwcm9wb3NpdGlvbiBbUF0gaXMgYSB3cml0dGVuIChvciBzcG9rZW4pIHRleHQgdGhhdCBp
bnN0aWxscyBpbiB0aGUKICAgIHJlYWRlciBvciBoZWFyZXIgdGhlIGNlcnRhaW50eSB0aGF0IFtQ
XSBpcyB0cnVlLiAgVGhhdCBpcywgYSBwcm9vZgogICAgaXMgYW4gYWN0IG9mIGNvbW11bmljYXRp
b24uCgogICAgQWN0cyBvZiBjb21tdW5pY2F0aW9uIG1heSBpbnZvbHZlIGRpZmZlcmVudCBzb3J0
cyBvZiByZWFkZXJzLiAgT24KICAgIG9uZSBoYW5kLCB0aGUgInJlYWRlciIgY2FuIGJlIGEgcHJv
Z3JhbSBsaWtlIENvcSwgaW4gd2hpY2ggY2FzZQogICAgdGhlICJiZWxpZWYiIHRoYXQgaXMgaW5z
dGlsbGVkIGlzIHRoYXQgW1BdIGNhbiBiZSBtZWNoYW5pY2FsbHkKICAgIGRlcml2ZWQgZnJvbSBh
IGNlcnRhaW4gc2V0IG9mIGZvcm1hbCBsb2dpY2FsIHJ1bGVzLCBhbmQgdGhlIHByb29mCiAgICBp
cyBhIHJlY2lwZSB0aGF0IGd1aWRlcyB0aGUgcHJvZ3JhbSBpbiBjaGVja2luZyB0aGlzIGZhY3Qu
ICBTdWNoCiAgICByZWNpcGVzIGFyZSBfZm9ybWFsXyBwcm9vZnMuCgogICAgQWx0ZXJuYXRpdmVs
eSwgdGhlIHJlYWRlciBjYW4gYmUgYSBodW1hbiBiZWluZywgaW4gd2hpY2ggY2FzZSB0aGUKICAg
IHByb29mIHdpbGwgYmUgd3JpdHRlbiBpbiBFbmdsaXNoIG9yIHNvbWUgb3RoZXIgbmF0dXJhbCBs
YW5ndWFnZSwKICAgIGFuZCB3aWxsIHRodXMgbmVjZXNzYXJpbHkgYmUgX2luZm9ybWFsXy4gIEhl
cmUsIHRoZSBjcml0ZXJpYSBmb3IKICAgIHN1Y2Nlc3MgYXJlIGxlc3MgY2xlYXJseSBzcGVjaWZp
ZWQuICBBICJ2YWxpZCIgcHJvb2YgaXMgb25lIHRoYXQKICAgIG1ha2VzIHRoZSByZWFkZXIgYmVs
aWV2ZSBbUF0uICBCdXQgdGhlIHNhbWUgcHJvb2YgbWF5IGJlIHJlYWQgYnkKICAgIG1hbnkgZGlm
ZmVyZW50IHJlYWRlcnMsIHNvbWUgb2Ygd2hvbSBtYXkgYmUgY29udmluY2VkIGJ5IGEKICAgIHBh
cnRpY3VsYXIgd2F5IG9mIHBocmFzaW5nIHRoZSBhcmd1bWVudCwgd2hpbGUgb3RoZXJzIG1heSBu
b3QgYmUuCiAgICBTb21lIHJlYWRlcnMgbWF5IGJlIHBhcnRpY3VsYXJseSBwZWRhbnRpYywgaW5l
eHBlcmllbmNlZCwgb3IganVzdAogICAgcGxhaW4gdGhpY2staGVhZGVkOyB0aGUgb25seSB3YXkg
dG8gY29udmluY2UgdGhlbSB3aWxsIGJlIHRvIG1ha2UKICAgIHRoZSBhcmd1bWVudCBpbiBwYWlu
c3Rha2luZyBkZXRhaWwuICBCdXQgb3RoZXIgcmVhZGVycywgbW9yZQogICAgZmFtaWxpYXIgaW4g
dGhlIGFyZWEsIG1heSBmaW5kIGFsbCB0aGlzIGRldGFpbCBzbyBvdmVyd2hlbG1pbmcKICAgIHRo
YXQgdGhleSBsb3NlIHRoZSBvdmVyYWxsIHRocmVhZDsgYWxsIHRoZXkgd2FudCBpcyB0byBiZSB0
b2xkIHRoZQogICAgbWFpbiBpZGVhcywgc2luY2UgaXQgaXMgZWFzaWVyIGZvciB0aGVtIHRvIGZp
bGwgaW4gdGhlIGRldGFpbHMgZm9yCiAgICB0aGVtc2VsdmVzIHRoYW4gdG8gd2FkZSB0aHJvdWdo
IGEgd3JpdHRlbiBwcmVzZW50YXRpb24gb2YgdGhlbS4KICAgIFVsdGltYXRlbHksIHRoZXJlIGlz
IG5vIHVuaXZlcnNhbCBzdGFuZGFyZCwgYmVjYXVzZSB0aGVyZSBpcyBubwogICAgc2luZ2xlIHdh
eSBvZiB3cml0aW5nIGFuIGluZm9ybWFsIHByb29mIHRoYXQgaXMgZ3VhcmFudGVlZCB0bwogICAg
Y29udmluY2UgZXZlcnkgY29uY2VpdmFibGUgcmVhZGVyLgoKICAgIEluIHByYWN0aWNlLCBob3dl
dmVyLCBtYXRoZW1hdGljaWFucyBoYXZlIGRldmVsb3BlZCBhIHJpY2ggc2V0IG9mCiAgICBjb252
ZW50aW9ucyBhbmQgaWRpb21zIGZvciB3cml0aW5nIGFib3V0IGNvbXBsZXggbWF0aGVtYXRpY2Fs
CiAgICBvYmplY3RzIHRoYXQgLS0gYXQgbGVhc3Qgd2l0aGluIGEgY2VydGFpbiBjb21tdW5pdHkg
LS0gbWFrZQogICAgY29tbXVuaWNhdGlvbiBmYWlybHkgcmVsaWFibGUuICBUaGUgY29udmVudGlv
bnMgb2YgdGhpcyBzdHlsaXplZAogICAgZm9ybSBvZiBjb21tdW5pY2F0aW9uIGdpdmUgYSBmYWly
bHkgY2xlYXIgc3RhbmRhcmQgZm9yIGp1ZGdpbmcKICAgIHByb29mcyBnb29kIG9yIGJhZC4KCiAg
ICBCZWNhdXNlIHdlIGFyZSB1c2luZyBDb3EgaW4gdGhpcyBjb3Vyc2UsIHdlIHdpbGwgYmUgd29y
a2luZwogICAgaGVhdmlseSB3aXRoIGZvcm1hbCBwcm9vZnMuICBCdXQgdGhpcyBkb2Vzbid0IG1l
YW4gd2UgY2FuCiAgICBjb21wbGV0ZWx5IGZvcmdldCBhYm91dCBpbmZvcm1hbCBvbmVzISAgRm9y
bWFsIHByb29mcyBhcmUgdXNlZnVsCiAgICBpbiBtYW55IHdheXMsIGJ1dCB0aGV5IGFyZSBfbm90
XyB2ZXJ5IGVmZmljaWVudCB3YXlzIG9mCiAgICBjb21tdW5pY2F0aW5nIGlkZWFzIGJldHdlZW4g
aHVtYW4gYmVpbmdzLiAqKQoKKCoqIEZvciBleGFtcGxlLCBoZXJlIGlzIGEgcHJvb2YgdGhhdCBh
ZGRpdGlvbiBpcyBhc3NvY2lhdGl2ZTogKikKClRoZW9yZW0gcGx1c19hc3NvYycgOiBmb3JhbGwg
biBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4KUHJvb2YuIGludHJvcyBu
IG0gcC4gaW5kdWN0aW9uIG4gYXMgW3wgbicgSUhuJ10uIHJlZmxleGl2aXR5LgogIHNpbXBsLiBy
ZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5LiAgUWVkLgoKKCoqIENvcSBpcyBwZXJmZWN0bHkg
aGFwcHkgd2l0aCB0aGlzLiAgRm9yIGEgaHVtYW4sIGhvd2V2ZXIsIGl0CiAgICBpcyBkaWZmaWN1
bHQgdG8gbWFrZSBtdWNoIHNlbnNlIG9mIGl0LiAgV2UgY2FuIHVzZSBjb21tZW50cyBhbmQKICAg
IGJ1bGxldHMgdG8gc2hvdyB0aGUgc3RydWN0dXJlIGEgbGl0dGxlIG1vcmUgY2xlYXJseS4uLiAq
KQoKVGhlb3JlbSBwbHVzX2Fzc29jJycgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsg
cCkgPSAobiArIG0pICsgcC4KUHJvb2YuCiAgaW50cm9zIG4gbSBwLiBpbmR1Y3Rpb24gbiBhcyBb
fCBuJyBJSG4nXS4KICAtICgqIG4gPSAwICopCiAgICByZWZsZXhpdml0eS4KICAtICgqIG4gPSBT
IG4nICopCiAgICBzaW1wbC4gcmV3cml0ZSAtPiBJSG4nLiByZWZsZXhpdml0eS4gICBRZWQuCgoo
KiogLi4uIGFuZCBpZiB5b3UncmUgdXNlZCB0byBDb3EgeW91IG1heSBiZSBhYmxlIHRvIHN0ZXAK
ICAgIHRocm91Z2ggdGhlIHRhY3RpY3Mgb25lIGFmdGVyIHRoZSBvdGhlciBpbiB5b3VyIG1pbmQg
YW5kIGltYWdpbmUKICAgIHRoZSBzdGF0ZSBvZiB0aGUgY29udGV4dCBhbmQgZ29hbCBzdGFjayBh
dCBlYWNoIHBvaW50LCBidXQgaWYgdGhlCiAgICBwcm9vZiB3ZXJlIGV2ZW4gYSBsaXR0bGUgYml0
IG1vcmUgY29tcGxpY2F0ZWQgdGhpcyB3b3VsZCBiZSBuZXh0CiAgICB0byBpbXBvc3NpYmxlLgoK
ICAgIEEgKHBlZGFudGljKSBtYXRoZW1hdGljaWFuIG1pZ2h0IHdyaXRlIHRoZSBwcm9vZiBzb21l
dGhpbmcgbGlrZQogICAgdGhpczogKikKCigqKiAtIF9UaGVvcmVtXzogRm9yIGFueSBbbl0sIFtt
XSBhbmQgW3BdLAoKICAgICAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4KCiAgICBfUHJvb2Zf
OiBCeSBpbmR1Y3Rpb24gb24gW25dLgoKICAgIC0gRmlyc3QsIHN1cHBvc2UgW24gPSAwXS4gIFdl
IG11c3Qgc2hvdwoKICAgICAgICAwICsgKG0gKyBwKSA9ICgwICsgbSkgKyBwLgoKICAgICAgVGhp
cyBmb2xsb3dzIGRpcmVjdGx5IGZyb20gdGhlIGRlZmluaXRpb24gb2YgWytdLgoKICAgIC0gTmV4
dCwgc3VwcG9zZSBbbiA9IFMgbiddLCB3aGVyZQoKICAgICAgICBuJyArIChtICsgcCkgPSAobicg
KyBtKSArIHAuCgogICAgICBXZSBtdXN0IHNob3cKCiAgICAgICAgKFMgbicpICsgKG0gKyBwKSA9
ICgoUyBuJykgKyBtKSArIHAuCgogICAgICBCeSB0aGUgZGVmaW5pdGlvbiBvZiBbK10sIHRoaXMg
Zm9sbG93cyBmcm9tCgogICAgICAgIFMgKG4nICsgKG0gKyBwKSkgPSBTICgobicgKyBtKSArIHAp
LAoKICAgICAgd2hpY2ggaXMgaW1tZWRpYXRlIGZyb20gdGhlIGluZHVjdGlvbiBoeXBvdGhlc2lz
LiAgX1FlZF8uICopCgoKKCoqIFRoZSBvdmVyYWxsIGZvcm0gb2YgdGhlIHByb29mIGlzIGJhc2lj
YWxseSBzaW1pbGFyLCBhbmQgb2YKICAgIGNvdXJzZSB0aGlzIGlzIG5vIGFjY2lkZW50OiBDb3Eg
aGFzIGJlZW4gZGVzaWduZWQgc28gdGhhdCBpdHMKICAgIFtpbmR1Y3Rpb25dIHRhY3RpYyBnZW5l
cmF0ZXMgdGhlIHNhbWUgc3ViLWdvYWxzLCBpbiB0aGUgc2FtZQogICAgb3JkZXIsIGFzIHRoZSBi
dWxsZXQgcG9pbnRzIHRoYXQgYSBtYXRoZW1hdGljaWFuIHdvdWxkIHdyaXRlLiAgQnV0CiAgICB0
aGVyZSBhcmUgc2lnbmlmaWNhbnQgZGlmZmVyZW5jZXMgb2YgZGV0YWlsOiB0aGUgZm9ybWFsIHBy
b29mIGlzCiAgICBtdWNoIG1vcmUgZXhwbGljaXQgaW4gc29tZSB3YXlzIChlLmcuLCB0aGUgdXNl
IG9mIFtyZWZsZXhpdml0eV0pCiAgICBidXQgbXVjaCBsZXNzIGV4cGxpY2l0IGluIG90aGVycyAo
aW4gcGFydGljdWxhciwgdGhlICJwcm9vZiBzdGF0ZSIKICAgIGF0IGFueSBnaXZlbiBwb2ludCBp
biB0aGUgQ29xIHByb29mIGlzIGNvbXBsZXRlbHkgaW1wbGljaXQsCiAgICB3aGVyZWFzIHRoZSBp
bmZvcm1hbCBwcm9vZiByZW1pbmRzIHRoZSByZWFkZXIgc2V2ZXJhbCB0aW1lcyB3aGVyZQogICAg
dGhpbmdzIHN0YW5kKS4gKikKCigqKiAqKioqIEV4ZXJjaXNlOiAyIHN0YXJzLCBhZHZhbmNlZCwg
cmVjb21tZW5kZWQgKHBsdXNfY29tbV9pbmZvcm1hbCkgICopCigqKiBUcmFuc2xhdGUgeW91ciBz
b2x1dGlvbiBmb3IgW3BsdXNfY29tbV0gaW50byBhbiBpbmZvcm1hbCBwcm9vZjoKCiAgICBUaGVv
cmVtOiBBZGRpdGlvbiBpcyBjb21tdXRhdGl2ZS4KCiAgICBQcm9vZjogKCogRklMTCBJTiBIRVJF
ICopCiopCigqKiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDIgc3RhcnMsIG9wdGlvbmFsIChi
ZXFfbmF0X3JlZmxfaW5mb3JtYWwpICAqKQooKiogV3JpdGUgYW4gaW5mb3JtYWwgcHJvb2Ygb2Yg
dGhlIGZvbGxvd2luZyB0aGVvcmVtLCB1c2luZyB0aGUKICAgIGluZm9ybWFsIHByb29mIG9mIFtw
bHVzX2Fzc29jXSBhcyBhIG1vZGVsLiAgRG9uJ3QganVzdAogICAgcGFyYXBocmFzZSB0aGUgQ29x
IHRhY3RpY3MgaW50byBFbmdsaXNoIQoKICAgIFRoZW9yZW06IFt0cnVlID0gYmVxX25hdCBuIG5d
IGZvciBhbnkgW25dLgoKICAgIFByb29mOiAoKiBGSUxMIElOIEhFUkUgKikKW10gKikKCigqKiAk
RGF0ZTogMjAxNi0wNS0yNiAxNjoxNzoxOSAtMDQwMCAoVGh1LCAyNiBNYXkgMjAxNikgJCAqKQoK
(*UHIDE*)