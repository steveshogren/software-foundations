(*HIDE*)Cg==
(*UHIDE*)

(** * Induction: Proof by Induction *)

(** First, we import all of our definitions from the previous
    chapter. *)

Require Export chap1.

(** For the [Require Export] to work, you first need to use
    [coqc] to compile [Basics.v] into [Basics.vo].  This is like
    making a .class file from a .java file, or a .o file from a .c
    file.  There are two ways to do it:

     - In CoqIDE:

         Open [Basics.v].  In the "Compile" menu, click on "Compile
         Buffer".

     - From the command line:

         Run [coqc Basics.v]

    *)

(* ################################################################# *)
(** * Proof by Induction *)

(** We proved in the last chapter that [0] is a neutral element
    for [+] on the left using an easy argument based on
    simplification.  The fact that it is also a neutral element on the
    _right_... *)

Theorem plus_n_O_firsttry : forall n:nat,
  n = n + 0.

(** ... cannot be proved in the same simple way.  Just applying
  [reflexivity] doesn't work, since the [n] in [n + 0] is an arbitrary
  unknown number, so the [match] in the definition of [+] can't be
  simplified.  *)

Proof.
  intros n.
  simpl. 
Abort.

(** And reasoning by cases using [destruct n] doesn't get us much
   further: the branch of the case analysis where we assume [n = 0]
   goes through fine, but in the branch where [n = S n'] for some [n'] we
   get stuck in exactly the same way.  We could use [destruct n'] to
   get one step further, but, since [n] can be arbitrarily large, if we
   try to keep on like this we'll never be done. *)


Theorem plus_n_O_secondtry : forall n:nat,
  n = n + 0.
Proof.
  intros n. destruct n as [| n'].
  - (* n = 0 *)
    reflexivity. (* so far so good... *)
  - (* n = S n' *)
    simpl.       (* ...but here we are stuck again *)
Abort.

(** To prove interesting facts about numbers, lists, and other
    inductively defined sets, we usually need a more powerful
    reasoning principle: _induction_.

    Recall (from high school, a discrete math course, etc.) the
    principle of induction over natural numbers: If [P(n)] is some
    proposition involving a natural number [n] and we want to show
    that [P] holds for _all_ numbers [n], we can reason like this:
         - show that [P(O)] holds;
         - show that, for any [n'], if [P(n')] holds, then so does
           [P(S n')];
         - conclude that [P(n)] holds for all [n].

    In Coq, the steps are the same but the order is backwards: we
    begin with the goal of proving [P(n)] for all [n] and break it
    down (by applying the [induction] tactic) into two separate
    subgoals: first showing [P(O)] and then showing [P(n') -> P(S
    n')].  Here's how this works for the theorem at hand: *)

Theorem plus_n_O : forall n:nat, n = n + 0.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)    reflexivity.
  - (* n = S n' *) simpl. rewrite <- IHn'. reflexivity.  Qed.

(** Like [destruct], the [induction] tactic takes an [as...]
    clause that specifies the names of the variables to be introduced
    in the subgoals.  In the first branch, [n] is replaced by [0] and
    the goal becomes [0 + 0 = 0], which follows by simplification.  In
    the second, [n] is replaced by [S n'] and the assumption [n' + 0 =
    n'] is added to the context (with the name [IHn'], i.e., the
    Induction Hypothesis for [n'] -- notice that this name is
    explicitly chosen in the [as...] clause of the call to [induction]
    rather than letting Coq choose one arbitrarily). The goal in this
    case becomes [(S n') + 0 = S n'], which simplifies to [S (n' + 0)
    = S n'], which in turn follows from [IHn']. *)

(* We cannot use destruct here, because it is not forall n, just for that
specific n. After the O case, we are left with the n case, which is exactly what
we are trying to prove! *)
Theorem plus_n_Od : forall n:nat, n = n + 0.
Proof.
  intros n. destruct n.
  - (* n = 0 *)    reflexivity.
  - (* S n = S (n + 0) *) simpl. Admitted.

(* So induction differs in that it works forall n, not just n. It also creates a
hypothesis we can use for our matching. I am still very confused on the concept
of how using the thing we are proving to prove our Theorem makes any sense at
all... :/ *)

Theorem minus_diag : forall n,
  minus n n = 0.
Proof.
  (* WORKED IN CLASS *)
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)
    simpl. reflexivity.
  - (* n = S n' *)
    simpl. rewrite -> IHn'. reflexivity.  Qed.

(** (The use of the [intros] tactic in these proofs is actually
    redundant.  When applied to a goal that contains quantified
    variables, the [induction] tactic will automatically move them
    into the context as needed.) *)

(** **** Exercise: 2 stars, recommended (basic_induction)  *)
(** Prove the following using induction. You might need previously
    proven results. *)
(* Its becoming more and more apparent that proofs must be built up out of
smaller proofs. A good first step would be to consider what proofs I have
already proven. This book seems to link exercises and examples together: the
solution for a proof is highly likely to be found in the prior proofs. *)

(*HIDE*)CgpUaGVvcmVtIG11bHRfMF9yIDogZm9yYWxsIG46bmF0LAogIG4gKiAwID0gMC4KUHJvb2YuCiAg
aW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICAgc2ltcGwuIHJlZmxleGl2
aXR5LgogICAgc2ltcGwuIHJld3JpdGUgLT4gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9y
ZW0gYWRkX2VxdWl2IDogZm9yYWxsIG46bmF0LAogIFMobikgPSBTKG4pLgpQcm9vZi4KICBpbnRy
b3Mgbi4gaW5kdWN0aW9uIG4gYXMgW3wgbicgSUhuJ10uCiAgICBzaW1wbC4gcmVmbGV4aXZpdHku
CiAgICBzaW1wbC4gcmVmbGV4aXZpdHkuClFlZC4KCigqIFNldCBQcmludGluZyBBbGwuICopClRo
ZW9yZW0gcGx1c19uX1NtIDogZm9yYWxsIG4gbSA6IG5hdCwgCiAgUyAobiArIG0pID0gbiArIChT
IG0pLgpQcm9vZi4KICAoKiB3aXRob3V0IGludHJvZHVjaW5nIG4gQU5OTk5ORCBtIGhlcmUsIHRo
ZSByZXdyaXRlIGRvZXNuJ3QgbWF0Y2guIGdycnJyICopCiAgaW50cm9zIG4gbS4gaW5kdWN0aW9u
IG4gYXMgW3wgbicgSUhuJ10uCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyBzaW1w
bC4gcmV3cml0ZSA8LSBJSG4nLiByZWZsZXhpdml0eS4gfQpRZWQuIAoKVGhlb3JlbSBwbHVzX2Nv
bW0gOiBmb3JhbGwgbiBtIDogbmF0LAogIG4gKyBtID0gbSArIG4uClByb29mLgogIGludHJvcyBu
IG0uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICgqIEkgaGF2ZSB0byByZW1lbWJlciB0
byB1c2UgZXhpc3RpbmcgcHJvb2ZzISAqKQogIHNpbXBsLiByZXdyaXRlIDwtIHBsdXNfbl9PLiBy
ZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8LSBwbHVzX25fU20uIHJld3JpdGUgLT4gSUhu
Jy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9yZW0gcGx1c19hc3NvYyA6IGZvcmFsbCBuIG0gcCA6
IG5hdCwKICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgpQcm9vZi4KICBpbnRyb3MgbiBtIHAu
IGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLiAKICBzaW1wbC4gcmVmbGV4aXZpdHkuCiAgc2lt
cGwuIHJld3JpdGUgPC0gSUhuJy4gc2ltcGwuIHJlZmxleGl2aXR5LgpRZWQuCigqKiBbXSAqKQoK
CigqKiAqKioqIEV4ZXJjaXNlOiAyIHN0YXJzIChkb3VibGVfcGx1cykgICopCigqKiBDb25zaWRl
ciB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uLCB3aGljaCBkb3VibGVzIGl0cyBhcmd1bWVudDogKikK
CkZpeHBvaW50IGRvdWJsZSAobjpuYXQpIDo9CiAgbWF0Y2ggbiB3aXRoCiAgfCBPID0+IE8KICB8
IFMgbicgPT4gUyAoUyAoZG91YmxlIG4nKSkKICBlbmQuCgooKiogVXNlIGluZHVjdGlvbiB0byBw
cm92ZSB0aGlzIHNpbXBsZSBmYWN0IGFib3V0IFtkb3VibGVdOiAqKQoKTGVtbWEgZG91YmxlX3Bs
dXMgOiBmb3JhbGwgbiwgZG91YmxlIG4gPSBuICsgbiAuClByb29mLgogIGludHJvcyBuLiBpbmR1
Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8
LSBwbHVzX25fU20uIHJld3JpdGUgPC0gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KKCoqIFtdICop
CgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGV2ZW5iX1MpICAqKQooKiog
T25lIGluY29udmVuaW5lbnQgYXNwZWN0IG9mIG91ciBkZWZpbml0aW9uIG9mIFtldmVuYiBuXSBp
cyB0aGF0IGl0CiAgICBtYXkgbmVlZCB0byBwZXJmb3JtIGEgcmVjdXJzaXZlIGNhbGwgb24gW24g
LSAyXS4gVGhpcyBtYWtlcyBwcm9vZnMKICAgIGFib3V0IFtldmVuYiBuXSBoYXJkZXIgd2hlbiBk
b25lIGJ5IGluZHVjdGlvbiBvbiBbbl0sIHNpbmNlIHdlIG1heQogICAgbmVlZCBhbiBpbmR1Y3Rp
b24gaHlwb3RoZXNpcyBhYm91dCBbbiAtIDJdLiBUaGUgZm9sbG93aW5nIGxlbW1hCiAgICBnaXZl
cyBhIGJldHRlciBjaGFyYWN0ZXJpemF0aW9uIG9mIFtldmVuYiAoUyBuKV06ICopCgpUaGVvcmVt
IG5lZ2JfZG91YmxlZCA6IGZvcmFsbCBiIDogYm9vbCwgbmVnYiAobmVnYiBiKSA9IGIuClByb29m
LgogIGludHJvcyBiLiBpbmR1Y3Rpb24gYi4KICByZWZsZXhpdml0eS4KICByZWZsZXhpdml0eS4K
UWVkLgoKVGhlb3JlbSBldmVuYl9TIDogZm9yYWxsIG4gOiBuYXQsCiAgZXZlbmIgKFMgbikgPSBu
ZWdiIChldmVuYiBuKS4KUHJvb2YuCiAgaW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElI
biddLgogIHJlZmxleGl2aXR5LgogIGluZHVjdGlvbiBuJy4KICAtIHsgc2ltcGwuIHJlZmxleGl2
aXR5LiB9CiAgLSB7IHJld3JpdGUgLT4gSUhuJy4KICAgICAgcmV3cml0ZSAtPiBuZWdiX2RvdWJs
ZWQuCiAgICAgIHJlZmxleGl2aXR5LiB9ClFlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lz
ZTogMSBzdGFyIChkZXN0cnVjdF9pbmR1Y3Rpb24pICAqKQooKiogQnJpZWZseSBleHBsYWluIHRo
ZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHRhY3RpY3MgW2Rlc3RydWN0XSAKICAgIGFuZCBbaW5k
dWN0aW9uXS4KCigqIEZJTEwgSU4gSEVSRSAqKQoqKQooKiogW10gKikKCg==
(*UHIDE*)

(* ################################################################# *)
(** * Proofs Within Proofs *)

(** In Coq, as in informal mathematics, large proofs are often
    broken into a sequence of theorems, with later proofs referring to
    earlier theorems.  But sometimes a proof will require some
    miscellaneous fact that is too trivial and of too little general
    interest to bother giving it its own top-level name.  In such
    cases, it is convenient to be able to simply state and prove the
    needed "sub-theorem" right at the point where it is used.  The
    [assert] tactic allows us to do this.  For example, our earlier
    proof of the [mult_0_plus] theorem referred to a previous theorem
    named [plus_O_n].  We could instead use [assert] to state and
    prove [plus_O_n] in-line: *)

Theorem mult_0_plus' : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H: 0 + n = n). { reflexivity. }
  rewrite -> H.
  reflexivity.  Qed.

(** The [assert] tactic introduces two sub-goals.  The first is
    the assertion itself; by prefixing it with [H:] we name the
    assertion [H].  (We can also name the assertion with [as] just as
    we did above with [destruct] and [induction], i.e., [assert (0 + n
    = n) as H].)  Note that we surround the proof of this assertion
    with curly braces [{ ... }], both for readability and so that,
    when using Coq interactively, we can see more easily when we have
    finished this sub-proof.  The second goal is the same as the one
    at the point where we invoke [assert] except that, in the context,
    we now have the assumption [H] that [0 + n = n].  That is,
    [assert] generates one subgoal where we must prove the asserted
    fact and a second subgoal where we can use the asserted fact to
    make progress on whatever we were trying to prove in the first
    place. *)

(** The [assert] tactic is handy in many sorts of situations.  For
    example, suppose we want to prove that [(n + m) + (p + q) = (m +
    n) + (p + q)]. The only difference between the two sides of the
    [=] is that the arguments [m] and [n] to the first inner [+] are
    swapped, so it seems we should be able to use the commutativity of
    addition ([plus_comm]) to rewrite one into the other.  However,
    the [rewrite] tactic is a little stupid about _where_ it applies
    the rewrite.  There are three uses of [+] here, and it turns out
    that doing [rewrite -> plus_comm] will affect only the _outer_
    one... *)

Theorem plus_rearrange_firsttry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  (* We just need to swap (n + m) for (m + n)...
     it seems like plus_comm should do the trick! *)
  rewrite -> plus_comm.
  (* Doesn't work...Coq rewrote the wrong plus! *)
Abort.

(** To get [plus_comm] to apply at the point where we want it to, we
    can introduce a local lemma stating that [n + m = m + n] (for the
    particular [m] and [n] that we are talking about here), prove this
    lemma using [plus_comm], and then use it to do the desired
    rewrite. *)

Theorem plus_rearrange : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  assert (H: n + m = m + n).
  { rewrite -> plus_comm. reflexivity. }
  rewrite -> H. reflexivity.  Qed.

(* ################################################################# *)
(*HIDE*)CigqKiAqIE1vcmUgRXhlcmNpc2VzICopCgooKiogKioqKiBFeGVyY2lzZTogMyBzdGFycywgcmVj
b21tZW5kZWQgKG11bHRfY29tbSkgICopCigqKiBVc2UgW2Fzc2VydF0gdG8gaGVscCBwcm92ZSB0
aGlzIHRoZW9yZW0uICBZb3Ugc2hvdWxkbid0IG5lZWQgdG8KICAgIHVzZSBpbmR1Y3Rpb24gb24g
W3BsdXNfc3dhcF0uICopCgooKiBUaGVvcmVtIHBsdXNfYXNzb2MgOiBmb3JhbGwgbiBtIHAgOiBu
YXQsICopCigqICAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4gKikKCigqIFRoZW9yZW0gcGx1
c19jb21tIDogZm9yYWxsIG4gbSA6IG5hdCwgKikKKCogICBuICsgbSA9IG0gKyBuLiAqKQoKVGhl
b3JlbSBwbHVzX3N3YXAgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkgPSBtICsg
KG4gKyBwKS4KUHJvb2YuCiAgaW50cm9zIG4gbSBwLgogIHJld3JpdGUgLT4gcGx1c19jb21tLgog
IHJld3JpdGUgPC0gcGx1c19hc3NvYy4KICBhc3NlcnQgKEg6IHAgKyBuID0gbiArIHApLgogIHsg
cmV3cml0ZSAtPiBwbHVzX2NvbW0uIHJlZmxleGl2aXR5LiB9CiAgcmV3cml0ZSAtPiBILiAgCiAg
cmVmbGV4aXZpdHkuClFlZC4KCigqKiBOb3cgcHJvdmUgY29tbXV0YXRpdml0eSBvZiBtdWx0aXBs
aWNhdGlvbi4gIChZb3Ugd2lsbCBwcm9iYWJseQogICAgbmVlZCB0byBkZWZpbmUgYW5kIHByb3Zl
IGEgc2VwYXJhdGUgc3Vic2lkaWFyeSB0aGVvcmVtIHRvIGJlIHVzZWQKICAgIGluIHRoZSBwcm9v
ZiBvZiB0aGlzIG9uZS4gIFlvdSBtYXkgZmluZCB0aGF0IFtwbHVzX3N3YXBdIGNvbWVzIGluCiAg
ICBoYW5keS4pICopCgpUaGVvcmVtIG11bHRfMV9uIDogZm9yYWxsIG4sIG4gKiAxID0gbi4KUHJv
b2YuCiAgaW50cm9zIG4uCiAgaW5kdWN0aW9uIG4gYXMgW3wgbiddLgogIHNpbXBsLiByZWZsZXhp
dml0eS4KICBzaW1wbC4gcmV3cml0ZSAtPiBJSG4nLiByZWZsZXhpdml0eS4KUWVkLgoKVGhlb3Jl
bSBtdWx0X2NvbW1fbGVtbWEgOiBmb3JhbGwgbiBtLCBtICogUyBuID0gbSArIG0gKiBuLgpQcm9v
Zi4KICBpbnRyb3MgbSBuLgogIGluZHVjdGlvbiBtIGFzIFt8IHBdLgogIHJld3JpdGUgLT4gbXVs
dF8wX3IuCiAgcmV3cml0ZSA8LSBwbHVzX25fTy4KUWVkLgoKVGhlb3JlbSBtdWx0X2NvbW0gOiBm
b3JhbGwgbSBuIDogbmF0LAogIG0gKiBuID0gbiAqIG0uClByb29mLgogICgqIEZJTEwgSU4gSEVS
RSAqKSBBZG1pdHRlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lzZTogMyBzdGFycywgb3B0
aW9uYWwgKG1vcmVfZXhlcmNpc2VzKSAgKikKKCoqIFRha2UgYSBwaWVjZSBvZiBwYXBlci4gIEZv
ciBlYWNoIG9mIHRoZSBmb2xsb3dpbmcgdGhlb3JlbXMsIGZpcnN0CiAgICBfdGhpbmtfIGFib3V0
IHdoZXRoZXIgKGEpIGl0IGNhbiBiZSBwcm92ZWQgdXNpbmcgb25seQogICAgc2ltcGxpZmljYXRp
b24gYW5kIHJld3JpdGluZywgKGIpIGl0IGFsc28gcmVxdWlyZXMgY2FzZQogICAgYW5hbHlzaXMg
KFtkZXN0cnVjdF0pLCBvciAoYykgaXQgYWxzbyByZXF1aXJlcyBpbmR1Y3Rpb24uICBXcml0ZQog
ICAgZG93biB5b3VyIHByZWRpY3Rpb24uICBUaGVuIGZpbGwgaW4gdGhlIHByb29mLiAgKFRoZXJl
IGlzIG5vIG5lZWQKICAgIHRvIHR1cm4gaW4geW91ciBwaWVjZSBvZiBwYXBlcjsgdGhpcyBpcyBq
dXN0IHRvIGVuY291cmFnZSB5b3UgdG8KICAgIHJlZmxlY3QgYmVmb3JlIHlvdSBoYWNrISkgKikK
ClRoZW9yZW0gbGViX3JlZmwgOiBmb3JhbGwgbjpuYXQsCiAgdHJ1ZSA9IGxlYiBuIG4uClByb29m
LgogICgqIEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gemVyb19uYmVxX1MgOiBm
b3JhbGwgbjpuYXQsCiAgYmVxX25hdCAwIChTIG4pID0gZmFsc2UuClByb29mLgogICgqIEZJTEwg
SU4gSEVSRSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gYW5kYl9mYWxzZV9yIDogZm9yYWxsIGIgOiBi
b29sLAogIGFuZGIgYiBmYWxzZSA9IGZhbHNlLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikg
QWRtaXR0ZWQuCgpUaGVvcmVtIHBsdXNfYmxlX2NvbXBhdF9sIDogZm9yYWxsIG4gbSBwIDogbmF0
LAogIGxlYiBuIG0gPSB0cnVlIC0+IGxlYiAocCArIG4pIChwICsgbSkgPSB0cnVlLgpQcm9vZi4K
ICAoKiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQuCgpUaGVvcmVtIFNfbmJlcV8wIDogZm9yYWxs
IG46bmF0LAogIGJlcV9uYXQgKFMgbikgMCA9IGZhbHNlLgpQcm9vZi4KICAoKiBGSUxMIElOIEhF
UkUgKikgQWRtaXR0ZWQuCgpUaGVvcmVtIG11bHRfMV9sIDogZm9yYWxsIG46bmF0LCAxICogbiA9
IG4uClByb29mLgogICgqIEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gYWxsM19z
cGVjIDogZm9yYWxsIGIgYyA6IGJvb2wsCiAgICBvcmIKICAgICAgKGFuZGIgYiBjKQogICAgICAo
b3JiIChuZWdiIGIpCiAgICAgICAgICAgICAgIChuZWdiIGMpKQogID0gdHJ1ZS4KUHJvb2YuCiAg
KCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVkLgoKVGhlb3JlbSBtdWx0X3BsdXNfZGlzdHJfciA6
IGZvcmFsbCBuIG0gcCA6IG5hdCwKICAobiArIG0pICogcCA9IChuICogcCkgKyAobSAqIHApLgpQ
cm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQuCgpUaGVvcmVtIG11bHRfYXNzb2Mg
OiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiAqIChtICogcCkgPSAobiAqIG0pICogcC4KUHJvb2Yu
CiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVkLgooKiogW10gKikKCigqKiAqKioqIEV4ZXJj
aXNlOiAyIHN0YXJzLCBvcHRpb25hbCAoYmVxX25hdF9yZWZsKSAgKikKKCoqIFByb3ZlIHRoZSBm
b2xsb3dpbmcgdGhlb3JlbS4gIChQdXR0aW5nIHRoZSBbdHJ1ZV0gb24gdGhlIGxlZnQtaGFuZAog
ICAgc2lkZSBvZiB0aGUgZXF1YWxpdHkgbWF5IGxvb2sgb2RkLCBidXQgdGhpcyBpcyBob3cgdGhl
IHRoZW9yZW0gaXMKICAgIHN0YXRlZCBpbiB0aGUgQ29xIHN0YW5kYXJkIGxpYnJhcnksIHNvIHdl
IGZvbGxvdyBzdWl0LiAgUmV3cml0aW5nCiAgICB3b3JrcyBlcXVhbGx5IHdlbGwgaW4gZWl0aGVy
IGRpcmVjdGlvbiwgc28gd2Ugd2lsbCBoYXZlIG5vIHByb2JsZW0KICAgIHVzaW5nIHRoZSB0aGVv
cmVtIG5vIG1hdHRlciB3aGljaCB3YXkgd2Ugc3RhdGUgaXQuKSAqKQoKVGhlb3JlbSBiZXFfbmF0
X3JlZmwgOiBmb3JhbGwgbiA6IG5hdCwKICB0cnVlID0gYmVxX25hdCBuIG4uClByb29mLgogICgq
IEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lzZTog
MiBzdGFycywgb3B0aW9uYWwgKHBsdXNfc3dhcCcpICAqKQooKiogVGhlIFtyZXBsYWNlXSB0YWN0
aWMgYWxsb3dzIHlvdSB0byBzcGVjaWZ5IGEgcGFydGljdWxhciBzdWJ0ZXJtIHRvCiAgIHJld3Jp
dGUgYW5kIHdoYXQgeW91IHdhbnQgaXQgcmV3cml0dGVuIHRvOiBbcmVwbGFjZSAodCkgd2l0aCAo
dSldCiAgIHJlcGxhY2VzIChhbGwgY29waWVzIG9mKSBleHByZXNzaW9uIFt0XSBpbiB0aGUgZ29h
bCBieSBleHByZXNzaW9uCiAgIFt1XSwgYW5kIGdlbmVyYXRlcyBbdCA9IHVdIGFzIGFuIGFkZGl0
aW9uYWwgc3ViZ29hbC4gVGhpcyBpcyBvZnRlbgogICB1c2VmdWwgd2hlbiBhIHBsYWluIFtyZXdy
aXRlXSBhY3RzIG9uIHRoZSB3cm9uZyBwYXJ0IG9mIHRoZSBnb2FsLgoKICAgVXNlIHRoZSBbcmVw
bGFjZV0gdGFjdGljIHRvIGRvIGEgcHJvb2Ygb2YgW3BsdXNfc3dhcCddLCBqdXN0IGxpa2UKICAg
W3BsdXNfc3dhcF0gYnV0IHdpdGhvdXQgbmVlZGluZyBbYXNzZXJ0IChuICsgbSA9IG0gKyBuKV0u
ICopCgpUaGVvcmVtIHBsdXNfc3dhcCcgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsg
cCkgPSBtICsgKG4gKyBwKS4KUHJvb2YuCiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVkLgoo
KiogW10gKikKCigqKiAqKioqIEV4ZXJjaXNlOiAzIHN0YXJzLCByZWNvbW1lbmRlZCAoYmluYXJ5
X2NvbW11dGUpICAqKQooKiogUmVjYWxsIHRoZSBbaW5jcl0gYW5kIFtiaW5fdG9fbmF0XSBmdW5j
dGlvbnMgdGhhdCB5b3UKICAgIHdyb3RlIGZvciB0aGUgW2JpbmFyeV0gZXhlcmNpc2UgaW4gdGhl
IFtCYXNpY3NdIGNoYXB0ZXIuICBQcm92ZQogICAgdGhhdCB0aGUgZm9sbG93aW5nIGRpYWdyYW0g
Y29tbXV0ZXM6CgogICAgICAgICAgICAgICBiaW4gLS0tLS0tLS0tIGluY3IgLS0tLS0tLT4gYmlu
CiAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAg
ICBiaW5fdG9fbmF0ICAgICAgICAgICAgICAgICAgYmluX3RvX25hdAogICAgICAgICAgICAgICAg
fCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgICAgIHYgICAgICAgICAg
ICAgICAgICAgICAgICAgICB2CiAgICAgICAgICAgICAgIG5hdCAtLS0tLS0tLS0tIFMgLS0tLS0t
LS0tPiBuYXQKCiAgICBUaGF0IGlzLCBpbmNyZW1lbnRpbmcgYSBiaW5hcnkgbnVtYmVyIGFuZCB0
aGVuIGNvbnZlcnRpbmcgaXQgdG8gCiAgICBhICh1bmFyeSkgbmF0dXJhbCBudW1iZXIgeWllbGRz
IHRoZSBzYW1lIHJlc3VsdCBhcyBmaXJzdCBjb252ZXJ0aW5nCiAgICBpdCB0byBhIG5hdHVyYWwg
bnVtYmVyIGFuZCB0aGVuIGluY3JlbWVudGluZy4gIAogICAgTmFtZSB5b3VyIHRoZW9yZW0gW2Jp
bl90b19uYXRfcHJlc19pbmNyXSAoInByZXMiIGZvciAicHJlc2VydmVzIikuCgogICAgQmVmb3Jl
IHlvdSBzdGFydCB3b3JraW5nIG9uIHRoaXMgZXhlcmNpc2UsIHBsZWFzZSBjb3B5IHRoZQogICAg
ZGVmaW5pdGlvbnMgZnJvbSB5b3VyIHNvbHV0aW9uIHRvIHRoZSBbYmluYXJ5XSBleGVyY2lzZSBo
ZXJlIHNvCiAgICB0aGF0IHRoaXMgZmlsZSBjYW4gYmUgZ3JhZGVkIG9uIGl0cyBvd24uICBJZiB5
b3UgZmluZCB5b3Vyc2VsZgogICAgd2FudGluZyB0byBjaGFuZ2UgeW91ciBvcmlnaW5hbCBkZWZp
bml0aW9ucyB0byBtYWtlIHRoZSBwcm9wZXJ0eQogICAgZWFzaWVyIHRvIHByb3ZlLCBmZWVsIGZy
ZWUgdG8gZG8gc28hICopCgooKiBGSUxMIElOIEhFUkUgKikKKCoqIFtdICopCgooKiogKioqKiBF
eGVyY2lzZTogNSBzdGFycywgYWR2YW5jZWQgKGJpbmFyeV9pbnZlcnNlKSAgKikKKCoqIFRoaXMg
ZXhlcmNpc2UgaXMgYSBjb250aW51YXRpb24gb2YgdGhlIHByZXZpb3VzIGV4ZXJjaXNlIGFib3V0
CiAgICBiaW5hcnkgbnVtYmVycy4gIFlvdSB3aWxsIG5lZWQgeW91ciBkZWZpbml0aW9ucyBhbmQg
dGhlb3JlbXMgZnJvbQogICAgdGhlcmUgdG8gY29tcGxldGUgdGhpcyBvbmUuCgogICAgKGEpIEZp
cnN0LCB3cml0ZSBhIGZ1bmN0aW9uIHRvIGNvbnZlcnQgbmF0dXJhbCBudW1iZXJzIHRvIGJpbmFy
eQogICAgICAgIG51bWJlcnMuICBUaGVuIHByb3ZlIHRoYXQgc3RhcnRpbmcgd2l0aCBhbnkgbmF0
dXJhbCBudW1iZXIsCiAgICAgICAgY29udmVydGluZyB0byBiaW5hcnksIHRoZW4gY29udmVydGlu
ZyBiYWNrIHlpZWxkcyB0aGUgc2FtZQogICAgICAgIG5hdHVyYWwgbnVtYmVyIHlvdSBzdGFydGVk
IHdpdGguCgogICAgKGIpIFlvdSBtaWdodCBuYXR1cmFsbHkgdGhpbmsgdGhhdCB3ZSBzaG91bGQg
YWxzbyBwcm92ZSB0aGUKICAgICAgICBvcHBvc2l0ZSBkaXJlY3Rpb246IHRoYXQgc3RhcnRpbmcg
d2l0aCBhIGJpbmFyeSBudW1iZXIsCiAgICAgICAgY29udmVydGluZyB0byBhIG5hdHVyYWwsIGFu
ZCB0aGVuIGJhY2sgdG8gYmluYXJ5IHlpZWxkcyB0aGUKICAgICAgICBzYW1lIG51bWJlciB3ZSBz
dGFydGVkIHdpdGguICBIb3dldmVyLCB0aGlzIGlzIG5vdCB0cnVlIQogICAgICAgIEV4cGxhaW4g
d2hhdCB0aGUgcHJvYmxlbSBpcy4KCiAgICAoYykgRGVmaW5lIGEgImRpcmVjdCIgbm9ybWFsaXph
dGlvbiBmdW5jdGlvbiAtLSBpLmUuLCBhIGZ1bmN0aW9uCiAgICAgICAgW25vcm1hbGl6ZV0gZnJv
bSBiaW5hcnkgbnVtYmVycyB0byBiaW5hcnkgbnVtYmVycyBzdWNoIHRoYXQsCiAgICAgICAgZm9y
IGFueSBiaW5hcnkgbnVtYmVyIGIsIGNvbnZlcnRpbmcgdG8gYSBuYXR1cmFsIGFuZCB0aGVuIGJh
Y2sKICAgICAgICB0byBiaW5hcnkgeWllbGRzIFsobm9ybWFsaXplIGIpXS4gIFByb3ZlIGl0LiAg
KFdhcm5pbmc6IFRoaXMKICAgICAgICBwYXJ0IGlzIHRyaWNreSEpCgogICAgQWdhaW4sIGZlZWwg
ZnJlZSB0byBjaGFuZ2UgeW91ciBlYXJsaWVyIGRlZmluaXRpb25zIGlmIHRoaXMgaGVscHMKICAg
IGhlcmUuICopCgooKiBGSUxMIElOIEhFUkUgKikKKCoqIFtdICopCgooKiAjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyAqKQoo
KiogKiBGb3JtYWwgdnMuIEluZm9ybWFsIFByb29mIChPcHRpb25hbCkgKikKCigqKiAiX0luZm9y
bWFsIHByb29mcyBhcmUgYWxnb3JpdGhtczsgZm9ybWFsIHByb29mcyBhcmUgY29kZV8uIiAqKQoK
KCoqIFRoZSBxdWVzdGlvbiBvZiB3aGF0IGNvbnN0aXR1dGVzIGEgcHJvb2Ygb2YgYSBtYXRoZW1h
dGljYWwKICAgIGNsYWltIGhhcyBjaGFsbGVuZ2VkIHBoaWxvc29waGVycyBmb3IgbWlsbGVubmlh
LCBidXQgYSByb3VnaCBhbmQKICAgIHJlYWR5IGRlZmluaXRpb24gY291bGQgYmUgdGhpczogQSBw
cm9vZiBvZiBhIG1hdGhlbWF0aWNhbAogICAgcHJvcG9zaXRpb24gW1BdIGlzIGEgd3JpdHRlbiAo
b3Igc3Bva2VuKSB0ZXh0IHRoYXQgaW5zdGlsbHMgaW4gdGhlCiAgICByZWFkZXIgb3IgaGVhcmVy
IHRoZSBjZXJ0YWludHkgdGhhdCBbUF0gaXMgdHJ1ZS4gIFRoYXQgaXMsIGEgcHJvb2YKICAgIGlz
IGFuIGFjdCBvZiBjb21tdW5pY2F0aW9uLgoKICAgIEFjdHMgb2YgY29tbXVuaWNhdGlvbiBtYXkg
aW52b2x2ZSBkaWZmZXJlbnQgc29ydHMgb2YgcmVhZGVycy4gIE9uCiAgICBvbmUgaGFuZCwgdGhl
ICJyZWFkZXIiIGNhbiBiZSBhIHByb2dyYW0gbGlrZSBDb3EsIGluIHdoaWNoIGNhc2UKICAgIHRo
ZSAiYmVsaWVmIiB0aGF0IGlzIGluc3RpbGxlZCBpcyB0aGF0IFtQXSBjYW4gYmUgbWVjaGFuaWNh
bGx5CiAgICBkZXJpdmVkIGZyb20gYSBjZXJ0YWluIHNldCBvZiBmb3JtYWwgbG9naWNhbCBydWxl
cywgYW5kIHRoZSBwcm9vZgogICAgaXMgYSByZWNpcGUgdGhhdCBndWlkZXMgdGhlIHByb2dyYW0g
aW4gY2hlY2tpbmcgdGhpcyBmYWN0LiAgU3VjaAogICAgcmVjaXBlcyBhcmUgX2Zvcm1hbF8gcHJv
b2ZzLgoKICAgIEFsdGVybmF0aXZlbHksIHRoZSByZWFkZXIgY2FuIGJlIGEgaHVtYW4gYmVpbmcs
IGluIHdoaWNoIGNhc2UgdGhlCiAgICBwcm9vZiB3aWxsIGJlIHdyaXR0ZW4gaW4gRW5nbGlzaCBv
ciBzb21lIG90aGVyIG5hdHVyYWwgbGFuZ3VhZ2UsCiAgICBhbmQgd2lsbCB0aHVzIG5lY2Vzc2Fy
aWx5IGJlIF9pbmZvcm1hbF8uICBIZXJlLCB0aGUgY3JpdGVyaWEgZm9yCiAgICBzdWNjZXNzIGFy
ZSBsZXNzIGNsZWFybHkgc3BlY2lmaWVkLiAgQSAidmFsaWQiIHByb29mIGlzIG9uZSB0aGF0CiAg
ICBtYWtlcyB0aGUgcmVhZGVyIGJlbGlldmUgW1BdLiAgQnV0IHRoZSBzYW1lIHByb29mIG1heSBi
ZSByZWFkIGJ5CiAgICBtYW55IGRpZmZlcmVudCByZWFkZXJzLCBzb21lIG9mIHdob20gbWF5IGJl
IGNvbnZpbmNlZCBieSBhCiAgICBwYXJ0aWN1bGFyIHdheSBvZiBwaHJhc2luZyB0aGUgYXJndW1l
bnQsIHdoaWxlIG90aGVycyBtYXkgbm90IGJlLgogICAgU29tZSByZWFkZXJzIG1heSBiZSBwYXJ0
aWN1bGFybHkgcGVkYW50aWMsIGluZXhwZXJpZW5jZWQsIG9yIGp1c3QKICAgIHBsYWluIHRoaWNr
LWhlYWRlZDsgdGhlIG9ubHkgd2F5IHRvIGNvbnZpbmNlIHRoZW0gd2lsbCBiZSB0byBtYWtlCiAg
ICB0aGUgYXJndW1lbnQgaW4gcGFpbnN0YWtpbmcgZGV0YWlsLiAgQnV0IG90aGVyIHJlYWRlcnMs
IG1vcmUKICAgIGZhbWlsaWFyIGluIHRoZSBhcmVhLCBtYXkgZmluZCBhbGwgdGhpcyBkZXRhaWwg
c28gb3ZlcndoZWxtaW5nCiAgICB0aGF0IHRoZXkgbG9zZSB0aGUgb3ZlcmFsbCB0aHJlYWQ7IGFs
bCB0aGV5IHdhbnQgaXMgdG8gYmUgdG9sZCB0aGUKICAgIG1haW4gaWRlYXMsIHNpbmNlIGl0IGlz
IGVhc2llciBmb3IgdGhlbSB0byBmaWxsIGluIHRoZSBkZXRhaWxzIGZvcgogICAgdGhlbXNlbHZl
cyB0aGFuIHRvIHdhZGUgdGhyb3VnaCBhIHdyaXR0ZW4gcHJlc2VudGF0aW9uIG9mIHRoZW0uCiAg
ICBVbHRpbWF0ZWx5LCB0aGVyZSBpcyBubyB1bml2ZXJzYWwgc3RhbmRhcmQsIGJlY2F1c2UgdGhl
cmUgaXMgbm8KICAgIHNpbmdsZSB3YXkgb2Ygd3JpdGluZyBhbiBpbmZvcm1hbCBwcm9vZiB0aGF0
IGlzIGd1YXJhbnRlZWQgdG8KICAgIGNvbnZpbmNlIGV2ZXJ5IGNvbmNlaXZhYmxlIHJlYWRlci4K
CiAgICBJbiBwcmFjdGljZSwgaG93ZXZlciwgbWF0aGVtYXRpY2lhbnMgaGF2ZSBkZXZlbG9wZWQg
YSByaWNoIHNldCBvZgogICAgY29udmVudGlvbnMgYW5kIGlkaW9tcyBmb3Igd3JpdGluZyBhYm91
dCBjb21wbGV4IG1hdGhlbWF0aWNhbAogICAgb2JqZWN0cyB0aGF0IC0tIGF0IGxlYXN0IHdpdGhp
biBhIGNlcnRhaW4gY29tbXVuaXR5IC0tIG1ha2UKICAgIGNvbW11bmljYXRpb24gZmFpcmx5IHJl
bGlhYmxlLiAgVGhlIGNvbnZlbnRpb25zIG9mIHRoaXMgc3R5bGl6ZWQKICAgIGZvcm0gb2YgY29t
bXVuaWNhdGlvbiBnaXZlIGEgZmFpcmx5IGNsZWFyIHN0YW5kYXJkIGZvciBqdWRnaW5nCiAgICBw
cm9vZnMgZ29vZCBvciBiYWQuCgogICAgQmVjYXVzZSB3ZSBhcmUgdXNpbmcgQ29xIGluIHRoaXMg
Y291cnNlLCB3ZSB3aWxsIGJlIHdvcmtpbmcKICAgIGhlYXZpbHkgd2l0aCBmb3JtYWwgcHJvb2Zz
LiAgQnV0IHRoaXMgZG9lc24ndCBtZWFuIHdlIGNhbgogICAgY29tcGxldGVseSBmb3JnZXQgYWJv
dXQgaW5mb3JtYWwgb25lcyEgIEZvcm1hbCBwcm9vZnMgYXJlIHVzZWZ1bAogICAgaW4gbWFueSB3
YXlzLCBidXQgdGhleSBhcmUgX25vdF8gdmVyeSBlZmZpY2llbnQgd2F5cyBvZgogICAgY29tbXVu
aWNhdGluZyBpZGVhcyBiZXR3ZWVuIGh1bWFuIGJlaW5ncy4gKikKCigqKiBGb3IgZXhhbXBsZSwg
aGVyZSBpcyBhIHByb29mIHRoYXQgYWRkaXRpb24gaXMgYXNzb2NpYXRpdmU6ICopCgpUaGVvcmVt
IHBsdXNfYXNzb2MnIDogZm9yYWxsIG4gbSBwIDogbmF0LAogIG4gKyAobSArIHApID0gKG4gKyBt
KSArIHAuClByb29mLiBpbnRyb3MgbiBtIHAuIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLiBy
ZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSAtPiBJSG4nLiByZWZsZXhpdml0eS4gIFFlZC4K
CigqKiBDb3EgaXMgcGVyZmVjdGx5IGhhcHB5IHdpdGggdGhpcy4gIEZvciBhIGh1bWFuLCBob3dl
dmVyLCBpdAogICAgaXMgZGlmZmljdWx0IHRvIG1ha2UgbXVjaCBzZW5zZSBvZiBpdC4gIFdlIGNh
biB1c2UgY29tbWVudHMgYW5kCiAgICBidWxsZXRzIHRvIHNob3cgdGhlIHN0cnVjdHVyZSBhIGxp
dHRsZSBtb3JlIGNsZWFybHkuLi4gKikKClRoZW9yZW0gcGx1c19hc3NvYycnIDogZm9yYWxsIG4g
bSBwIDogbmF0LAogIG4gKyAobSArIHApID0gKG4gKyBtKSArIHAuClByb29mLgogIGludHJvcyBu
IG0gcC4gaW5kdWN0aW9uIG4gYXMgW3wgbicgSUhuJ10uCiAgLSAoKiBuID0gMCAqKQogICAgcmVm
bGV4aXZpdHkuCiAgLSAoKiBuID0gUyBuJyAqKQogICAgc2ltcGwuIHJld3JpdGUgLT4gSUhuJy4g
cmVmbGV4aXZpdHkuICAgUWVkLgoKKCoqIC4uLiBhbmQgaWYgeW91J3JlIHVzZWQgdG8gQ29xIHlv
dSBtYXkgYmUgYWJsZSB0byBzdGVwCiAgICB0aHJvdWdoIHRoZSB0YWN0aWNzIG9uZSBhZnRlciB0
aGUgb3RoZXIgaW4geW91ciBtaW5kIGFuZCBpbWFnaW5lCiAgICB0aGUgc3RhdGUgb2YgdGhlIGNv
bnRleHQgYW5kIGdvYWwgc3RhY2sgYXQgZWFjaCBwb2ludCwgYnV0IGlmIHRoZQogICAgcHJvb2Yg
d2VyZSBldmVuIGEgbGl0dGxlIGJpdCBtb3JlIGNvbXBsaWNhdGVkIHRoaXMgd291bGQgYmUgbmV4
dAogICAgdG8gaW1wb3NzaWJsZS4KCiAgICBBIChwZWRhbnRpYykgbWF0aGVtYXRpY2lhbiBtaWdo
dCB3cml0ZSB0aGUgcHJvb2Ygc29tZXRoaW5nIGxpa2UKICAgIHRoaXM6ICopCgooKiogLSBfVGhl
b3JlbV86IEZvciBhbnkgW25dLCBbbV0gYW5kIFtwXSwKCiAgICAgIG4gKyAobSArIHApID0gKG4g
KyBtKSArIHAuCgogICAgX1Byb29mXzogQnkgaW5kdWN0aW9uIG9uIFtuXS4KCiAgICAtIEZpcnN0
LCBzdXBwb3NlIFtuID0gMF0uICBXZSBtdXN0IHNob3cKCiAgICAgICAgMCArIChtICsgcCkgPSAo
MCArIG0pICsgcC4KCiAgICAgIFRoaXMgZm9sbG93cyBkaXJlY3RseSBmcm9tIHRoZSBkZWZpbml0
aW9uIG9mIFsrXS4KCiAgICAtIE5leHQsIHN1cHBvc2UgW24gPSBTIG4nXSwgd2hlcmUKCiAgICAg
ICAgbicgKyAobSArIHApID0gKG4nICsgbSkgKyBwLgoKICAgICAgV2UgbXVzdCBzaG93CgogICAg
ICAgIChTIG4nKSArIChtICsgcCkgPSAoKFMgbicpICsgbSkgKyBwLgoKICAgICAgQnkgdGhlIGRl
ZmluaXRpb24gb2YgWytdLCB0aGlzIGZvbGxvd3MgZnJvbQoKICAgICAgICBTIChuJyArIChtICsg
cCkpID0gUyAoKG4nICsgbSkgKyBwKSwKCiAgICAgIHdoaWNoIGlzIGltbWVkaWF0ZSBmcm9tIHRo
ZSBpbmR1Y3Rpb24gaHlwb3RoZXNpcy4gIF9RZWRfLiAqKQoKCigqKiBUaGUgb3ZlcmFsbCBmb3Jt
IG9mIHRoZSBwcm9vZiBpcyBiYXNpY2FsbHkgc2ltaWxhciwgYW5kIG9mCiAgICBjb3Vyc2UgdGhp
cyBpcyBubyBhY2NpZGVudDogQ29xIGhhcyBiZWVuIGRlc2lnbmVkIHNvIHRoYXQgaXRzCiAgICBb
aW5kdWN0aW9uXSB0YWN0aWMgZ2VuZXJhdGVzIHRoZSBzYW1lIHN1Yi1nb2FscywgaW4gdGhlIHNh
bWUKICAgIG9yZGVyLCBhcyB0aGUgYnVsbGV0IHBvaW50cyB0aGF0IGEgbWF0aGVtYXRpY2lhbiB3
b3VsZCB3cml0ZS4gIEJ1dAogICAgdGhlcmUgYXJlIHNpZ25pZmljYW50IGRpZmZlcmVuY2VzIG9m
IGRldGFpbDogdGhlIGZvcm1hbCBwcm9vZiBpcwogICAgbXVjaCBtb3JlIGV4cGxpY2l0IGluIHNv
bWUgd2F5cyAoZS5nLiwgdGhlIHVzZSBvZiBbcmVmbGV4aXZpdHldKQogICAgYnV0IG11Y2ggbGVz
cyBleHBsaWNpdCBpbiBvdGhlcnMgKGluIHBhcnRpY3VsYXIsIHRoZSAicHJvb2Ygc3RhdGUiCiAg
ICBhdCBhbnkgZ2l2ZW4gcG9pbnQgaW4gdGhlIENvcSBwcm9vZiBpcyBjb21wbGV0ZWx5IGltcGxp
Y2l0LAogICAgd2hlcmVhcyB0aGUgaW5mb3JtYWwgcHJvb2YgcmVtaW5kcyB0aGUgcmVhZGVyIHNl
dmVyYWwgdGltZXMgd2hlcmUKICAgIHRoaW5ncyBzdGFuZCkuICopCgooKiogKioqKiBFeGVyY2lz
ZTogMiBzdGFycywgYWR2YW5jZWQsIHJlY29tbWVuZGVkIChwbHVzX2NvbW1faW5mb3JtYWwpICAq
KQooKiogVHJhbnNsYXRlIHlvdXIgc29sdXRpb24gZm9yIFtwbHVzX2NvbW1dIGludG8gYW4gaW5m
b3JtYWwgcHJvb2Y6CgogICAgVGhlb3JlbTogQWRkaXRpb24gaXMgY29tbXV0YXRpdmUuCgogICAg
UHJvb2Y6ICgqIEZJTEwgSU4gSEVSRSAqKQoqKQooKiogW10gKikKCigqKiAqKioqIEV4ZXJjaXNl
OiAyIHN0YXJzLCBvcHRpb25hbCAoYmVxX25hdF9yZWZsX2luZm9ybWFsKSAgKikKKCoqIFdyaXRl
IGFuIGluZm9ybWFsIHByb29mIG9mIHRoZSBmb2xsb3dpbmcgdGhlb3JlbSwgdXNpbmcgdGhlCiAg
ICBpbmZvcm1hbCBwcm9vZiBvZiBbcGx1c19hc3NvY10gYXMgYSBtb2RlbC4gIERvbid0IGp1c3QK
ICAgIHBhcmFwaHJhc2UgdGhlIENvcSB0YWN0aWNzIGludG8gRW5nbGlzaCEKCiAgICBUaGVvcmVt
OiBbdHJ1ZSA9IGJlcV9uYXQgbiBuXSBmb3IgYW55IFtuXS4KCiAgICBQcm9vZjogKCogRklMTCBJ
TiBIRVJFICopCltdICopCgooKiogJERhdGU6IDIwMTYtMDUtMjYgMTY6MTc6MTkgLTA0MDAgKFRo
dSwgMjYgTWF5IDIwMTYpICQgKikKCg==
(*UHIDE*)