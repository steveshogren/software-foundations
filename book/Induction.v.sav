(*HIDE*)Cg==
(*UHIDE*)



(** * Induction: Proof by Induction *)

(** First, we import all of our definitions from the previous
    chapter. *)

Require Export chap1.




(** For the [Require Export] to work, you first need to use
    [coqc] to compile [Basics.v] into [Basics.vo].  This is like
    making a .class file from a .java file, or a .o file from a .c
    file.  There are two ways to do it:

     - In CoqIDE:

         Open [Basics.v].  In the "Compile" menu, click on "Compile
         Buffer".

     - From the command line:

         Run [coqc Basics.v]

    *)

(* ################################################################# *)
(** * Proof by Induction *)

(** We proved in the last chapter that [0] is a neutral element
    for [+] on the left using an easy argument based on
    simplification.  The fact that it is also a neutral element on the
    _right_... *)

Theorem plus_n_O_firsttry : forall n:nat,
  n = n + 0.


(** ... cannot be proved in the same simple way.  Just applying
  [reflexivity] doesn't work, since the [n] in [n + 0] is an arbitrary
  unknown number, so the [match] in the definition of [+] can't be
  simplified.  *)

Proof.
  intros n.
  simpl. 
Abort.

(** And reasoning by cases using [destruct n] doesn't get us much
   further: the branch of the case analysis where we assume [n = 0]
   goes through fine, but in the branch where [n = S n'] for some [n'] we
   get stuck in exactly the same way.  We could use [destruct n'] to
   get one step further, but, since [n] can be arbitrarily large, if we
   try to keep on like this we'll never be done. *)


Theorem plus_n_O_secondtry : forall n:nat,
  n = n + 0.
Proof.
  intros n. destruct n as [| n'].
  - (* n = 0 *)
    reflexivity. (* so far so good... *)
  - (* n = S n' *)
    simpl.       (* ...but here we are stuck again *)
Abort.

(** To prove interesting facts about numbers, lists, and other
    inductively defined sets, we usually need a more powerful
    reasoning principle: _induction_.

    Recall (from high school, a discrete math course, etc.) the
    principle of induction over natural numbers: If [P(n)] is some
    proposition involving a natural number [n] and we want to show
    that [P] holds for _all_ numbers [n], we can reason like this:
         - show that [P(O)] holds;
         - show that, for any [n'], if [P(n')] holds, then so does
           [P(S n')];
         - conclude that [P(n)] holds for all [n].

    In Coq, the steps are the same but the order is backwards: we
    begin with the goal of proving [P(n)] for all [n] and break it
    down (by applying the [induction] tactic) into two separate
    subgoals: first showing [P(O)] and then showing [P(n') -> P(S
    n')].  Here's how this works for the theorem at hand: *)

Theorem plus_n_O : forall n:nat, n = n + 0.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)    reflexivity.
  - (* n = S n' *) simpl. rewrite <- IHn'. reflexivity.  Qed.

(** Like [destruct], the [induction] tactic takes an [as...]
    clause that specifies the names of the variables to be introduced
    in the subgoals.  In the first branch, [n] is replaced by [0] and
    the goal becomes [0 + 0 = 0], which follows by simplification.  In
    the second, [n] is replaced by [S n'] and the assumption [n' + 0 =
    n'] is added to the context (with the name [IHn'], i.e., the
    Induction Hypothesis for [n'] -- notice that this name is
    explicitly chosen in the [as...] clause of the call to [induction]
    rather than letting Coq choose one arbitrarily). The goal in this
    case becomes [(S n') + 0 = S n'], which simplifies to [S (n' + 0)
    = S n'], which in turn follows from [IHn']. *)

(* We cannot use destruct here, because it is not forall n, just for that
specific n. After the O case, we are left with the n case, which is exactly what
we are trying to prove! *)
Theorem plus_n_Od : forall n:nat, n = n + 0.
Proof.
  intros n. destruct n.
  - (* n = 0 *)    reflexivity.
  - (* S n = S (n + 0) *) simpl. Admitted.

(* So induction differs in that it works forall n, not just n. It also creates a
hypothesis we can use for our matching. I am still very confused on the concept
of how using the thing we are proving to prove our Theorem makes any sense at
all... :/ *)

Theorem minus_diag : forall n,
  minus n n = 0.
Proof.
  (* WORKED IN CLASS *)
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)
    simpl. reflexivity.
  - (* n = S n' *)
    simpl. rewrite -> IHn'. reflexivity.  Qed.

(** (The use of the [intros] tactic in these proofs is actually
    redundant.  When applied to a goal that contains quantified
    variables, the [induction] tactic will automatically move them
    into the context as needed.) *)

(** **** Exercise: 2 stars, recommended (basic_induction)  *)
(** Prove the following using induction. You might need previously
    proven results. *)
(* Its becoming more and more apparent that proofs must be built up out of
smaller proofs. A good first step would be to consider what proofs I have
already proven. This book seems to link exercises and examples together: the
solution for a proof is highly likely to be found in the prior proofs. *)

(* Failed attempt to prove the lemma from Byzantine generals*)
Theorem twok_plus_m_IC2 : forall k m n : nat,
    (2 * k) + m  > n.
Proof.
  intros k m n.
  induction m as [| m' IHm'].
  simpl.
Quit.


(*HIDE*)CgpUaGVvcmVtIG11bHRfMF9yIDogZm9yYWxsIG46bmF0LAogIG4gKiAwID0gMC4KUHJvb2YuCiAg
aW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICAgc2ltcGwuIHJlZmxleGl2
aXR5LgogICAgc2ltcGwuIHJld3JpdGUgLT4gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9y
ZW0gYWRkX2VxdWl2IDogZm9yYWxsIG46bmF0LAogIFMobikgPSBTKG4pLgpQcm9vZi4KICBpbnRy
b3Mgbi4gaW5kdWN0aW9uIG4gYXMgW3wgbicgSUhuJ10uCiAgICBzaW1wbC4gcmVmbGV4aXZpdHku
CiAgICBzaW1wbC4gcmVmbGV4aXZpdHkuClFlZC4KCigqIFNldCBQcmludGluZyBBbGwuICopClRo
ZW9yZW0gcGx1c19uX1NtIDogZm9yYWxsIG4gbSA6IG5hdCwgCiAgUyAobiArIG0pID0gbiArIChT
IG0pLgpQcm9vZi4KICAoKiB3aXRob3V0IGludHJvZHVjaW5nIG4gQU5OTk5ORCBtIGhlcmUsIHRo
ZSByZXdyaXRlIGRvZXNuJ3QgbWF0Y2guIGdycnJyICopCiAgaW50cm9zIG4gbS4gaW5kdWN0aW9u
IG4gYXMgW3wgbicgSUhuJ10uCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyBzaW1w
bC4gcmV3cml0ZSA8LSBJSG4nLiByZWZsZXhpdml0eS4gfQpRZWQuIAoKVGhlb3JlbSBwbHVzX2Nv
bW0gOiBmb3JhbGwgbiBtIDogbmF0LAogIG4gKyBtID0gbSArIG4uClByb29mLgogIGludHJvcyBu
IG0uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddOyBzaW1wbC4KICAoKiBJIGhhdmUgdG8gcmVt
ZW1iZXIgdG8gdXNlIGV4aXN0aW5nIHByb29mcyEgKikKICByZXdyaXRlIDwtIHBsdXNfbl9PLiBy
ZWZsZXhpdml0eS4KICByZXdyaXRlIDwtIHBsdXNfbl9TbS4gcmV3cml0ZSAtPiBJSG4nLiByZWZs
ZXhpdml0eS4KUWVkLgoKVGhlb3JlbSBwbHVzX2Fzc29jIDogZm9yYWxsIG4gbSBwIDogbmF0LAog
IG4gKyAobSArIHApID0gKG4gKyBtKSArIHAuClByb29mLgogIGludHJvcyBuIG0gcC4gaW5kdWN0
aW9uIG4gYXMgW3wgbicgSUhuJ107IHNpbXBsLgogIHJlZmxleGl2aXR5LgogIHJld3JpdGUgPC0g
SUhuJy4gc2ltcGwuIHJlZmxleGl2aXR5LgpRZWQuCigqKiBbXSAqKQoKCigqKiAqKioqIEV4ZXJj
aXNlOiAyIHN0YXJzIChkb3VibGVfcGx1cykgICopCigqKiBDb25zaWRlciB0aGUgZm9sbG93aW5n
IGZ1bmN0aW9uLCB3aGljaCBkb3VibGVzIGl0cyBhcmd1bWVudDogKikKCkZpeHBvaW50IGRvdWJs
ZSAobjpuYXQpIDo9CiAgbWF0Y2ggbiB3aXRoCiAgfCBPID0+IE8KICB8IFMgbicgPT4gUyAoUyAo
ZG91YmxlIG4nKSkKICBlbmQuCgooKiogVXNlIGluZHVjdGlvbiB0byBwcm92ZSB0aGlzIHNpbXBs
ZSBmYWN0IGFib3V0IFtkb3VibGVdOiAqKQoKTGVtbWEgZG91YmxlX3BsdXMgOiBmb3JhbGwgbiwg
ZG91YmxlIG4gPSBuICsgbiAuClByb29mLgogIGludHJvcyBuLiBpbmR1Y3Rpb24gbiBhcyBbfCBu
JyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8LSBwbHVzX25fU20uIHJl
d3JpdGUgPC0gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVy
Y2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGV2ZW5iX1MpICAqKQooKiogT25lIGluY29udmVuaW5l
bnQgYXNwZWN0IG9mIG91ciBkZWZpbml0aW9uIG9mIFtldmVuYiBuXSBpcyB0aGF0IGl0CiAgICBt
YXkgbmVlZCB0byBwZXJmb3JtIGEgcmVjdXJzaXZlIGNhbGwgb24gW24gLSAyXS4gVGhpcyBtYWtl
cyBwcm9vZnMKICAgIGFib3V0IFtldmVuYiBuXSBoYXJkZXIgd2hlbiBkb25lIGJ5IGluZHVjdGlv
biBvbiBbbl0sIHNpbmNlIHdlIG1heQogICAgbmVlZCBhbiBpbmR1Y3Rpb24gaHlwb3RoZXNpcyBh
Ym91dCBbbiAtIDJdLiBUaGUgZm9sbG93aW5nIGxlbW1hCiAgICBnaXZlcyBhIGJldHRlciBjaGFy
YWN0ZXJpemF0aW9uIG9mIFtldmVuYiAoUyBuKV06ICopCgpUaGVvcmVtIG5lZ2JfZG91YmxlZCA6
IGZvcmFsbCBiIDogYm9vbCwgbmVnYiAobmVnYiBiKSA9IGIuClByb29mLgogIGludHJvcyBiLiBp
bmR1Y3Rpb24gYjsgcmVmbGV4aXZpdHkuClFlZC4KClRoZW9yZW0gZXZlbmJfUyA6IGZvcmFsbCBu
IDogbmF0LAogIGV2ZW5iIChTIG4pID0gbmVnYiAoZXZlbmIgbikuClByb29mLgogIGludHJvcyBu
LiBpbmR1Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBpbmR1Y3Rpb24g
bicuCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyByZXdyaXRlIC0+IElIbicuCiAg
ICAgIHJld3JpdGUgLT4gbmVnYl9kb3VibGVkLgogICAgICByZWZsZXhpdml0eS4gfQpRZWQuCigq
KiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDEgc3RhciAoZGVzdHJ1Y3RfaW5kdWN0aW9uKSAg
KikKKCoqIEJyaWVmbHkgZXhwbGFpbiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0YWN0aWNz
IFtkZXN0cnVjdF0gCiAgICBhbmQgW2luZHVjdGlvbl0uCgooKiBGSUxMIElOIEhFUkUgKikKKikK
KCoqIFtdICopCgo=
(*UHIDE*)

(* ################################################################# *)
(** * Proofs Within Proofs *)

(** In Coq, as in informal mathematics, large proofs are often
    broken into a sequence of theorems, with later proofs referring to
    earlier theorems.  But sometimes a proof will require some
    miscellaneous fact that is too trivial and of too little general
    interest to bother giving it its own top-level name.  In such
    cases, it is convenient to be able to simply state and prove the
    needed "sub-theorem" right at the point where it is used.  The
    [assert] tactic allows us to do this.  For example, our earlier
    proof of the [mult_0_plus] theorem referred to a previous theorem
    named [plus_O_n].  We could instead use [assert] to state and
    prove [plus_O_n] in-line: *)

Theorem mult_0_plus' : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H: 0 + n = n). { reflexivity. }
  rewrite -> H.
  reflexivity.  Qed.

(** The [assert] tactic introduces two sub-goals.  The first is
    the assertion itself; by prefixing it with [H:] we name the
    assertion [H].  (We can also name the assertion with [as] just as
    we did above with [destruct] and [induction], i.e., [assert (0 + n
    = n) as H].)  Note that we surround the proof of this assertion
    with curly braces [{ ... }], both for readability and so that,
    when using Coq interactively, we can see more easily when we have
    finished this sub-proof.  The second goal is the same as the one
    at the point where we invoke [assert] except that, in the context,
    we now have the assumption [H] that [0 + n = n].  That is,
    [assert] generates one subgoal where we must prove the asserted
    fact and a second subgoal where we can use the asserted fact to
    make progress on whatever we were trying to prove in the first
    place. *)

(** The [assert] tactic is handy in many sorts of situations.  For
    example, suppose we want to prove that [(n + m) + (p + q) = (m +
    n) + (p + q)]. The only difference between the two sides of the
    [=] is that the arguments [m] and [n] to the first inner [+] are
    swapped, so it seems we should be able to use the commutativity of
    addition ([plus_comm]) to rewrite one into the other.  However,
    the [rewrite] tactic is a little stupid about _where_ it applies
    the rewrite.  There are three uses of [+] here, and it turns out
    that doing [rewrite -> plus_comm] will affect only the _outer_
    one... *)

Theorem plus_rearrange_firsttry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  (* We just need to swap (n + m) for (m + n)...
     it seems like plus_comm should do the trick! *)
  rewrite -> plus_comm.
  (* Doesn't work...Coq rewrote the wrong plus! *)
Abort.

(** To get [plus_comm] to apply at the point where we want it to, we
    can introduce a local lemma stating that [n + m = m + n] (for the
    particular [m] and [n] that we are talking about here), prove this
    lemma using [plus_comm], and then use it to do the desired
    rewrite. *)

Theorem plus_rearrange : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  assert (H: n + m = m + n).
  { rewrite -> plus_comm. reflexivity. }
  rewrite -> H. reflexivity.  Qed.

(* ################################################################# *)
(*HIDE*)CigqKiAqIE1vcmUgRXhlcmNpc2VzICopCgooKiogKioqKiBFeGVyY2lzZTogMyBzdGFycywgcmVj
b21tZW5kZWQgKG11bHRfY29tbSkgICopCigqKiBVc2UgW2Fzc2VydF0gdG8gaGVscCBwcm92ZSB0
aGlzIHRoZW9yZW0uICBZb3Ugc2hvdWxkbid0IG5lZWQgdG8KICAgIHVzZSBpbmR1Y3Rpb24gb24g
W3BsdXNfc3dhcF0uICopCgooKiBUaGVvcmVtIHBsdXNfYXNzb2MgOiBmb3JhbGwgbiBtIHAgOiBu
YXQsICopCigqICAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4gKikKCigqIFRoZW9yZW0gcGx1
c19jb21tIDogZm9yYWxsIG4gbSA6IG5hdCwgKikKKCogICBuICsgbSA9IG0gKyBuLiAqKQoKVGhl
b3JlbSBwbHVzX3N3YXAgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkgPSBtICsg
KG4gKyBwKS4KUHJvb2YuCiAgaW50cm9zIG4gbSBwLgogIHJld3JpdGUgLT4gcGx1c19jb21tLgog
IHJld3JpdGUgPC0gcGx1c19hc3NvYy4KICBhc3NlcnQgKEg6IHAgKyBuID0gbiArIHApLgogIHsg
cmV3cml0ZSAtPiBwbHVzX2NvbW0uIHJlZmxleGl2aXR5LiB9CiAgcmV3cml0ZSAtPiBILiAgCiAg
cmVmbGV4aXZpdHkuClFlZC4KCigqKiBOb3cgcHJvdmUgY29tbXV0YXRpdml0eSBvZiBtdWx0aXBs
aWNhdGlvbi4gIChZb3Ugd2lsbCBwcm9iYWJseQogICAgbmVlZCB0byBkZWZpbmUgYW5kIHByb3Zl
IGEgc2VwYXJhdGUgc3Vic2lkaWFyeSB0aGVvcmVtIHRvIGJlIHVzZWQKICAgIGluIHRoZSBwcm9v
ZiBvZiB0aGlzIG9uZS4gIFlvdSBtYXkgZmluZCB0aGF0IFtwbHVzX3N3YXBdIGNvbWVzIGluCiAg
ICBoYW5keS4pICopCgpUaGVvcmVtIG11bHRfMV9uIDogZm9yYWxsIG4sIG4gKiAxID0gbi4KUHJv
b2YuCiAgaW50cm9zIG4uCiAgaW5kdWN0aW9uIG4gYXMgW3wgbiddOyBzaW1wbC4KICByZWZsZXhp
dml0eS4KICByZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5LgpRZWQuCgpUaGVvcmVtIG11bHRf
Y29tbV9sZW1tYSA6IGZvcmFsbCBuIG0sCiAgICBtICogUyBuID0gbSArIG0gKiBuLgpQcm9vZi4K
ICBpbnRyb3MgbiBtLgogIGluZHVjdGlvbiBtIGFzIFt8IHBdIDsgc2ltcGwuCiAgeyByZWZsZXhp
dml0eS4gfQogIHsgcmV3cml0ZSAtPiBwbHVzX3N3YXAuIHJld3JpdGUgLT4gSUhwLiByZWZsZXhp
dml0eS4gfQpRZWQuCgpUaGVvcmVtIG11bHRfY29tbSA6IGZvcmFsbCBtIG4gOiBuYXQsCiAgbSAq
IG4gPSBuICogbS4KUHJvb2YuCiAgaW50cm9zIG0gbi4KICBpbmR1Y3Rpb24gbiBhcyBbfCBuJyBd
OyBzaW1wbC4KICByZXdyaXRlIC0+IG11bHRfMF9yLiByZWZsZXhpdml0eS4KICByZXdyaXRlIC0+
IG11bHRfY29tbV9sZW1tYS4gcmV3cml0ZSAtPiBJSG4nLiByZWZsZXhpdml0eS4KUWVkLgooKiog
W10gKikKCigqKiAqKioqIEV4ZXJjaXNlOiAzIHN0YXJzLCBvcHRpb25hbCAobW9yZV9leGVyY2lz
ZXMpICAqKQooKiogVGFrZSBhIHBpZWNlIG9mIHBhcGVyLiAgRm9yIGVhY2ggb2YgdGhlIGZvbGxv
d2luZyB0aGVvcmVtcywgZmlyc3QKICAgIF90aGlua18gYWJvdXQgd2hldGhlciAoYSkgaXQgY2Fu
IGJlIHByb3ZlZCB1c2luZyBvbmx5CiAgICBzaW1wbGlmaWNhdGlvbiBhbmQgcmV3cml0aW5nLCAo
YikgaXQgYWxzbyByZXF1aXJlcyBjYXNlCiAgICBhbmFseXNpcyAoW2Rlc3RydWN0XSksIG9yIChj
KSBpdCBhbHNvIHJlcXVpcmVzIGluZHVjdGlvbi4gIFdyaXRlCiAgICBkb3duIHlvdXIgcHJlZGlj
dGlvbi4gIFRoZW4gZmlsbCBpbiB0aGUgcHJvb2YuICAoVGhlcmUgaXMgbm8gbmVlZAogICAgdG8g
dHVybiBpbiB5b3VyIHBpZWNlIG9mIHBhcGVyOyB0aGlzIGlzIGp1c3QgdG8gZW5jb3VyYWdlIHlv
dSB0bwogICAgcmVmbGVjdCBiZWZvcmUgeW91IGhhY2shKSAqKQoKVGhlb3JlbSBsZWJfcmVmbCA6
IGZvcmFsbCBuOm5hdCwKICB0cnVlID0gbGViIG4gbi4KUHJvb2YuCiAgaW50cm9zIG4uCiAgaW5k
dWN0aW9uIG4gYXMgW3wgbiddLgogIHJlZmxleGl2aXR5LgogIHNpbXBsLiByZXdyaXRlIC0+IElI
bicuIHJlZmxleGl2aXR5LgpRZWQuCgpUaGVvcmVtIHplcm9fbmJlcV9TIDogZm9yYWxsIG46bmF0
LAogIGJlcV9uYXQgMCAoUyBuKSA9IGZhbHNlLgpQcm9vZi4KICBpbnRyb3Mgbi4gcmVmbGV4aXZp
dHkuClFlZC4KClRoZW9yZW0gYW5kYl9mYWxzZV9yIDogZm9yYWxsIGIgOiBib29sLAogIGFuZGIg
YiBmYWxzZSA9IGZhbHNlLgpQcm9vZi4KICBkZXN0cnVjdCBiOyByZWZsZXhpdml0eS4KUWVkLgoK
VGhlb3JlbSBwbHVzX2JsZV9jb21wYXRfbCA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBsZWIgbiBt
ID0gdHJ1ZSAtPiBsZWIgKHAgKyBuKSAocCArIG0pID0gdHJ1ZS4KUHJvb2YuCiAgaW50cm9zIG4g
bSBwIEguCiAgaW5kdWN0aW9uIHAgYXMgW3wgcCcgXSA7IHNpbXBsLgogIC0geyByZXdyaXRlIDwt
IEguIHJlZmxleGl2aXR5LiB9CiAgLSB7IHJld3JpdGUgLT4gSUhwJy4gcmVmbGV4aXZpdHkuIH0K
UWVkLgoKVGhlb3JlbSBTX25iZXFfMCA6IGZvcmFsbCBuOm5hdCwKICBiZXFfbmF0IChTIG4pIDAg
PSBmYWxzZS4KUHJvb2YuCiAgaW50cm9zIG4uCiAgc2ltcGwuCiAgcmVmbGV4aXZpdHkuClFlZC4K
ClRoZW9yZW0gbXVsdF8xX2wgOiBmb3JhbGwgbjpuYXQsCiAgICAxICogbiA9IG4uClByb29mLgog
IGludHJvcyBuLgogIHNpbXBsLgogIHJld3JpdGUgLT4gcGx1c19uX08uCiAgcmVmbGV4aXZpdHku
ClFlZC4KClRoZW9yZW0gYWxsM19zcGVjIDogZm9yYWxsIGIgYyA6IGJvb2wsCiAgICBvcmIKICAg
ICAgKGFuZGIgYiBjKQogICAgICAob3JiIChuZWdiIGIpCiAgICAgICAgICAgICAgIChuZWdiIGMp
KQogID0gdHJ1ZS4KUHJvb2YuCiAgaW50cm9zIGIgYy4KICBkZXN0cnVjdCBiLgogIGRlc3RydWN0
IGM7IHNpbXBsOyByZWZsZXhpdml0eS4KICBzaW1wbC4gcmVmbGV4aXZpdHkuClFlZC4KCigqIFRo
ZW9yZW0gbXVsdF9jb21tX2xlbW1hIDogZm9yYWxsIG4gbSwgKikKKCogICAgIG0gKiBTIG4gPSBt
ICsgbSAqIG4uICopCigqIFRoZW9yZW0gbXVsdF9jb21tIDogZm9yYWxsIG0gbiA6IG5hdCwgKikK
KCogICBtICogbiA9IG4gKiBtLiAqKQoKVGhlb3JlbSBtdWx0X3BsdXNfZGlzdHJfciA6IGZvcmFs
bCBuIG0gcCA6IG5hdCwKICAobiArIG0pICogcCA9IChuICogcCkgKyAobSAqIHApLgpQcm9vZi4K
ICBpbnRyb3MuCiAgaW5kdWN0aW9uIHAgYXMgW3xxXS4KICByZXdyaXRlIC0+IG11bHRfMF9yLgog
IHJld3JpdGUgLT4gbXVsdF8wX3IuCiAgcmV3cml0ZSAtPiBtdWx0XzBfci4KICBzaW1wbC4gcmVm
bGV4aXZpdHkuCiAgcmV3cml0ZSAtPiBtdWx0X2NvbW1fbGVtbWEuCiAgcmV3cml0ZSAtPiBtdWx0
X2NvbW1fbGVtbWEuCiAgcmV3cml0ZSAtPiBtdWx0X2NvbW1fbGVtbWEuCiAgcmV3cml0ZSAtPiBw
bHVzX3N3YXAuCiAgcmV3cml0ZSAtPiBJSHEuCiAgcmV3cml0ZSA8LSBwbHVzX2Fzc29jLgogIHJl
d3JpdGUgPC0gcGx1c19hc3NvYy4KICByZXdyaXRlIC0+IHBsdXNfc3dhcC4KICByZWZsZXhpdml0
eS4KUWVkLgoKVGhlb3JlbSBtdWx0X2Fzc29jIDogZm9yYWxsIG4gbSBwIDogbmF0LAogIG4gKiAo
bSAqIHApID0gKG4gKiBtKSAqIHAuClByb29mLgogIGludHJvcy4KICBpbmR1Y3Rpb24gbiBhcyBb
fHJdLgogIHNpbXBsLgogIHJlZmxleGl2aXR5LgogIHNpbXBsLgogIHJld3JpdGUgLT4gbXVsdF9w
bHVzX2Rpc3RyX3IuCiAgcmV3cml0ZSAtPiBJSHIuCiAgcmVmbGV4aXZpdHkuCiAgIFFlZC4KKCoq
IFtdICopCgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGJlcV9uYXRfcmVm
bCkgICopCigqKiBQcm92ZSB0aGUgZm9sbG93aW5nIHRoZW9yZW0uICAoUHV0dGluZyB0aGUgW3Ry
dWVdIG9uIHRoZSBsZWZ0LWhhbmQKICAgIHNpZGUgb2YgdGhlIGVxdWFsaXR5IG1heSBsb29rIG9k
ZCwgYnV0IHRoaXMgaXMgaG93IHRoZSB0aGVvcmVtIGlzCiAgICBzdGF0ZWQgaW4gdGhlIENvcSBz
dGFuZGFyZCBsaWJyYXJ5LCBzbyB3ZSBmb2xsb3cgc3VpdC4gIFJld3JpdGluZwogICAgd29ya3Mg
ZXF1YWxseSB3ZWxsIGluIGVpdGhlciBkaXJlY3Rpb24sIHNvIHdlIHdpbGwgaGF2ZSBubyBwcm9i
bGVtCiAgICB1c2luZyB0aGUgdGhlb3JlbSBubyBtYXR0ZXIgd2hpY2ggd2F5IHdlIHN0YXRlIGl0
LikgKikKClRoZW9yZW0gYmVxX25hdF9yZWZsIDogZm9yYWxsIG4gOiBuYXQsCiAgdHJ1ZSA9IGJl
cV9uYXQgbiBuLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQuCigqKiBbXSAq
KQoKKCoqICoqKiogRXhlcmNpc2U6IDIgc3RhcnMsIG9wdGlvbmFsIChwbHVzX3N3YXAnKSAgKikK
KCoqIFRoZSBbcmVwbGFjZV0gdGFjdGljIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBhIHBhcnRpY3Vs
YXIgc3VidGVybSB0bwogICByZXdyaXRlIGFuZCB3aGF0IHlvdSB3YW50IGl0IHJld3JpdHRlbiB0
bzogW3JlcGxhY2UgKHQpIHdpdGggKHUpXQogICByZXBsYWNlcyAoYWxsIGNvcGllcyBvZikgZXhw
cmVzc2lvbiBbdF0gaW4gdGhlIGdvYWwgYnkgZXhwcmVzc2lvbgogICBbdV0sIGFuZCBnZW5lcmF0
ZXMgW3QgPSB1XSBhcyBhbiBhZGRpdGlvbmFsIHN1YmdvYWwuIFRoaXMgaXMgb2Z0ZW4KICAgdXNl
ZnVsIHdoZW4gYSBwbGFpbiBbcmV3cml0ZV0gYWN0cyBvbiB0aGUgd3JvbmcgcGFydCBvZiB0aGUg
Z29hbC4KCiAgIFVzZSB0aGUgW3JlcGxhY2VdIHRhY3RpYyB0byBkbyBhIHByb29mIG9mIFtwbHVz
X3N3YXAnXSwganVzdCBsaWtlCiAgIFtwbHVzX3N3YXBdIGJ1dCB3aXRob3V0IG5lZWRpbmcgW2Fz
c2VydCAobiArIG0gPSBtICsgbildLiAqKQoKVGhlb3JlbSBwbHVzX3N3YXAnIDogZm9yYWxsIG4g
bSBwIDogbmF0LAogIG4gKyAobSArIHApID0gbSArIChuICsgcCkuClByb29mLgogICgqIEZJTEwg
SU4gSEVSRSAqKSBBZG1pdHRlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lzZTogMyBzdGFy
cywgcmVjb21tZW5kZWQgKGJpbmFyeV9jb21tdXRlKSAgKikKKCoqIFJlY2FsbCB0aGUgW2luY3Jd
IGFuZCBbYmluX3RvX25hdF0gZnVuY3Rpb25zIHRoYXQgeW91CiAgICB3cm90ZSBmb3IgdGhlIFti
aW5hcnldIGV4ZXJjaXNlIGluIHRoZSBbQmFzaWNzXSBjaGFwdGVyLiAgUHJvdmUKICAgIHRoYXQg
dGhlIGZvbGxvd2luZyBkaWFncmFtIGNvbW11dGVzOgoKICAgICAgICAgICAgICAgYmluIC0tLS0t
LS0tLSBpbmNyIC0tLS0tLS0+IGJpbgogICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAg
ICAgICAgICAgIHwKICAgICAgICAgICAgYmluX3RvX25hdCAgICAgICAgICAgICAgICAgIGJpbl90
b19uYXQKICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAgICAg
ICAgICAgICAgICB2ICAgICAgICAgICAgICAgICAgICAgICAgICAgdgogICAgICAgICAgICAgICBu
YXQgLS0tLS0tLS0tLSBTIC0tLS0tLS0tLT4gbmF0CgogICAgVGhhdCBpcywgaW5jcmVtZW50aW5n
IGEgYmluYXJ5IG51bWJlciBhbmQgdGhlbiBjb252ZXJ0aW5nIGl0IHRvIAogICAgYSAodW5hcnkp
IG5hdHVyYWwgbnVtYmVyIHlpZWxkcyB0aGUgc2FtZSByZXN1bHQgYXMgZmlyc3QgY29udmVydGlu
ZwogICAgaXQgdG8gYSBuYXR1cmFsIG51bWJlciBhbmQgdGhlbiBpbmNyZW1lbnRpbmcuICAKICAg
IE5hbWUgeW91ciB0aGVvcmVtIFtiaW5fdG9fbmF0X3ByZXNfaW5jcl0gKCJwcmVzIiBmb3IgInBy
ZXNlcnZlcyIpLgoKICAgIEJlZm9yZSB5b3Ugc3RhcnQgd29ya2luZyBvbiB0aGlzIGV4ZXJjaXNl
LCBwbGVhc2UgY29weSB0aGUKICAgIGRlZmluaXRpb25zIGZyb20geW91ciBzb2x1dGlvbiB0byB0
aGUgW2JpbmFyeV0gZXhlcmNpc2UgaGVyZSBzbwogICAgdGhhdCB0aGlzIGZpbGUgY2FuIGJlIGdy
YWRlZCBvbiBpdHMgb3duLiAgSWYgeW91IGZpbmQgeW91cnNlbGYKICAgIHdhbnRpbmcgdG8gY2hh
bmdlIHlvdXIgb3JpZ2luYWwgZGVmaW5pdGlvbnMgdG8gbWFrZSB0aGUgcHJvcGVydHkKICAgIGVh
c2llciB0byBwcm92ZSwgZmVlbCBmcmVlIHRvIGRvIHNvISAqKQoKKCogRklMTCBJTiBIRVJFICop
CigqKiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDUgc3RhcnMsIGFkdmFuY2VkIChiaW5hcnlf
aW52ZXJzZSkgICopCigqKiBUaGlzIGV4ZXJjaXNlIGlzIGEgY29udGludWF0aW9uIG9mIHRoZSBw
cmV2aW91cyBleGVyY2lzZSBhYm91dAogICAgYmluYXJ5IG51bWJlcnMuICBZb3Ugd2lsbCBuZWVk
IHlvdXIgZGVmaW5pdGlvbnMgYW5kIHRoZW9yZW1zIGZyb20KICAgIHRoZXJlIHRvIGNvbXBsZXRl
IHRoaXMgb25lLgoKICAgIChhKSBGaXJzdCwgd3JpdGUgYSBmdW5jdGlvbiB0byBjb252ZXJ0IG5h
dHVyYWwgbnVtYmVycyB0byBiaW5hcnkKICAgICAgICBudW1iZXJzLiAgVGhlbiBwcm92ZSB0aGF0
IHN0YXJ0aW5nIHdpdGggYW55IG5hdHVyYWwgbnVtYmVyLAogICAgICAgIGNvbnZlcnRpbmcgdG8g
YmluYXJ5LCB0aGVuIGNvbnZlcnRpbmcgYmFjayB5aWVsZHMgdGhlIHNhbWUKICAgICAgICBuYXR1
cmFsIG51bWJlciB5b3Ugc3RhcnRlZCB3aXRoLgoKICAgIChiKSBZb3UgbWlnaHQgbmF0dXJhbGx5
IHRoaW5rIHRoYXQgd2Ugc2hvdWxkIGFsc28gcHJvdmUgdGhlCiAgICAgICAgb3Bwb3NpdGUgZGly
ZWN0aW9uOiB0aGF0IHN0YXJ0aW5nIHdpdGggYSBiaW5hcnkgbnVtYmVyLAogICAgICAgIGNvbnZl
cnRpbmcgdG8gYSBuYXR1cmFsLCBhbmQgdGhlbiBiYWNrIHRvIGJpbmFyeSB5aWVsZHMgdGhlCiAg
ICAgICAgc2FtZSBudW1iZXIgd2Ugc3RhcnRlZCB3aXRoLiAgSG93ZXZlciwgdGhpcyBpcyBub3Qg
dHJ1ZSEKICAgICAgICBFeHBsYWluIHdoYXQgdGhlIHByb2JsZW0gaXMuCgogICAgKGMpIERlZmlu
ZSBhICJkaXJlY3QiIG5vcm1hbGl6YXRpb24gZnVuY3Rpb24gLS0gaS5lLiwgYSBmdW5jdGlvbgog
ICAgICAgIFtub3JtYWxpemVdIGZyb20gYmluYXJ5IG51bWJlcnMgdG8gYmluYXJ5IG51bWJlcnMg
c3VjaCB0aGF0LAogICAgICAgIGZvciBhbnkgYmluYXJ5IG51bWJlciBiLCBjb252ZXJ0aW5nIHRv
IGEgbmF0dXJhbCBhbmQgdGhlbiBiYWNrCiAgICAgICAgdG8gYmluYXJ5IHlpZWxkcyBbKG5vcm1h
bGl6ZSBiKV0uICBQcm92ZSBpdC4gIChXYXJuaW5nOiBUaGlzCiAgICAgICAgcGFydCBpcyB0cmlj
a3khKQoKICAgIEFnYWluLCBmZWVsIGZyZWUgdG8gY2hhbmdlIHlvdXIgZWFybGllciBkZWZpbml0
aW9ucyBpZiB0aGlzIGhlbHBzCiAgICBoZXJlLiAqKQoKKCogRklMTCBJTiBIRVJFICopCigqKiBb
XSAqKQoKKCogIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMgKikKKCoqICogRm9ybWFsIHZzLiBJbmZvcm1hbCBQcm9vZiAoT3B0
aW9uYWwpICopCgooKiogIl9JbmZvcm1hbCBwcm9vZnMgYXJlIGFsZ29yaXRobXM7IGZvcm1hbCBw
cm9vZnMgYXJlIGNvZGVfLiIgKikKCigqKiBUaGUgcXVlc3Rpb24gb2Ygd2hhdCBjb25zdGl0dXRl
cyBhIHByb29mIG9mIGEgbWF0aGVtYXRpY2FsCiAgICBjbGFpbSBoYXMgY2hhbGxlbmdlZCBwaGls
b3NvcGhlcnMgZm9yIG1pbGxlbm5pYSwgYnV0IGEgcm91Z2ggYW5kCiAgICByZWFkeSBkZWZpbml0
aW9uIGNvdWxkIGJlIHRoaXM6IEEgcHJvb2Ygb2YgYSBtYXRoZW1hdGljYWwKICAgIHByb3Bvc2l0
aW9uIFtQXSBpcyBhIHdyaXR0ZW4gKG9yIHNwb2tlbikgdGV4dCB0aGF0IGluc3RpbGxzIGluIHRo
ZQogICAgcmVhZGVyIG9yIGhlYXJlciB0aGUgY2VydGFpbnR5IHRoYXQgW1BdIGlzIHRydWUuICBU
aGF0IGlzLCBhIHByb29mCiAgICBpcyBhbiBhY3Qgb2YgY29tbXVuaWNhdGlvbi4KCiAgICBBY3Rz
IG9mIGNvbW11bmljYXRpb24gbWF5IGludm9sdmUgZGlmZmVyZW50IHNvcnRzIG9mIHJlYWRlcnMu
ICBPbgogICAgb25lIGhhbmQsIHRoZSAicmVhZGVyIiBjYW4gYmUgYSBwcm9ncmFtIGxpa2UgQ29x
LCBpbiB3aGljaCBjYXNlCiAgICB0aGUgImJlbGllZiIgdGhhdCBpcyBpbnN0aWxsZWQgaXMgdGhh
dCBbUF0gY2FuIGJlIG1lY2hhbmljYWxseQogICAgZGVyaXZlZCBmcm9tIGEgY2VydGFpbiBzZXQg
b2YgZm9ybWFsIGxvZ2ljYWwgcnVsZXMsIGFuZCB0aGUgcHJvb2YKICAgIGlzIGEgcmVjaXBlIHRo
YXQgZ3VpZGVzIHRoZSBwcm9ncmFtIGluIGNoZWNraW5nIHRoaXMgZmFjdC4gIFN1Y2gKICAgIHJl
Y2lwZXMgYXJlIF9mb3JtYWxfIHByb29mcy4KCiAgICBBbHRlcm5hdGl2ZWx5LCB0aGUgcmVhZGVy
IGNhbiBiZSBhIGh1bWFuIGJlaW5nLCBpbiB3aGljaCBjYXNlIHRoZQogICAgcHJvb2Ygd2lsbCBi
ZSB3cml0dGVuIGluIEVuZ2xpc2ggb3Igc29tZSBvdGhlciBuYXR1cmFsIGxhbmd1YWdlLAogICAg
YW5kIHdpbGwgdGh1cyBuZWNlc3NhcmlseSBiZSBfaW5mb3JtYWxfLiAgSGVyZSwgdGhlIGNyaXRl
cmlhIGZvcgogICAgc3VjY2VzcyBhcmUgbGVzcyBjbGVhcmx5IHNwZWNpZmllZC4gIEEgInZhbGlk
IiBwcm9vZiBpcyBvbmUgdGhhdAogICAgbWFrZXMgdGhlIHJlYWRlciBiZWxpZXZlIFtQXS4gIEJ1
dCB0aGUgc2FtZSBwcm9vZiBtYXkgYmUgcmVhZCBieQogICAgbWFueSBkaWZmZXJlbnQgcmVhZGVy
cywgc29tZSBvZiB3aG9tIG1heSBiZSBjb252aW5jZWQgYnkgYQogICAgcGFydGljdWxhciB3YXkg
b2YgcGhyYXNpbmcgdGhlIGFyZ3VtZW50LCB3aGlsZSBvdGhlcnMgbWF5IG5vdCBiZS4KICAgIFNv
bWUgcmVhZGVycyBtYXkgYmUgcGFydGljdWxhcmx5IHBlZGFudGljLCBpbmV4cGVyaWVuY2VkLCBv
ciBqdXN0CiAgICBwbGFpbiB0aGljay1oZWFkZWQ7IHRoZSBvbmx5IHdheSB0byBjb252aW5jZSB0
aGVtIHdpbGwgYmUgdG8gbWFrZQogICAgdGhlIGFyZ3VtZW50IGluIHBhaW5zdGFraW5nIGRldGFp
bC4gIEJ1dCBvdGhlciByZWFkZXJzLCBtb3JlCiAgICBmYW1pbGlhciBpbiB0aGUgYXJlYSwgbWF5
IGZpbmQgYWxsIHRoaXMgZGV0YWlsIHNvIG92ZXJ3aGVsbWluZwogICAgdGhhdCB0aGV5IGxvc2Ug
dGhlIG92ZXJhbGwgdGhyZWFkOyBhbGwgdGhleSB3YW50IGlzIHRvIGJlIHRvbGQgdGhlCiAgICBt
YWluIGlkZWFzLCBzaW5jZSBpdCBpcyBlYXNpZXIgZm9yIHRoZW0gdG8gZmlsbCBpbiB0aGUgZGV0
YWlscyBmb3IKICAgIHRoZW1zZWx2ZXMgdGhhbiB0byB3YWRlIHRocm91Z2ggYSB3cml0dGVuIHBy
ZXNlbnRhdGlvbiBvZiB0aGVtLgogICAgVWx0aW1hdGVseSwgdGhlcmUgaXMgbm8gdW5pdmVyc2Fs
IHN0YW5kYXJkLCBiZWNhdXNlIHRoZXJlIGlzIG5vCiAgICBzaW5nbGUgd2F5IG9mIHdyaXRpbmcg
YW4gaW5mb3JtYWwgcHJvb2YgdGhhdCBpcyBndWFyYW50ZWVkIHRvCiAgICBjb252aW5jZSBldmVy
eSBjb25jZWl2YWJsZSByZWFkZXIuCgogICAgSW4gcHJhY3RpY2UsIGhvd2V2ZXIsIG1hdGhlbWF0
aWNpYW5zIGhhdmUgZGV2ZWxvcGVkIGEgcmljaCBzZXQgb2YKICAgIGNvbnZlbnRpb25zIGFuZCBp
ZGlvbXMgZm9yIHdyaXRpbmcgYWJvdXQgY29tcGxleCBtYXRoZW1hdGljYWwKICAgIG9iamVjdHMg
dGhhdCAtLSBhdCBsZWFzdCB3aXRoaW4gYSBjZXJ0YWluIGNvbW11bml0eSAtLSBtYWtlCiAgICBj
b21tdW5pY2F0aW9uIGZhaXJseSByZWxpYWJsZS4gIFRoZSBjb252ZW50aW9ucyBvZiB0aGlzIHN0
eWxpemVkCiAgICBmb3JtIG9mIGNvbW11bmljYXRpb24gZ2l2ZSBhIGZhaXJseSBjbGVhciBzdGFu
ZGFyZCBmb3IganVkZ2luZwogICAgcHJvb2ZzIGdvb2Qgb3IgYmFkLgoKICAgIEJlY2F1c2Ugd2Ug
YXJlIHVzaW5nIENvcSBpbiB0aGlzIGNvdXJzZSwgd2Ugd2lsbCBiZSB3b3JraW5nCiAgICBoZWF2
aWx5IHdpdGggZm9ybWFsIHByb29mcy4gIEJ1dCB0aGlzIGRvZXNuJ3QgbWVhbiB3ZSBjYW4KICAg
IGNvbXBsZXRlbHkgZm9yZ2V0IGFib3V0IGluZm9ybWFsIG9uZXMhICBGb3JtYWwgcHJvb2ZzIGFy
ZSB1c2VmdWwKICAgIGluIG1hbnkgd2F5cywgYnV0IHRoZXkgYXJlIF9ub3RfIHZlcnkgZWZmaWNp
ZW50IHdheXMgb2YKICAgIGNvbW11bmljYXRpbmcgaWRlYXMgYmV0d2VlbiBodW1hbiBiZWluZ3Mu
ICopCgooKiogRm9yIGV4YW1wbGUsIGhlcmUgaXMgYSBwcm9vZiB0aGF0IGFkZGl0aW9uIGlzIGFz
c29jaWF0aXZlOiAqKQoKVGhlb3JlbSBwbHVzX2Fzc29jJyA6IGZvcmFsbCBuIG0gcCA6IG5hdCwK
ICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgpQcm9vZi4gaW50cm9zIG4gbSBwLiBpbmR1Y3Rp
b24gbiBhcyBbfCBuJyBJSG4nXS4gcmVmbGV4aXZpdHkuCiAgc2ltcGwuIHJld3JpdGUgLT4gSUhu
Jy4gcmVmbGV4aXZpdHkuICBRZWQuCgooKiogQ29xIGlzIHBlcmZlY3RseSBoYXBweSB3aXRoIHRo
aXMuICBGb3IgYSBodW1hbiwgaG93ZXZlciwgaXQKICAgIGlzIGRpZmZpY3VsdCB0byBtYWtlIG11
Y2ggc2Vuc2Ugb2YgaXQuICBXZSBjYW4gdXNlIGNvbW1lbnRzIGFuZAogICAgYnVsbGV0cyB0byBz
aG93IHRoZSBzdHJ1Y3R1cmUgYSBsaXR0bGUgbW9yZSBjbGVhcmx5Li4uICopCgpUaGVvcmVtIHBs
dXNfYXNzb2MnJyA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBuICsgKG0gKyBwKSA9IChuICsgbSkg
KyBwLgpQcm9vZi4KICBpbnRyb3MgbiBtIHAuIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgog
IC0gKCogbiA9IDAgKikKICAgIHJlZmxleGl2aXR5LgogIC0gKCogbiA9IFMgbicgKikKICAgIHNp
bXBsLiByZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5LiAgIFFlZC4KCigqKiAuLi4gYW5kIGlm
IHlvdSdyZSB1c2VkIHRvIENvcSB5b3UgbWF5IGJlIGFibGUgdG8gc3RlcAogICAgdGhyb3VnaCB0
aGUgdGFjdGljcyBvbmUgYWZ0ZXIgdGhlIG90aGVyIGluIHlvdXIgbWluZCBhbmQgaW1hZ2luZQog
ICAgdGhlIHN0YXRlIG9mIHRoZSBjb250ZXh0IGFuZCBnb2FsIHN0YWNrIGF0IGVhY2ggcG9pbnQs
IGJ1dCBpZiB0aGUKICAgIHByb29mIHdlcmUgZXZlbiBhIGxpdHRsZSBiaXQgbW9yZSBjb21wbGlj
YXRlZCB0aGlzIHdvdWxkIGJlIG5leHQKICAgIHRvIGltcG9zc2libGUuCgogICAgQSAocGVkYW50
aWMpIG1hdGhlbWF0aWNpYW4gbWlnaHQgd3JpdGUgdGhlIHByb29mIHNvbWV0aGluZyBsaWtlCiAg
ICB0aGlzOiAqKQoKKCoqIC0gX1RoZW9yZW1fOiBGb3IgYW55IFtuXSwgW21dIGFuZCBbcF0sCgog
ICAgICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgoKICAgIF9Qcm9vZl86IEJ5IGluZHVjdGlv
biBvbiBbbl0uCgogICAgLSBGaXJzdCwgc3VwcG9zZSBbbiA9IDBdLiAgV2UgbXVzdCBzaG93Cgog
ICAgICAgIDAgKyAobSArIHApID0gKDAgKyBtKSArIHAuCgogICAgICBUaGlzIGZvbGxvd3MgZGly
ZWN0bHkgZnJvbSB0aGUgZGVmaW5pdGlvbiBvZiBbK10uCgogICAgLSBOZXh0LCBzdXBwb3NlIFtu
ID0gUyBuJ10sIHdoZXJlCgogICAgICAgIG4nICsgKG0gKyBwKSA9IChuJyArIG0pICsgcC4KCiAg
ICAgIFdlIG11c3Qgc2hvdwoKICAgICAgICAoUyBuJykgKyAobSArIHApID0gKChTIG4nKSArIG0p
ICsgcC4KCiAgICAgIEJ5IHRoZSBkZWZpbml0aW9uIG9mIFsrXSwgdGhpcyBmb2xsb3dzIGZyb20K
CiAgICAgICAgUyAobicgKyAobSArIHApKSA9IFMgKChuJyArIG0pICsgcCksCgogICAgICB3aGlj
aCBpcyBpbW1lZGlhdGUgZnJvbSB0aGUgaW5kdWN0aW9uIGh5cG90aGVzaXMuICBfUWVkXy4gKikK
CgooKiogVGhlIG92ZXJhbGwgZm9ybSBvZiB0aGUgcHJvb2YgaXMgYmFzaWNhbGx5IHNpbWlsYXIs
IGFuZCBvZgogICAgY291cnNlIHRoaXMgaXMgbm8gYWNjaWRlbnQ6IENvcSBoYXMgYmVlbiBkZXNp
Z25lZCBzbyB0aGF0IGl0cwogICAgW2luZHVjdGlvbl0gdGFjdGljIGdlbmVyYXRlcyB0aGUgc2Ft
ZSBzdWItZ29hbHMsIGluIHRoZSBzYW1lCiAgICBvcmRlciwgYXMgdGhlIGJ1bGxldCBwb2ludHMg
dGhhdCBhIG1hdGhlbWF0aWNpYW4gd291bGQgd3JpdGUuICBCdXQKICAgIHRoZXJlIGFyZSBzaWdu
aWZpY2FudCBkaWZmZXJlbmNlcyBvZiBkZXRhaWw6IHRoZSBmb3JtYWwgcHJvb2YgaXMKICAgIG11
Y2ggbW9yZSBleHBsaWNpdCBpbiBzb21lIHdheXMgKGUuZy4sIHRoZSB1c2Ugb2YgW3JlZmxleGl2
aXR5XSkKICAgIGJ1dCBtdWNoIGxlc3MgZXhwbGljaXQgaW4gb3RoZXJzIChpbiBwYXJ0aWN1bGFy
LCB0aGUgInByb29mIHN0YXRlIgogICAgYXQgYW55IGdpdmVuIHBvaW50IGluIHRoZSBDb3EgcHJv
b2YgaXMgY29tcGxldGVseSBpbXBsaWNpdCwKICAgIHdoZXJlYXMgdGhlIGluZm9ybWFsIHByb29m
IHJlbWluZHMgdGhlIHJlYWRlciBzZXZlcmFsIHRpbWVzIHdoZXJlCiAgICB0aGluZ3Mgc3RhbmQp
LiAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDIgc3RhcnMsIGFkdmFuY2VkLCByZWNvbW1lbmRlZCAo
cGx1c19jb21tX2luZm9ybWFsKSAgKikKKCoqIFRyYW5zbGF0ZSB5b3VyIHNvbHV0aW9uIGZvciBb
cGx1c19jb21tXSBpbnRvIGFuIGluZm9ybWFsIHByb29mOgoKICAgIFRoZW9yZW06IEFkZGl0aW9u
IGlzIGNvbW11dGF0aXZlLgoKICAgIFByb29mOiAoKiBGSUxMIElOIEhFUkUgKikKKikKKCoqIFtd
ICopCgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGJlcV9uYXRfcmVmbF9p
bmZvcm1hbCkgICopCigqKiBXcml0ZSBhbiBpbmZvcm1hbCBwcm9vZiBvZiB0aGUgZm9sbG93aW5n
IHRoZW9yZW0sIHVzaW5nIHRoZQogICAgaW5mb3JtYWwgcHJvb2Ygb2YgW3BsdXNfYXNzb2NdIGFz
IGEgbW9kZWwuICBEb24ndCBqdXN0CiAgICBwYXJhcGhyYXNlIHRoZSBDb3EgdGFjdGljcyBpbnRv
IEVuZ2xpc2ghCgogICAgVGhlb3JlbTogW3RydWUgPSBiZXFfbmF0IG4gbl0gZm9yIGFueSBbbl0u
CgogICAgUHJvb2Y6ICgqIEZJTEwgSU4gSEVSRSAqKQpbXSAqKQoKKCoqICREYXRlOiAyMDE2LTA1
LTI2IDE2OjE3OjE5IC0wNDAwIChUaHUsIDI2IE1heSAyMDE2KSAkICopCgo=
(*UHIDE*)