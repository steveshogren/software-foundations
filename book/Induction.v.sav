(*HIDE*)Cg==
(*UHIDE*)

(** * Induction: Proof by Induction *)

(** First, we import all of our definitions from the previous
    chapter. *)

Require Export chap1.

(** For the [Require Export] to work, you first need to use
    [coqc] to compile [Basics.v] into [Basics.vo].  This is like
    making a .class file from a .java file, or a .o file from a .c
    file.  There are two ways to do it:

     - In CoqIDE:

         Open [Basics.v].  In the "Compile" menu, click on "Compile
         Buffer".

     - From the command line:

         Run [coqc Basics.v]

    *)

(* ################################################################# *)
(** * Proof by Induction *)

(** We proved in the last chapter that [0] is a neutral element
    for [+] on the left using an easy argument based on
    simplification.  The fact that it is also a neutral element on the
    _right_... *)

Theorem plus_n_O_firsttry : forall n:nat,
  n = n + 0.

(** ... cannot be proved in the same simple way.  Just applying
  [reflexivity] doesn't work, since the [n] in [n + 0] is an arbitrary
  unknown number, so the [match] in the definition of [+] can't be
  simplified.  *)

Proof.
  intros n.
  simpl. 
Abort.

(** And reasoning by cases using [destruct n] doesn't get us much
   further: the branch of the case analysis where we assume [n = 0]
   goes through fine, but in the branch where [n = S n'] for some [n'] we
   get stuck in exactly the same way.  We could use [destruct n'] to
   get one step further, but, since [n] can be arbitrarily large, if we
   try to keep on like this we'll never be done. *)


Theorem plus_n_O_secondtry : forall n:nat,
  n = n + 0.
Proof.
  intros n. destruct n as [| n'].
  - (* n = 0 *)
    reflexivity. (* so far so good... *)
  - (* n = S n' *)
    simpl.       (* ...but here we are stuck again *)
Abort.

(** To prove interesting facts about numbers, lists, and other
    inductively defined sets, we usually need a more powerful
    reasoning principle: _induction_.

    Recall (from high school, a discrete math course, etc.) the
    principle of induction over natural numbers: If [P(n)] is some
    proposition involving a natural number [n] and we want to show
    that [P] holds for _all_ numbers [n], we can reason like this:
         - show that [P(O)] holds;
         - show that, for any [n'], if [P(n')] holds, then so does
           [P(S n')];
         - conclude that [P(n)] holds for all [n].

    In Coq, the steps are the same but the order is backwards: we
    begin with the goal of proving [P(n)] for all [n] and break it
    down (by applying the [induction] tactic) into two separate
    subgoals: first showing [P(O)] and then showing [P(n') -> P(S
    n')].  Here's how this works for the theorem at hand: *)

Theorem plus_n_O : forall n:nat, n = n + 0.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)    reflexivity.
  - (* n = S n' *) simpl. rewrite <- IHn'. reflexivity.  Qed.

(** Like [destruct], the [induction] tactic takes an [as...]
    clause that specifies the names of the variables to be introduced
    in the subgoals.  In the first branch, [n] is replaced by [0] and
    the goal becomes [0 + 0 = 0], which follows by simplification.  In
    the second, [n] is replaced by [S n'] and the assumption [n' + 0 =
    n'] is added to the context (with the name [IHn'], i.e., the
    Induction Hypothesis for [n'] -- notice that this name is
    explicitly chosen in the [as...] clause of the call to [induction]
    rather than letting Coq choose one arbitrarily). The goal in this
    case becomes [(S n') + 0 = S n'], which simplifies to [S (n' + 0)
    = S n'], which in turn follows from [IHn']. *)

(* We cannot use destruct here, because it is not forall n, just for that
specific n. After the O case, we are left with the n case, which is exactly what
we are trying to prove! *)
Theorem plus_n_Od : forall n:nat, n = n + 0.
Proof.
  intros n. destruct n.
  - (* n = 0 *)    reflexivity.
  - (* S n = S (n + 0) *) simpl. Admitted.

(* So induction differs in that it works forall n, not just n. It also creates a
hypothesis we can use for our matching. I am still very confused on the concept
of how using the thing we are proving to prove our Theorem makes any sense at
all... :/ *)

Theorem minus_diag : forall n,
  minus n n = 0.
Proof.
  (* WORKED IN CLASS *)
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)
    simpl. reflexivity.
  - (* n = S n' *)
    simpl. rewrite -> IHn'. reflexivity.  Qed.

(** (The use of the [intros] tactic in these proofs is actually
    redundant.  When applied to a goal that contains quantified
    variables, the [induction] tactic will automatically move them
    into the context as needed.) *)

(** **** Exercise: 2 stars, recommended (basic_induction)  *)
(** Prove the following using induction. You might need previously
    proven results. *)
(* Its becoming more and more apparent that proofs must be built up out of
smaller proofs. A good first step would be to consider what proofs I have
already proven. This book seems to link exercises and examples together: the
solution for a proof is highly likely to be found in the prior proofs. *)

(*HIDE*)CgpUaGVvcmVtIG11bHRfMF9yIDogZm9yYWxsIG46bmF0LAogIG4gKiAwID0gMC4KUHJvb2YuCiAg
aW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICAgc2ltcGwuIHJlZmxleGl2
aXR5LgogICAgc2ltcGwuIHJld3JpdGUgLT4gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9y
ZW0gYWRkX2VxdWl2IDogZm9yYWxsIG46bmF0LAogIFMobikgPSBTKG4pLgpQcm9vZi4KICBpbnRy
b3Mgbi4gaW5kdWN0aW9uIG4gYXMgW3wgbicgSUhuJ10uCiAgICBzaW1wbC4gcmVmbGV4aXZpdHku
CiAgICBzaW1wbC4gcmVmbGV4aXZpdHkuClFlZC4KCigqIFNldCBQcmludGluZyBBbGwuICopClRo
ZW9yZW0gcGx1c19uX1NtIDogZm9yYWxsIG4gbSA6IG5hdCwgCiAgUyAobiArIG0pID0gbiArIChT
IG0pLgpQcm9vZi4KICAoKiB3aXRob3V0IGludHJvZHVjaW5nIG4gQU5OTk5ORCBtIGhlcmUsIHRo
ZSByZXdyaXRlIGRvZXNuJ3QgbWF0Y2guIGdycnJyICopCiAgaW50cm9zIG4gbS4gaW5kdWN0aW9u
IG4gYXMgW3wgbicgSUhuJ10uCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyBzaW1w
bC4gcmV3cml0ZSA8LSBJSG4nLiByZWZsZXhpdml0eS4gfQpRZWQuIAoKVGhlb3JlbSBwbHVzX2Nv
bW0gOiBmb3JhbGwgbiBtIDogbmF0LAogIG4gKyBtID0gbSArIG4uClByb29mLgogIGludHJvcyBu
IG0uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddOyBzaW1wbC4KICAoKiBJIGhhdmUgdG8gcmVt
ZW1iZXIgdG8gdXNlIGV4aXN0aW5nIHByb29mcyEgKikKICByZXdyaXRlIDwtIHBsdXNfbl9PLiBy
ZWZsZXhpdml0eS4KICByZXdyaXRlIDwtIHBsdXNfbl9TbS4gcmV3cml0ZSAtPiBJSG4nLiByZWZs
ZXhpdml0eS4KUWVkLgoKVGhlb3JlbSBwbHVzX2Fzc29jIDogZm9yYWxsIG4gbSBwIDogbmF0LAog
IG4gKyAobSArIHApID0gKG4gKyBtKSArIHAuClByb29mLgogIGludHJvcyBuIG0gcC4gaW5kdWN0
aW9uIG4gYXMgW3wgbicgSUhuJ107IHNpbXBsLgogIHJlZmxleGl2aXR5LgogIHJld3JpdGUgPC0g
SUhuJy4gc2ltcGwuIHJlZmxleGl2aXR5LgpRZWQuCigqKiBbXSAqKQoKCigqKiAqKioqIEV4ZXJj
aXNlOiAyIHN0YXJzIChkb3VibGVfcGx1cykgICopCigqKiBDb25zaWRlciB0aGUgZm9sbG93aW5n
IGZ1bmN0aW9uLCB3aGljaCBkb3VibGVzIGl0cyBhcmd1bWVudDogKikKCkZpeHBvaW50IGRvdWJs
ZSAobjpuYXQpIDo9CiAgbWF0Y2ggbiB3aXRoCiAgfCBPID0+IE8KICB8IFMgbicgPT4gUyAoUyAo
ZG91YmxlIG4nKSkKICBlbmQuCgooKiogVXNlIGluZHVjdGlvbiB0byBwcm92ZSB0aGlzIHNpbXBs
ZSBmYWN0IGFib3V0IFtkb3VibGVdOiAqKQoKTGVtbWEgZG91YmxlX3BsdXMgOiBmb3JhbGwgbiwg
ZG91YmxlIG4gPSBuICsgbiAuClByb29mLgogIGludHJvcyBuLiBpbmR1Y3Rpb24gbiBhcyBbfCBu
JyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8LSBwbHVzX25fU20uIHJl
d3JpdGUgPC0gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVy
Y2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGV2ZW5iX1MpICAqKQooKiogT25lIGluY29udmVuaW5l
bnQgYXNwZWN0IG9mIG91ciBkZWZpbml0aW9uIG9mIFtldmVuYiBuXSBpcyB0aGF0IGl0CiAgICBt
YXkgbmVlZCB0byBwZXJmb3JtIGEgcmVjdXJzaXZlIGNhbGwgb24gW24gLSAyXS4gVGhpcyBtYWtl
cyBwcm9vZnMKICAgIGFib3V0IFtldmVuYiBuXSBoYXJkZXIgd2hlbiBkb25lIGJ5IGluZHVjdGlv
biBvbiBbbl0sIHNpbmNlIHdlIG1heQogICAgbmVlZCBhbiBpbmR1Y3Rpb24gaHlwb3RoZXNpcyBh
Ym91dCBbbiAtIDJdLiBUaGUgZm9sbG93aW5nIGxlbW1hCiAgICBnaXZlcyBhIGJldHRlciBjaGFy
YWN0ZXJpemF0aW9uIG9mIFtldmVuYiAoUyBuKV06ICopCgpUaGVvcmVtIG5lZ2JfZG91YmxlZCA6
IGZvcmFsbCBiIDogYm9vbCwgbmVnYiAobmVnYiBiKSA9IGIuClByb29mLgogIGludHJvcyBiLiBp
bmR1Y3Rpb24gYjsgcmVmbGV4aXZpdHkuClFlZC4KClRoZW9yZW0gZXZlbmJfUyA6IGZvcmFsbCBu
IDogbmF0LAogIGV2ZW5iIChTIG4pID0gbmVnYiAoZXZlbmIgbikuClByb29mLgogIGludHJvcyBu
LiBpbmR1Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBpbmR1Y3Rpb24g
bicuCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyByZXdyaXRlIC0+IElIbicuCiAg
ICAgIHJld3JpdGUgLT4gbmVnYl9kb3VibGVkLgogICAgICByZWZsZXhpdml0eS4gfQpRZWQuCigq
KiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDEgc3RhciAoZGVzdHJ1Y3RfaW5kdWN0aW9uKSAg
KikKKCoqIEJyaWVmbHkgZXhwbGFpbiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0YWN0aWNz
IFtkZXN0cnVjdF0gCiAgICBhbmQgW2luZHVjdGlvbl0uCgooKiBGSUxMIElOIEhFUkUgKikKKikK
KCoqIFtdICopCgo=
(*UHIDE*)

(* ################################################################# *)
(** * Proofs Within Proofs *)

(** In Coq, as in informal mathematics, large proofs are often
    broken into a sequence of theorems, with later proofs referring to
    earlier theorems.  But sometimes a proof will require some
    miscellaneous fact that is too trivial and of too little general
    interest to bother giving it its own top-level name.  In such
    cases, it is convenient to be able to simply state and prove the
    needed "sub-theorem" right at the point where it is used.  The
    [assert] tactic allows us to do this.  For example, our earlier
    proof of the [mult_0_plus] theorem referred to a previous theorem
    named [plus_O_n].  We could instead use [assert] to state and
    prove [plus_O_n] in-line: *)

Theorem mult_0_plus' : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H: 0 + n = n). { reflexivity. }
  rewrite -> H.
  reflexivity.  Qed.

(** The [assert] tactic introduces two sub-goals.  The first is
    the assertion itself; by prefixing it with [H:] we name the
    assertion [H].  (We can also name the assertion with [as] just as
    we did above with [destruct] and [induction], i.e., [assert (0 + n
    = n) as H].)  Note that we surround the proof of this assertion
    with curly braces [{ ... }], both for readability and so that,
    when using Coq interactively, we can see more easily when we have
    finished this sub-proof.  The second goal is the same as the one
    at the point where we invoke [assert] except that, in the context,
    we now have the assumption [H] that [0 + n = n].  That is,
    [assert] generates one subgoal where we must prove the asserted
    fact and a second subgoal where we can use the asserted fact to
    make progress on whatever we were trying to prove in the first
    place. *)

(** The [assert] tactic is handy in many sorts of situations.  For
    example, suppose we want to prove that [(n + m) + (p + q) = (m +
    n) + (p + q)]. The only difference between the two sides of the
    [=] is that the arguments [m] and [n] to the first inner [+] are
    swapped, so it seems we should be able to use the commutativity of
    addition ([plus_comm]) to rewrite one into the other.  However,
    the [rewrite] tactic is a little stupid about _where_ it applies
    the rewrite.  There are three uses of [+] here, and it turns out
    that doing [rewrite -> plus_comm] will affect only the _outer_
    one... *)

Theorem plus_rearrange_firsttry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  (* We just need to swap (n + m) for (m + n)...
     it seems like plus_comm should do the trick! *)
  rewrite -> plus_comm.
  (* Doesn't work...Coq rewrote the wrong plus! *)
Abort.

(** To get [plus_comm] to apply at the point where we want it to, we
    can introduce a local lemma stating that [n + m = m + n] (for the
    particular [m] and [n] that we are talking about here), prove this
    lemma using [plus_comm], and then use it to do the desired
    rewrite. *)

Theorem plus_rearrange : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  assert (H: n + m = m + n).
  { rewrite -> plus_comm. reflexivity. }
  rewrite -> H. reflexivity.  Qed.

(* ################################################################# *)
(*HIDE*)CigqKiAqIE1vcmUgRXhlcmNpc2VzICopCgooKiogKioqKiBFeGVyY2lzZTogMyBzdGFycywgcmVj
b21tZW5kZWQgKG11bHRfY29tbSkgICopCigqKiBVc2UgW2Fzc2VydF0gdG8gaGVscCBwcm92ZSB0
aGlzIHRoZW9yZW0uICBZb3Ugc2hvdWxkbid0IG5lZWQgdG8KICAgIHVzZSBpbmR1Y3Rpb24gb24g
W3BsdXNfc3dhcF0uICopCgooKiBUaGVvcmVtIHBsdXNfYXNzb2MgOiBmb3JhbGwgbiBtIHAgOiBu
YXQsICopCigqICAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4gKikKCigqIFRoZW9yZW0gcGx1
c19jb21tIDogZm9yYWxsIG4gbSA6IG5hdCwgKikKKCogICBuICsgbSA9IG0gKyBuLiAqKQoKVGhl
b3JlbSBwbHVzX3N3YXAgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkgPSBtICsg
KG4gKyBwKS4KUHJvb2YuCiAgaW50cm9zIG4gbSBwLgogIHJld3JpdGUgLT4gcGx1c19jb21tLgog
IHJld3JpdGUgPC0gcGx1c19hc3NvYy4KICBhc3NlcnQgKEg6IHAgKyBuID0gbiArIHApLgogIHsg
cmV3cml0ZSAtPiBwbHVzX2NvbW0uIHJlZmxleGl2aXR5LiB9CiAgcmV3cml0ZSAtPiBILiAgCiAg
cmVmbGV4aXZpdHkuClFlZC4KCigqKiBOb3cgcHJvdmUgY29tbXV0YXRpdml0eSBvZiBtdWx0aXBs
aWNhdGlvbi4gIChZb3Ugd2lsbCBwcm9iYWJseQogICAgbmVlZCB0byBkZWZpbmUgYW5kIHByb3Zl
IGEgc2VwYXJhdGUgc3Vic2lkaWFyeSB0aGVvcmVtIHRvIGJlIHVzZWQKICAgIGluIHRoZSBwcm9v
ZiBvZiB0aGlzIG9uZS4gIFlvdSBtYXkgZmluZCB0aGF0IFtwbHVzX3N3YXBdIGNvbWVzIGluCiAg
ICBoYW5keS4pICopCgpUaGVvcmVtIG11bHRfMV9uIDogZm9yYWxsIG4sIG4gKiAxID0gbi4KUHJv
b2YuCiAgaW50cm9zIG4uCiAgaW5kdWN0aW9uIG4gYXMgW3wgbiddOyBzaW1wbC4KICByZWZsZXhp
dml0eS4KICByZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5LgpRZWQuCgpUaGVvcmVtIG11bHRf
Y29tbV9sZW1tYSA6IGZvcmFsbCBuIG0sCiAgICBtICogUyBuID0gbSArIG0gKiBuLgpQcm9vZi4K
ICBpbnRyb3MgbiBtLgogIGluZHVjdGlvbiBtIGFzIFt8IHBdIDsgc2ltcGwuCiAgeyByZWZsZXhp
dml0eS4gfQogIHsgcmV3cml0ZSAtPiBwbHVzX3N3YXAuIHJld3JpdGUgLT4gSUhwLiByZWZsZXhp
dml0eS4gfQpRZWQuCgpUaGVvcmVtIG11bHRfY29tbSA6IGZvcmFsbCBtIG4gOiBuYXQsCiAgbSAq
IG4gPSBuICogbS4KUHJvb2YuCiAgaW50cm9zIG0gbi4KICBpbmR1Y3Rpb24gbiBhcyBbfCBuJyBd
OyBzaW1wbC4KICByZXdyaXRlIC0+IG11bHRfMF9yLiByZWZsZXhpdml0eS4KICByZXdyaXRlIC0+
IG11bHRfY29tbV9sZW1tYS4gcmV3cml0ZSAtPiBJSG4nLiByZWZsZXhpdml0eS4KUWVkLgooKiog
W10gKikKCigqKiAqKioqIEV4ZXJjaXNlOiAzIHN0YXJzLCBvcHRpb25hbCAobW9yZV9leGVyY2lz
ZXMpICAqKQooKiogVGFrZSBhIHBpZWNlIG9mIHBhcGVyLiAgRm9yIGVhY2ggb2YgdGhlIGZvbGxv
d2luZyB0aGVvcmVtcywgZmlyc3QKICAgIF90aGlua18gYWJvdXQgd2hldGhlciAoYSkgaXQgY2Fu
IGJlIHByb3ZlZCB1c2luZyBvbmx5CiAgICBzaW1wbGlmaWNhdGlvbiBhbmQgcmV3cml0aW5nLCAo
YikgaXQgYWxzbyByZXF1aXJlcyBjYXNlCiAgICBhbmFseXNpcyAoW2Rlc3RydWN0XSksIG9yIChj
KSBpdCBhbHNvIHJlcXVpcmVzIGluZHVjdGlvbi4gIFdyaXRlCiAgICBkb3duIHlvdXIgcHJlZGlj
dGlvbi4gIFRoZW4gZmlsbCBpbiB0aGUgcHJvb2YuICAoVGhlcmUgaXMgbm8gbmVlZAogICAgdG8g
dHVybiBpbiB5b3VyIHBpZWNlIG9mIHBhcGVyOyB0aGlzIGlzIGp1c3QgdG8gZW5jb3VyYWdlIHlv
dSB0bwogICAgcmVmbGVjdCBiZWZvcmUgeW91IGhhY2shKSAqKQoKVGhlb3JlbSBsZWJfcmVmbCA6
IGZvcmFsbCBuOm5hdCwKICB0cnVlID0gbGViIG4gbi4KUHJvb2YuCiAgaW50cm9zIG4uCiAgaW5k
dWN0aW9uIG4gYXMgW3wgbiddLgogIHJlZmxleGl2aXR5LgogIHNpbXBsLiByZXdyaXRlIC0+IElI
bicuIHJlZmxleGl2aXR5LgpRZWQuCgpUaGVvcmVtIHplcm9fbmJlcV9TIDogZm9yYWxsIG46bmF0
LAogIGJlcV9uYXQgMCAoUyBuKSA9IGZhbHNlLgpQcm9vZi4KICBpbnRyb3Mgbi4gcmVmbGV4aXZp
dHkuClFlZC4KClRoZW9yZW0gYW5kYl9mYWxzZV9yIDogZm9yYWxsIGIgOiBib29sLAogIGFuZGIg
YiBmYWxzZSA9IGZhbHNlLgpQcm9vZi4KICBkZXN0cnVjdCBiOyByZWZsZXhpdml0eS4KUWVkLgoK
VGhlb3JlbSBwbHVzX2JsZV9jb21wYXRfbCA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBsZWIgbiBt
ID0gdHJ1ZSAtPiBsZWIgKHAgKyBuKSAocCArIG0pID0gdHJ1ZS4KUHJvb2YuCiAgaW50cm9zIG4g
bSBwIEguCiAgaW5kdWN0aW9uIHAgYXMgW3wgcCcgXSA7IHNpbXBsLgogIC0geyByZXdyaXRlIDwt
IEguIHJlZmxleGl2aXR5LiB9CiAgLSB7IHJld3JpdGUgLT4gSUhwJy4gcmVmbGV4aXZpdHkuIH0K
UWVkLgoKVGhlb3JlbSBTX25iZXFfMCA6IGZvcmFsbCBuOm5hdCwKICBiZXFfbmF0IChTIG4pIDAg
PSBmYWxzZS4KUHJvb2YuCiAgaW50cm9zIG4uCiAgc2ltcGwuCiAgcmVmbGV4aXZpdHkuClFlZC4K
ClRoZW9yZW0gbXVsdF8xX2wgOiBmb3JhbGwgbjpuYXQsCiAgICAxICogbiA9IG4uClByb29mLgog
IGludHJvcyBuLgogIHNpbXBsLgogIHJld3JpdGUgLT4gcGx1c19uX08uCiAgcmVmbGV4aXZpdHku
ClFlZC4KClRoZW9yZW0gYWxsM19zcGVjIDogZm9yYWxsIGIgYyA6IGJvb2wsCiAgICBvcmIKICAg
ICAgKGFuZGIgYiBjKQogICAgICAob3JiIChuZWdiIGIpCiAgICAgICAgICAgICAgIChuZWdiIGMp
KQogID0gdHJ1ZS4KUHJvb2YuCiAgaW50cm9zIGIgYy4KICBkZXN0cnVjdCBiLgogIGRlc3RydWN0
IGM7IHNpbXBsOyByZWZsZXhpdml0eS4KICBzaW1wbC4gcmVmbGV4aXZpdHkuClFlZC4KCigqIFRo
ZW9yZW0gbXVsdF9jb21tX2xlbW1hIDogZm9yYWxsIG4gbSwgKikKKCogICAgIG0gKiBTIG4gPSBt
ICsgbSAqIG4uICopCigqIFRoZW9yZW0gbXVsdF9jb21tIDogZm9yYWxsIG0gbiA6IG5hdCwgKikK
KCogICBtICogbiA9IG4gKiBtLiAqKQoKVGhlb3JlbSBtdWx0X3BsdXNfZGlzdHJfciA6IGZvcmFs
bCBuIG0gcCA6IG5hdCwKICAobiArIG0pICogcCA9IChuICogcCkgKyAobSAqIHApLgpQcm9vZi4K
ICBpbnRyb3MuCiAgaW5kdWN0aW9uIHAgYXMgW3xxXS4KICByZXdyaXRlIC0+IG11bHRfMF9yLgog
IHJld3JpdGUgLT4gbXVsdF8wX3IuCiAgcmV3cml0ZSAtPiBtdWx0XzBfci4KICBzaW1wbC4gcmVm
bGV4aXZpdHkuCiAgcmV3cml0ZSAtPiBtdWx0X2NvbW1fbGVtbWEuCiAgcmV3cml0ZSAtPiBtdWx0
X2NvbW1fbGVtbWEuCiAgcmV3cml0ZSAtPiBtdWx0X2NvbW1fbGVtbWEuCiAgcmV3cml0ZSAtPiBw
bHVzX3N3YXAuCiAgcmV3cml0ZSAtPiBJSHEuCiAgcmV3cml0ZSA8LSBwbHVzX2Fzc29jLgogIHJl
d3JpdGUgPC0gcGx1c19hc3NvYy4KICByZXdyaXRlIC0+IHBsdXNfc3dhcC4KICByZWZsZXhpdml0
eS4KUWVkLgoKVGhlb3JlbSBtdWx0X2Fzc29jIDogZm9yYWxsIG4gbSBwIDogbmF0LAogIG4gKiAo
bSAqIHApID0gKG4gKiBtKSAqIHAuClByb29mLgogICgqIEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRl
ZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGJlcV9u
YXRfcmVmbCkgICopCigqKiBQcm92ZSB0aGUgZm9sbG93aW5nIHRoZW9yZW0uICAoUHV0dGluZyB0
aGUgW3RydWVdIG9uIHRoZSBsZWZ0LWhhbmQKICAgIHNpZGUgb2YgdGhlIGVxdWFsaXR5IG1heSBs
b29rIG9kZCwgYnV0IHRoaXMgaXMgaG93IHRoZSB0aGVvcmVtIGlzCiAgICBzdGF0ZWQgaW4gdGhl
IENvcSBzdGFuZGFyZCBsaWJyYXJ5LCBzbyB3ZSBmb2xsb3cgc3VpdC4gIFJld3JpdGluZwogICAg
d29ya3MgZXF1YWxseSB3ZWxsIGluIGVpdGhlciBkaXJlY3Rpb24sIHNvIHdlIHdpbGwgaGF2ZSBu
byBwcm9ibGVtCiAgICB1c2luZyB0aGUgdGhlb3JlbSBubyBtYXR0ZXIgd2hpY2ggd2F5IHdlIHN0
YXRlIGl0LikgKikKClRoZW9yZW0gYmVxX25hdF9yZWZsIDogZm9yYWxsIG4gOiBuYXQsCiAgdHJ1
ZSA9IGJlcV9uYXQgbiBuLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQuCigq
KiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDIgc3RhcnMsIG9wdGlvbmFsIChwbHVzX3N3YXAn
KSAgKikKKCoqIFRoZSBbcmVwbGFjZV0gdGFjdGljIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBhIHBh
cnRpY3VsYXIgc3VidGVybSB0bwogICByZXdyaXRlIGFuZCB3aGF0IHlvdSB3YW50IGl0IHJld3Jp
dHRlbiB0bzogW3JlcGxhY2UgKHQpIHdpdGggKHUpXQogICByZXBsYWNlcyAoYWxsIGNvcGllcyBv
ZikgZXhwcmVzc2lvbiBbdF0gaW4gdGhlIGdvYWwgYnkgZXhwcmVzc2lvbgogICBbdV0sIGFuZCBn
ZW5lcmF0ZXMgW3QgPSB1XSBhcyBhbiBhZGRpdGlvbmFsIHN1YmdvYWwuIFRoaXMgaXMgb2Z0ZW4K
ICAgdXNlZnVsIHdoZW4gYSBwbGFpbiBbcmV3cml0ZV0gYWN0cyBvbiB0aGUgd3JvbmcgcGFydCBv
ZiB0aGUgZ29hbC4KCiAgIFVzZSB0aGUgW3JlcGxhY2VdIHRhY3RpYyB0byBkbyBhIHByb29mIG9m
IFtwbHVzX3N3YXAnXSwganVzdCBsaWtlCiAgIFtwbHVzX3N3YXBdIGJ1dCB3aXRob3V0IG5lZWRp
bmcgW2Fzc2VydCAobiArIG0gPSBtICsgbildLiAqKQoKVGhlb3JlbSBwbHVzX3N3YXAnIDogZm9y
YWxsIG4gbSBwIDogbmF0LAogIG4gKyAobSArIHApID0gbSArIChuICsgcCkuClByb29mLgogICgq
IEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVyY2lzZTog
MyBzdGFycywgcmVjb21tZW5kZWQgKGJpbmFyeV9jb21tdXRlKSAgKikKKCoqIFJlY2FsbCB0aGUg
W2luY3JdIGFuZCBbYmluX3RvX25hdF0gZnVuY3Rpb25zIHRoYXQgeW91CiAgICB3cm90ZSBmb3Ig
dGhlIFtiaW5hcnldIGV4ZXJjaXNlIGluIHRoZSBbQmFzaWNzXSBjaGFwdGVyLiAgUHJvdmUKICAg
IHRoYXQgdGhlIGZvbGxvd2luZyBkaWFncmFtIGNvbW11dGVzOgoKICAgICAgICAgICAgICAgYmlu
IC0tLS0tLS0tLSBpbmNyIC0tLS0tLS0+IGJpbgogICAgICAgICAgICAgICAgfCAgICAgICAgICAg
ICAgICAgICAgICAgICAgIHwKICAgICAgICAgICAgYmluX3RvX25hdCAgICAgICAgICAgICAgICAg
IGJpbl90b19uYXQKICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8
CiAgICAgICAgICAgICAgICB2ICAgICAgICAgICAgICAgICAgICAgICAgICAgdgogICAgICAgICAg
ICAgICBuYXQgLS0tLS0tLS0tLSBTIC0tLS0tLS0tLT4gbmF0CgogICAgVGhhdCBpcywgaW5jcmVt
ZW50aW5nIGEgYmluYXJ5IG51bWJlciBhbmQgdGhlbiBjb252ZXJ0aW5nIGl0IHRvIAogICAgYSAo
dW5hcnkpIG5hdHVyYWwgbnVtYmVyIHlpZWxkcyB0aGUgc2FtZSByZXN1bHQgYXMgZmlyc3QgY29u
dmVydGluZwogICAgaXQgdG8gYSBuYXR1cmFsIG51bWJlciBhbmQgdGhlbiBpbmNyZW1lbnRpbmcu
ICAKICAgIE5hbWUgeW91ciB0aGVvcmVtIFtiaW5fdG9fbmF0X3ByZXNfaW5jcl0gKCJwcmVzIiBm
b3IgInByZXNlcnZlcyIpLgoKICAgIEJlZm9yZSB5b3Ugc3RhcnQgd29ya2luZyBvbiB0aGlzIGV4
ZXJjaXNlLCBwbGVhc2UgY29weSB0aGUKICAgIGRlZmluaXRpb25zIGZyb20geW91ciBzb2x1dGlv
biB0byB0aGUgW2JpbmFyeV0gZXhlcmNpc2UgaGVyZSBzbwogICAgdGhhdCB0aGlzIGZpbGUgY2Fu
IGJlIGdyYWRlZCBvbiBpdHMgb3duLiAgSWYgeW91IGZpbmQgeW91cnNlbGYKICAgIHdhbnRpbmcg
dG8gY2hhbmdlIHlvdXIgb3JpZ2luYWwgZGVmaW5pdGlvbnMgdG8gbWFrZSB0aGUgcHJvcGVydHkK
ICAgIGVhc2llciB0byBwcm92ZSwgZmVlbCBmcmVlIHRvIGRvIHNvISAqKQoKKCogRklMTCBJTiBI
RVJFICopCigqKiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDUgc3RhcnMsIGFkdmFuY2VkIChi
aW5hcnlfaW52ZXJzZSkgICopCigqKiBUaGlzIGV4ZXJjaXNlIGlzIGEgY29udGludWF0aW9uIG9m
IHRoZSBwcmV2aW91cyBleGVyY2lzZSBhYm91dAogICAgYmluYXJ5IG51bWJlcnMuICBZb3Ugd2ls
bCBuZWVkIHlvdXIgZGVmaW5pdGlvbnMgYW5kIHRoZW9yZW1zIGZyb20KICAgIHRoZXJlIHRvIGNv
bXBsZXRlIHRoaXMgb25lLgoKICAgIChhKSBGaXJzdCwgd3JpdGUgYSBmdW5jdGlvbiB0byBjb252
ZXJ0IG5hdHVyYWwgbnVtYmVycyB0byBiaW5hcnkKICAgICAgICBudW1iZXJzLiAgVGhlbiBwcm92
ZSB0aGF0IHN0YXJ0aW5nIHdpdGggYW55IG5hdHVyYWwgbnVtYmVyLAogICAgICAgIGNvbnZlcnRp
bmcgdG8gYmluYXJ5LCB0aGVuIGNvbnZlcnRpbmcgYmFjayB5aWVsZHMgdGhlIHNhbWUKICAgICAg
ICBuYXR1cmFsIG51bWJlciB5b3Ugc3RhcnRlZCB3aXRoLgoKICAgIChiKSBZb3UgbWlnaHQgbmF0
dXJhbGx5IHRoaW5rIHRoYXQgd2Ugc2hvdWxkIGFsc28gcHJvdmUgdGhlCiAgICAgICAgb3Bwb3Np
dGUgZGlyZWN0aW9uOiB0aGF0IHN0YXJ0aW5nIHdpdGggYSBiaW5hcnkgbnVtYmVyLAogICAgICAg
IGNvbnZlcnRpbmcgdG8gYSBuYXR1cmFsLCBhbmQgdGhlbiBiYWNrIHRvIGJpbmFyeSB5aWVsZHMg
dGhlCiAgICAgICAgc2FtZSBudW1iZXIgd2Ugc3RhcnRlZCB3aXRoLiAgSG93ZXZlciwgdGhpcyBp
cyBub3QgdHJ1ZSEKICAgICAgICBFeHBsYWluIHdoYXQgdGhlIHByb2JsZW0gaXMuCgogICAgKGMp
IERlZmluZSBhICJkaXJlY3QiIG5vcm1hbGl6YXRpb24gZnVuY3Rpb24gLS0gaS5lLiwgYSBmdW5j
dGlvbgogICAgICAgIFtub3JtYWxpemVdIGZyb20gYmluYXJ5IG51bWJlcnMgdG8gYmluYXJ5IG51
bWJlcnMgc3VjaCB0aGF0LAogICAgICAgIGZvciBhbnkgYmluYXJ5IG51bWJlciBiLCBjb252ZXJ0
aW5nIHRvIGEgbmF0dXJhbCBhbmQgdGhlbiBiYWNrCiAgICAgICAgdG8gYmluYXJ5IHlpZWxkcyBb
KG5vcm1hbGl6ZSBiKV0uICBQcm92ZSBpdC4gIChXYXJuaW5nOiBUaGlzCiAgICAgICAgcGFydCBp
cyB0cmlja3khKQoKICAgIEFnYWluLCBmZWVsIGZyZWUgdG8gY2hhbmdlIHlvdXIgZWFybGllciBk
ZWZpbml0aW9ucyBpZiB0aGlzIGhlbHBzCiAgICBoZXJlLiAqKQoKKCogRklMTCBJTiBIRVJFICop
CigqKiBbXSAqKQoKKCogIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgKikKKCoqICogRm9ybWFsIHZzLiBJbmZvcm1hbCBQcm9v
ZiAoT3B0aW9uYWwpICopCgooKiogIl9JbmZvcm1hbCBwcm9vZnMgYXJlIGFsZ29yaXRobXM7IGZv
cm1hbCBwcm9vZnMgYXJlIGNvZGVfLiIgKikKCigqKiBUaGUgcXVlc3Rpb24gb2Ygd2hhdCBjb25z
dGl0dXRlcyBhIHByb29mIG9mIGEgbWF0aGVtYXRpY2FsCiAgICBjbGFpbSBoYXMgY2hhbGxlbmdl
ZCBwaGlsb3NvcGhlcnMgZm9yIG1pbGxlbm5pYSwgYnV0IGEgcm91Z2ggYW5kCiAgICByZWFkeSBk
ZWZpbml0aW9uIGNvdWxkIGJlIHRoaXM6IEEgcHJvb2Ygb2YgYSBtYXRoZW1hdGljYWwKICAgIHBy
b3Bvc2l0aW9uIFtQXSBpcyBhIHdyaXR0ZW4gKG9yIHNwb2tlbikgdGV4dCB0aGF0IGluc3RpbGxz
IGluIHRoZQogICAgcmVhZGVyIG9yIGhlYXJlciB0aGUgY2VydGFpbnR5IHRoYXQgW1BdIGlzIHRy
dWUuICBUaGF0IGlzLCBhIHByb29mCiAgICBpcyBhbiBhY3Qgb2YgY29tbXVuaWNhdGlvbi4KCiAg
ICBBY3RzIG9mIGNvbW11bmljYXRpb24gbWF5IGludm9sdmUgZGlmZmVyZW50IHNvcnRzIG9mIHJl
YWRlcnMuICBPbgogICAgb25lIGhhbmQsIHRoZSAicmVhZGVyIiBjYW4gYmUgYSBwcm9ncmFtIGxp
a2UgQ29xLCBpbiB3aGljaCBjYXNlCiAgICB0aGUgImJlbGllZiIgdGhhdCBpcyBpbnN0aWxsZWQg
aXMgdGhhdCBbUF0gY2FuIGJlIG1lY2hhbmljYWxseQogICAgZGVyaXZlZCBmcm9tIGEgY2VydGFp
biBzZXQgb2YgZm9ybWFsIGxvZ2ljYWwgcnVsZXMsIGFuZCB0aGUgcHJvb2YKICAgIGlzIGEgcmVj
aXBlIHRoYXQgZ3VpZGVzIHRoZSBwcm9ncmFtIGluIGNoZWNraW5nIHRoaXMgZmFjdC4gIFN1Y2gK
ICAgIHJlY2lwZXMgYXJlIF9mb3JtYWxfIHByb29mcy4KCiAgICBBbHRlcm5hdGl2ZWx5LCB0aGUg
cmVhZGVyIGNhbiBiZSBhIGh1bWFuIGJlaW5nLCBpbiB3aGljaCBjYXNlIHRoZQogICAgcHJvb2Yg
d2lsbCBiZSB3cml0dGVuIGluIEVuZ2xpc2ggb3Igc29tZSBvdGhlciBuYXR1cmFsIGxhbmd1YWdl
LAogICAgYW5kIHdpbGwgdGh1cyBuZWNlc3NhcmlseSBiZSBfaW5mb3JtYWxfLiAgSGVyZSwgdGhl
IGNyaXRlcmlhIGZvcgogICAgc3VjY2VzcyBhcmUgbGVzcyBjbGVhcmx5IHNwZWNpZmllZC4gIEEg
InZhbGlkIiBwcm9vZiBpcyBvbmUgdGhhdAogICAgbWFrZXMgdGhlIHJlYWRlciBiZWxpZXZlIFtQ
XS4gIEJ1dCB0aGUgc2FtZSBwcm9vZiBtYXkgYmUgcmVhZCBieQogICAgbWFueSBkaWZmZXJlbnQg
cmVhZGVycywgc29tZSBvZiB3aG9tIG1heSBiZSBjb252aW5jZWQgYnkgYQogICAgcGFydGljdWxh
ciB3YXkgb2YgcGhyYXNpbmcgdGhlIGFyZ3VtZW50LCB3aGlsZSBvdGhlcnMgbWF5IG5vdCBiZS4K
ICAgIFNvbWUgcmVhZGVycyBtYXkgYmUgcGFydGljdWxhcmx5IHBlZGFudGljLCBpbmV4cGVyaWVu
Y2VkLCBvciBqdXN0CiAgICBwbGFpbiB0aGljay1oZWFkZWQ7IHRoZSBvbmx5IHdheSB0byBjb252
aW5jZSB0aGVtIHdpbGwgYmUgdG8gbWFrZQogICAgdGhlIGFyZ3VtZW50IGluIHBhaW5zdGFraW5n
IGRldGFpbC4gIEJ1dCBvdGhlciByZWFkZXJzLCBtb3JlCiAgICBmYW1pbGlhciBpbiB0aGUgYXJl
YSwgbWF5IGZpbmQgYWxsIHRoaXMgZGV0YWlsIHNvIG92ZXJ3aGVsbWluZwogICAgdGhhdCB0aGV5
IGxvc2UgdGhlIG92ZXJhbGwgdGhyZWFkOyBhbGwgdGhleSB3YW50IGlzIHRvIGJlIHRvbGQgdGhl
CiAgICBtYWluIGlkZWFzLCBzaW5jZSBpdCBpcyBlYXNpZXIgZm9yIHRoZW0gdG8gZmlsbCBpbiB0
aGUgZGV0YWlscyBmb3IKICAgIHRoZW1zZWx2ZXMgdGhhbiB0byB3YWRlIHRocm91Z2ggYSB3cml0
dGVuIHByZXNlbnRhdGlvbiBvZiB0aGVtLgogICAgVWx0aW1hdGVseSwgdGhlcmUgaXMgbm8gdW5p
dmVyc2FsIHN0YW5kYXJkLCBiZWNhdXNlIHRoZXJlIGlzIG5vCiAgICBzaW5nbGUgd2F5IG9mIHdy
aXRpbmcgYW4gaW5mb3JtYWwgcHJvb2YgdGhhdCBpcyBndWFyYW50ZWVkIHRvCiAgICBjb252aW5j
ZSBldmVyeSBjb25jZWl2YWJsZSByZWFkZXIuCgogICAgSW4gcHJhY3RpY2UsIGhvd2V2ZXIsIG1h
dGhlbWF0aWNpYW5zIGhhdmUgZGV2ZWxvcGVkIGEgcmljaCBzZXQgb2YKICAgIGNvbnZlbnRpb25z
IGFuZCBpZGlvbXMgZm9yIHdyaXRpbmcgYWJvdXQgY29tcGxleCBtYXRoZW1hdGljYWwKICAgIG9i
amVjdHMgdGhhdCAtLSBhdCBsZWFzdCB3aXRoaW4gYSBjZXJ0YWluIGNvbW11bml0eSAtLSBtYWtl
CiAgICBjb21tdW5pY2F0aW9uIGZhaXJseSByZWxpYWJsZS4gIFRoZSBjb252ZW50aW9ucyBvZiB0
aGlzIHN0eWxpemVkCiAgICBmb3JtIG9mIGNvbW11bmljYXRpb24gZ2l2ZSBhIGZhaXJseSBjbGVh
ciBzdGFuZGFyZCBmb3IganVkZ2luZwogICAgcHJvb2ZzIGdvb2Qgb3IgYmFkLgoKICAgIEJlY2F1
c2Ugd2UgYXJlIHVzaW5nIENvcSBpbiB0aGlzIGNvdXJzZSwgd2Ugd2lsbCBiZSB3b3JraW5nCiAg
ICBoZWF2aWx5IHdpdGggZm9ybWFsIHByb29mcy4gIEJ1dCB0aGlzIGRvZXNuJ3QgbWVhbiB3ZSBj
YW4KICAgIGNvbXBsZXRlbHkgZm9yZ2V0IGFib3V0IGluZm9ybWFsIG9uZXMhICBGb3JtYWwgcHJv
b2ZzIGFyZSB1c2VmdWwKICAgIGluIG1hbnkgd2F5cywgYnV0IHRoZXkgYXJlIF9ub3RfIHZlcnkg
ZWZmaWNpZW50IHdheXMgb2YKICAgIGNvbW11bmljYXRpbmcgaWRlYXMgYmV0d2VlbiBodW1hbiBi
ZWluZ3MuICopCgooKiogRm9yIGV4YW1wbGUsIGhlcmUgaXMgYSBwcm9vZiB0aGF0IGFkZGl0aW9u
IGlzIGFzc29jaWF0aXZlOiAqKQoKVGhlb3JlbSBwbHVzX2Fzc29jJyA6IGZvcmFsbCBuIG0gcCA6
IG5hdCwKICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgpQcm9vZi4gaW50cm9zIG4gbSBwLiBp
bmR1Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4gcmVmbGV4aXZpdHkuCiAgc2ltcGwuIHJld3JpdGUg
LT4gSUhuJy4gcmVmbGV4aXZpdHkuICBRZWQuCgooKiogQ29xIGlzIHBlcmZlY3RseSBoYXBweSB3
aXRoIHRoaXMuICBGb3IgYSBodW1hbiwgaG93ZXZlciwgaXQKICAgIGlzIGRpZmZpY3VsdCB0byBt
YWtlIG11Y2ggc2Vuc2Ugb2YgaXQuICBXZSBjYW4gdXNlIGNvbW1lbnRzIGFuZAogICAgYnVsbGV0
cyB0byBzaG93IHRoZSBzdHJ1Y3R1cmUgYSBsaXR0bGUgbW9yZSBjbGVhcmx5Li4uICopCgpUaGVv
cmVtIHBsdXNfYXNzb2MnJyA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBuICsgKG0gKyBwKSA9IChu
ICsgbSkgKyBwLgpQcm9vZi4KICBpbnRyb3MgbiBtIHAuIGluZHVjdGlvbiBuIGFzIFt8IG4nIElI
biddLgogIC0gKCogbiA9IDAgKikKICAgIHJlZmxleGl2aXR5LgogIC0gKCogbiA9IFMgbicgKikK
ICAgIHNpbXBsLiByZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5LiAgIFFlZC4KCigqKiAuLi4g
YW5kIGlmIHlvdSdyZSB1c2VkIHRvIENvcSB5b3UgbWF5IGJlIGFibGUgdG8gc3RlcAogICAgdGhy
b3VnaCB0aGUgdGFjdGljcyBvbmUgYWZ0ZXIgdGhlIG90aGVyIGluIHlvdXIgbWluZCBhbmQgaW1h
Z2luZQogICAgdGhlIHN0YXRlIG9mIHRoZSBjb250ZXh0IGFuZCBnb2FsIHN0YWNrIGF0IGVhY2gg
cG9pbnQsIGJ1dCBpZiB0aGUKICAgIHByb29mIHdlcmUgZXZlbiBhIGxpdHRsZSBiaXQgbW9yZSBj
b21wbGljYXRlZCB0aGlzIHdvdWxkIGJlIG5leHQKICAgIHRvIGltcG9zc2libGUuCgogICAgQSAo
cGVkYW50aWMpIG1hdGhlbWF0aWNpYW4gbWlnaHQgd3JpdGUgdGhlIHByb29mIHNvbWV0aGluZyBs
aWtlCiAgICB0aGlzOiAqKQoKKCoqIC0gX1RoZW9yZW1fOiBGb3IgYW55IFtuXSwgW21dIGFuZCBb
cF0sCgogICAgICBuICsgKG0gKyBwKSA9IChuICsgbSkgKyBwLgoKICAgIF9Qcm9vZl86IEJ5IGlu
ZHVjdGlvbiBvbiBbbl0uCgogICAgLSBGaXJzdCwgc3VwcG9zZSBbbiA9IDBdLiAgV2UgbXVzdCBz
aG93CgogICAgICAgIDAgKyAobSArIHApID0gKDAgKyBtKSArIHAuCgogICAgICBUaGlzIGZvbGxv
d3MgZGlyZWN0bHkgZnJvbSB0aGUgZGVmaW5pdGlvbiBvZiBbK10uCgogICAgLSBOZXh0LCBzdXBw
b3NlIFtuID0gUyBuJ10sIHdoZXJlCgogICAgICAgIG4nICsgKG0gKyBwKSA9IChuJyArIG0pICsg
cC4KCiAgICAgIFdlIG11c3Qgc2hvdwoKICAgICAgICAoUyBuJykgKyAobSArIHApID0gKChTIG4n
KSArIG0pICsgcC4KCiAgICAgIEJ5IHRoZSBkZWZpbml0aW9uIG9mIFsrXSwgdGhpcyBmb2xsb3dz
IGZyb20KCiAgICAgICAgUyAobicgKyAobSArIHApKSA9IFMgKChuJyArIG0pICsgcCksCgogICAg
ICB3aGljaCBpcyBpbW1lZGlhdGUgZnJvbSB0aGUgaW5kdWN0aW9uIGh5cG90aGVzaXMuICBfUWVk
Xy4gKikKCgooKiogVGhlIG92ZXJhbGwgZm9ybSBvZiB0aGUgcHJvb2YgaXMgYmFzaWNhbGx5IHNp
bWlsYXIsIGFuZCBvZgogICAgY291cnNlIHRoaXMgaXMgbm8gYWNjaWRlbnQ6IENvcSBoYXMgYmVl
biBkZXNpZ25lZCBzbyB0aGF0IGl0cwogICAgW2luZHVjdGlvbl0gdGFjdGljIGdlbmVyYXRlcyB0
aGUgc2FtZSBzdWItZ29hbHMsIGluIHRoZSBzYW1lCiAgICBvcmRlciwgYXMgdGhlIGJ1bGxldCBw
b2ludHMgdGhhdCBhIG1hdGhlbWF0aWNpYW4gd291bGQgd3JpdGUuICBCdXQKICAgIHRoZXJlIGFy
ZSBzaWduaWZpY2FudCBkaWZmZXJlbmNlcyBvZiBkZXRhaWw6IHRoZSBmb3JtYWwgcHJvb2YgaXMK
ICAgIG11Y2ggbW9yZSBleHBsaWNpdCBpbiBzb21lIHdheXMgKGUuZy4sIHRoZSB1c2Ugb2YgW3Jl
ZmxleGl2aXR5XSkKICAgIGJ1dCBtdWNoIGxlc3MgZXhwbGljaXQgaW4gb3RoZXJzIChpbiBwYXJ0
aWN1bGFyLCB0aGUgInByb29mIHN0YXRlIgogICAgYXQgYW55IGdpdmVuIHBvaW50IGluIHRoZSBD
b3EgcHJvb2YgaXMgY29tcGxldGVseSBpbXBsaWNpdCwKICAgIHdoZXJlYXMgdGhlIGluZm9ybWFs
IHByb29mIHJlbWluZHMgdGhlIHJlYWRlciBzZXZlcmFsIHRpbWVzIHdoZXJlCiAgICB0aGluZ3Mg
c3RhbmQpLiAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDIgc3RhcnMsIGFkdmFuY2VkLCByZWNvbW1l
bmRlZCAocGx1c19jb21tX2luZm9ybWFsKSAgKikKKCoqIFRyYW5zbGF0ZSB5b3VyIHNvbHV0aW9u
IGZvciBbcGx1c19jb21tXSBpbnRvIGFuIGluZm9ybWFsIHByb29mOgoKICAgIFRoZW9yZW06IEFk
ZGl0aW9uIGlzIGNvbW11dGF0aXZlLgoKICAgIFByb29mOiAoKiBGSUxMIElOIEhFUkUgKikKKikK
KCoqIFtdICopCgooKiogKioqKiBFeGVyY2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGJlcV9uYXRf
cmVmbF9pbmZvcm1hbCkgICopCigqKiBXcml0ZSBhbiBpbmZvcm1hbCBwcm9vZiBvZiB0aGUgZm9s
bG93aW5nIHRoZW9yZW0sIHVzaW5nIHRoZQogICAgaW5mb3JtYWwgcHJvb2Ygb2YgW3BsdXNfYXNz
b2NdIGFzIGEgbW9kZWwuICBEb24ndCBqdXN0CiAgICBwYXJhcGhyYXNlIHRoZSBDb3EgdGFjdGlj
cyBpbnRvIEVuZ2xpc2ghCgogICAgVGhlb3JlbTogW3RydWUgPSBiZXFfbmF0IG4gbl0gZm9yIGFu
eSBbbl0uCgogICAgUHJvb2Y6ICgqIEZJTEwgSU4gSEVSRSAqKQpbXSAqKQoKKCoqICREYXRlOiAy
MDE2LTA1LTI2IDE2OjE3OjE5IC0wNDAwIChUaHUsIDI2IE1heSAyMDE2KSAkICopCgo=
(*UHIDE*)