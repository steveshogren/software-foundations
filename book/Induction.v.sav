(*HIDE*)Cg==
(*UHIDE*)

(** * Induction: Proof by Induction *)

(** First, we import all of our definitions from the previous
    chapter. *)

Require Export chap1.

(** For the [Require Export] to work, you first need to use
    [coqc] to compile [Basics.v] into [Basics.vo].  This is like
    making a .class file from a .java file, or a .o file from a .c
    file.  There are two ways to do it:

     - In CoqIDE:

         Open [Basics.v].  In the "Compile" menu, click on "Compile
         Buffer".

     - From the command line:

         Run [coqc Basics.v]

    *)

(* ################################################################# *)
(** * Proof by Induction *)

(** We proved in the last chapter that [0] is a neutral element
    for [+] on the left using an easy argument based on
    simplification.  The fact that it is also a neutral element on the
    _right_... *)

Theorem plus_n_O_firsttry : forall n:nat,
  n = n + 0.

(** ... cannot be proved in the same simple way.  Just applying
  [reflexivity] doesn't work, since the [n] in [n + 0] is an arbitrary
  unknown number, so the [match] in the definition of [+] can't be
  simplified.  *)

Proof.
  intros n.
  simpl. 
Abort.

(** And reasoning by cases using [destruct n] doesn't get us much
   further: the branch of the case analysis where we assume [n = 0]
   goes through fine, but in the branch where [n = S n'] for some [n'] we
   get stuck in exactly the same way.  We could use [destruct n'] to
   get one step further, but, since [n] can be arbitrarily large, if we
   try to keep on like this we'll never be done. *)


Theorem plus_n_O_secondtry : forall n:nat,
  n = n + 0.
Proof.
  intros n. destruct n as [| n'].
  - (* n = 0 *)
    reflexivity. (* so far so good... *)
  - (* n = S n' *)
    simpl.       (* ...but here we are stuck again *)
Abort.

(** To prove interesting facts about numbers, lists, and other
    inductively defined sets, we usually need a more powerful
    reasoning principle: _induction_.

    Recall (from high school, a discrete math course, etc.) the
    principle of induction over natural numbers: If [P(n)] is some
    proposition involving a natural number [n] and we want to show
    that [P] holds for _all_ numbers [n], we can reason like this:
         - show that [P(O)] holds;
         - show that, for any [n'], if [P(n')] holds, then so does
           [P(S n')];
         - conclude that [P(n)] holds for all [n].

    In Coq, the steps are the same but the order is backwards: we
    begin with the goal of proving [P(n)] for all [n] and break it
    down (by applying the [induction] tactic) into two separate
    subgoals: first showing [P(O)] and then showing [P(n') -> P(S
    n')].  Here's how this works for the theorem at hand: *)

Theorem plus_n_O : forall n:nat, n = n + 0.
Proof.
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)    reflexivity.
  - (* n = S n' *) simpl. rewrite <- IHn'. reflexivity.  Qed.

(** Like [destruct], the [induction] tactic takes an [as...]
    clause that specifies the names of the variables to be introduced
    in the subgoals.  In the first branch, [n] is replaced by [0] and
    the goal becomes [0 + 0 = 0], which follows by simplification.  In
    the second, [n] is replaced by [S n'] and the assumption [n' + 0 =
    n'] is added to the context (with the name [IHn'], i.e., the
    Induction Hypothesis for [n'] -- notice that this name is
    explicitly chosen in the [as...] clause of the call to [induction]
    rather than letting Coq choose one arbitrarily). The goal in this
    case becomes [(S n') + 0 = S n'], which simplifies to [S (n' + 0)
    = S n'], which in turn follows from [IHn']. *)

(* We cannot use destruct here, because it is not forall n, just for that
specific n. After the O case, we are left with the n case, which is exactly what
we are trying to prove! *)
Theorem plus_n_Od : forall n:nat, n = n + 0.
Proof.
  intros n. destruct n.
  - (* n = 0 *)    reflexivity.
  - (* S n = S (n + 0) *) simpl. Admitted.

(* So induction differs in that it works forall n, not just n. It also creates a
hypothesis we can use for our matching. I am still very confused on the concept
of how using the thing we are proving to prove our Theorem makes any sense at
all... :/ *)

Theorem minus_diag : forall n,
  minus n n = 0.
Proof.
  (* WORKED IN CLASS *)
  intros n. induction n as [| n' IHn'].
  - (* n = 0 *)
    simpl. reflexivity.
  - (* n = S n' *)
    simpl. rewrite -> IHn'. reflexivity.  Qed.

(** (The use of the [intros] tactic in these proofs is actually
    redundant.  When applied to a goal that contains quantified
    variables, the [induction] tactic will automatically move them
    into the context as needed.) *)

(** **** Exercise: 2 stars, recommended (basic_induction)  *)
(** Prove the following using induction. You might need previously
    proven results. *)
(* Its becoming more and more apparent that proofs must be built up out of
smaller proofs. A good first step would be to consider what proofs I have
already proven. This book seems to link exercises and examples together: the
solution for a proof is highly likely to be found in the prior proofs. *)

(*HIDE*)CgpUaGVvcmVtIG11bHRfMF9yIDogZm9yYWxsIG46bmF0LAogIG4gKiAwID0gMC4KUHJvb2YuCiAg
aW50cm9zIG4uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddLgogICAgc2ltcGwuIHJlZmxleGl2
aXR5LgogICAgc2ltcGwuIHJld3JpdGUgLT4gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KClRoZW9y
ZW0gYWRkX2VxdWl2IDogZm9yYWxsIG46bmF0LAogIFMobikgPSBTKG4pLgpQcm9vZi4KICBpbnRy
b3Mgbi4gaW5kdWN0aW9uIG4gYXMgW3wgbicgSUhuJ10uCiAgICBzaW1wbC4gcmVmbGV4aXZpdHku
CiAgICBzaW1wbC4gcmVmbGV4aXZpdHkuClFlZC4KCigqIFNldCBQcmludGluZyBBbGwuICopClRo
ZW9yZW0gcGx1c19uX1NtIDogZm9yYWxsIG4gbSA6IG5hdCwgCiAgUyAobiArIG0pID0gbiArIChT
IG0pLgpQcm9vZi4KICAoKiB3aXRob3V0IGludHJvZHVjaW5nIG4gQU5OTk5ORCBtIGhlcmUsIHRo
ZSByZXdyaXRlIGRvZXNuJ3QgbWF0Y2guIGdycnJyICopCiAgaW50cm9zIG4gbS4gaW5kdWN0aW9u
IG4gYXMgW3wgbicgSUhuJ10uCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyBzaW1w
bC4gcmV3cml0ZSA8LSBJSG4nLiByZWZsZXhpdml0eS4gfQpRZWQuIAoKVGhlb3JlbSBwbHVzX2Nv
bW0gOiBmb3JhbGwgbiBtIDogbmF0LAogIG4gKyBtID0gbSArIG4uClByb29mLgogIGludHJvcyBu
IG0uIGluZHVjdGlvbiBuIGFzIFt8IG4nIElIbiddOyBzaW1wbC4KICAoKiBJIGhhdmUgdG8gcmVt
ZW1iZXIgdG8gdXNlIGV4aXN0aW5nIHByb29mcyEgKikKICByZXdyaXRlIDwtIHBsdXNfbl9PLiBy
ZWZsZXhpdml0eS4KICByZXdyaXRlIDwtIHBsdXNfbl9TbS4gcmV3cml0ZSAtPiBJSG4nLiByZWZs
ZXhpdml0eS4KUWVkLgoKVGhlb3JlbSBwbHVzX2Fzc29jIDogZm9yYWxsIG4gbSBwIDogbmF0LAog
IG4gKyAobSArIHApID0gKG4gKyBtKSArIHAuClByb29mLgogIGludHJvcyBuIG0gcC4gaW5kdWN0
aW9uIG4gYXMgW3wgbicgSUhuJ107IHNpbXBsLgogIHJlZmxleGl2aXR5LgogIHJld3JpdGUgPC0g
SUhuJy4gc2ltcGwuIHJlZmxleGl2aXR5LgpRZWQuCigqKiBbXSAqKQoKCigqKiAqKioqIEV4ZXJj
aXNlOiAyIHN0YXJzIChkb3VibGVfcGx1cykgICopCigqKiBDb25zaWRlciB0aGUgZm9sbG93aW5n
IGZ1bmN0aW9uLCB3aGljaCBkb3VibGVzIGl0cyBhcmd1bWVudDogKikKCkZpeHBvaW50IGRvdWJs
ZSAobjpuYXQpIDo9CiAgbWF0Y2ggbiB3aXRoCiAgfCBPID0+IE8KICB8IFMgbicgPT4gUyAoUyAo
ZG91YmxlIG4nKSkKICBlbmQuCgooKiogVXNlIGluZHVjdGlvbiB0byBwcm92ZSB0aGlzIHNpbXBs
ZSBmYWN0IGFib3V0IFtkb3VibGVdOiAqKQoKTGVtbWEgZG91YmxlX3BsdXMgOiBmb3JhbGwgbiwg
ZG91YmxlIG4gPSBuICsgbiAuClByb29mLgogIGludHJvcyBuLiBpbmR1Y3Rpb24gbiBhcyBbfCBu
JyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBzaW1wbC4gcmV3cml0ZSA8LSBwbHVzX25fU20uIHJl
d3JpdGUgPC0gSUhuJy4gcmVmbGV4aXZpdHkuClFlZC4KKCoqIFtdICopCgooKiogKioqKiBFeGVy
Y2lzZTogMiBzdGFycywgb3B0aW9uYWwgKGV2ZW5iX1MpICAqKQooKiogT25lIGluY29udmVuaW5l
bnQgYXNwZWN0IG9mIG91ciBkZWZpbml0aW9uIG9mIFtldmVuYiBuXSBpcyB0aGF0IGl0CiAgICBt
YXkgbmVlZCB0byBwZXJmb3JtIGEgcmVjdXJzaXZlIGNhbGwgb24gW24gLSAyXS4gVGhpcyBtYWtl
cyBwcm9vZnMKICAgIGFib3V0IFtldmVuYiBuXSBoYXJkZXIgd2hlbiBkb25lIGJ5IGluZHVjdGlv
biBvbiBbbl0sIHNpbmNlIHdlIG1heQogICAgbmVlZCBhbiBpbmR1Y3Rpb24gaHlwb3RoZXNpcyBh
Ym91dCBbbiAtIDJdLiBUaGUgZm9sbG93aW5nIGxlbW1hCiAgICBnaXZlcyBhIGJldHRlciBjaGFy
YWN0ZXJpemF0aW9uIG9mIFtldmVuYiAoUyBuKV06ICopCgpUaGVvcmVtIG5lZ2JfZG91YmxlZCA6
IGZvcmFsbCBiIDogYm9vbCwgbmVnYiAobmVnYiBiKSA9IGIuClByb29mLgogIGludHJvcyBiLiBp
bmR1Y3Rpb24gYjsgcmVmbGV4aXZpdHkuClFlZC4KClRoZW9yZW0gZXZlbmJfUyA6IGZvcmFsbCBu
IDogbmF0LAogIGV2ZW5iIChTIG4pID0gbmVnYiAoZXZlbmIgbikuClByb29mLgogIGludHJvcyBu
LiBpbmR1Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4KICByZWZsZXhpdml0eS4KICBpbmR1Y3Rpb24g
bicuCiAgLSB7IHNpbXBsLiByZWZsZXhpdml0eS4gfQogIC0geyByZXdyaXRlIC0+IElIbicuCiAg
ICAgIHJld3JpdGUgLT4gbmVnYl9kb3VibGVkLgogICAgICByZWZsZXhpdml0eS4gfQpRZWQuCigq
KiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDEgc3RhciAoZGVzdHJ1Y3RfaW5kdWN0aW9uKSAg
KikKKCoqIEJyaWVmbHkgZXhwbGFpbiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSB0YWN0aWNz
IFtkZXN0cnVjdF0gCiAgICBhbmQgW2luZHVjdGlvbl0uCgooKiBGSUxMIElOIEhFUkUgKikKKikK
KCoqIFtdICopCgo=
(*UHIDE*)

(* ################################################################# *)
(** * Proofs Within Proofs *)

(** In Coq, as in informal mathematics, large proofs are often
    broken into a sequence of theorems, with later proofs referring to
    earlier theorems.  But sometimes a proof will require some
    miscellaneous fact that is too trivial and of too little general
    interest to bother giving it its own top-level name.  In such
    cases, it is convenient to be able to simply state and prove the
    needed "sub-theorem" right at the point where it is used.  The
    [assert] tactic allows us to do this.  For example, our earlier
    proof of the [mult_0_plus] theorem referred to a previous theorem
    named [plus_O_n].  We could instead use [assert] to state and
    prove [plus_O_n] in-line: *)

Theorem mult_0_plus' : forall n m : nat,
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H: 0 + n = n). { reflexivity. }
  rewrite -> H.
  reflexivity.  Qed.

(** The [assert] tactic introduces two sub-goals.  The first is
    the assertion itself; by prefixing it with [H:] we name the
    assertion [H].  (We can also name the assertion with [as] just as
    we did above with [destruct] and [induction], i.e., [assert (0 + n
    = n) as H].)  Note that we surround the proof of this assertion
    with curly braces [{ ... }], both for readability and so that,
    when using Coq interactively, we can see more easily when we have
    finished this sub-proof.  The second goal is the same as the one
    at the point where we invoke [assert] except that, in the context,
    we now have the assumption [H] that [0 + n = n].  That is,
    [assert] generates one subgoal where we must prove the asserted
    fact and a second subgoal where we can use the asserted fact to
    make progress on whatever we were trying to prove in the first
    place. *)

(** The [assert] tactic is handy in many sorts of situations.  For
    example, suppose we want to prove that [(n + m) + (p + q) = (m +
    n) + (p + q)]. The only difference between the two sides of the
    [=] is that the arguments [m] and [n] to the first inner [+] are
    swapped, so it seems we should be able to use the commutativity of
    addition ([plus_comm]) to rewrite one into the other.  However,
    the [rewrite] tactic is a little stupid about _where_ it applies
    the rewrite.  There are three uses of [+] here, and it turns out
    that doing [rewrite -> plus_comm] will affect only the _outer_
    one... *)

Theorem plus_rearrange_firsttry : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  (* We just need to swap (n + m) for (m + n)...
     it seems like plus_comm should do the trick! *)
  rewrite -> plus_comm.
  (* Doesn't work...Coq rewrote the wrong plus! *)
Abort.

(** To get [plus_comm] to apply at the point where we want it to, we
    can introduce a local lemma stating that [n + m = m + n] (for the
    particular [m] and [n] that we are talking about here), prove this
    lemma using [plus_comm], and then use it to do the desired
    rewrite. *)

Theorem plus_rearrange : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q.
  assert (H: n + m = m + n).
  { rewrite -> plus_comm. reflexivity. }
  rewrite -> H. reflexivity.  Qed.

(* ################################################################# *)
(*HIDE*)CigqKiAqIE1vcmUgRXhlcmNpc2VzICopCgooKiogKioqKiBFeGVyY2lzZTogMyBzdGFycywgcmVj
b21tZW5kZWQgKG11bHRfY29tbSkgICopCigqKiBVc2UgW2Fzc2VydF0gdG8gaGVscCBwcm92ZSB0
aGlzIHRoZW9yZW0uICBZb3Ugc2hvdWxkbid0IG5lZWQgdG8KICAgIHVzZSBpbmR1Y3Rpb24gb24g
W3BsdXNfc3dhcF0uICopCgooKiBUaGVvcmVtIHBsdXNfYXNzb2MgOiBmb3JhbGwgbiBtIHAgOiBu
YXQsICopCigqICAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4gKikKCigqIFRoZW9yZW0gcGx1
c19jb21tIDogZm9yYWxsIG4gbSA6IG5hdCwgKikKKCogICBuICsgbSA9IG0gKyBuLiAqKQoKVGhl
b3JlbSBwbHVzX3N3YXAgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkgPSBtICsg
KG4gKyBwKS4KUHJvb2YuCiAgaW50cm9zIG4gbSBwLgogIHJld3JpdGUgLT4gcGx1c19jb21tLgog
IHJld3JpdGUgPC0gcGx1c19hc3NvYy4KICBhc3NlcnQgKEg6IHAgKyBuID0gbiArIHApLgogIHsg
cmV3cml0ZSAtPiBwbHVzX2NvbW0uIHJlZmxleGl2aXR5LiB9CiAgcmV3cml0ZSAtPiBILiAgCiAg
cmVmbGV4aXZpdHkuClFlZC4KCigqKiBOb3cgcHJvdmUgY29tbXV0YXRpdml0eSBvZiBtdWx0aXBs
aWNhdGlvbi4gIChZb3Ugd2lsbCBwcm9iYWJseQogICAgbmVlZCB0byBkZWZpbmUgYW5kIHByb3Zl
IGEgc2VwYXJhdGUgc3Vic2lkaWFyeSB0aGVvcmVtIHRvIGJlIHVzZWQKICAgIGluIHRoZSBwcm9v
ZiBvZiB0aGlzIG9uZS4gIFlvdSBtYXkgZmluZCB0aGF0IFtwbHVzX3N3YXBdIGNvbWVzIGluCiAg
ICBoYW5keS4pICopCgpUaGVvcmVtIG11bHRfMV9uIDogZm9yYWxsIG4sIG4gKiAxID0gbi4KUHJv
b2YuCiAgaW50cm9zIG4uCiAgaW5kdWN0aW9uIG4gYXMgW3wgbiddOyBzaW1wbC4KICByZWZsZXhp
dml0eS4KICByZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5LgpRZWQuCgpUaGVvcmVtIG11bHRf
Y29tbV9sZW1tYSA6IGZvcmFsbCBuIG0sIG0gKiBTIG4gPSBtICsgbSAqIG4uClByb29mLgogIGlu
dHJvcyBuIG0uCiAgaW5kdWN0aW9uIG0gYXMgW3wgcF0gOyBzaW1wbC4KICB7IHJlZmxleGl2aXR5
LiB9CiAgeyByZXdyaXRlIC0+IHBsdXNfc3dhcC4gcmV3cml0ZSAtPiBJSHAuIHJlZmxleGl2aXR5
LiB9ClFlZC4KClRoZW9yZW0gbXVsdF9jb21tIDogZm9yYWxsIG0gbiA6IG5hdCwKICBtICogbiA9
IG4gKiBtLgpQcm9vZi4KICBpbnRyb3MgbSBuLgogIGluZHVjdGlvbiBuIGFzIFt8IG4nIF07IHNp
bXBsLgogIHJld3JpdGUgLT4gbXVsdF8wX3IuIHJlZmxleGl2aXR5LgogIHJld3JpdGUgLT4gbXVs
dF9jb21tX2xlbW1hLiByZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5LgpRZWQuCigqKiBbXSAq
KQoKKCoqICoqKiogRXhlcmNpc2U6IDMgc3RhcnMsIG9wdGlvbmFsIChtb3JlX2V4ZXJjaXNlcykg
ICopCigqKiBUYWtlIGEgcGllY2Ugb2YgcGFwZXIuICBGb3IgZWFjaCBvZiB0aGUgZm9sbG93aW5n
IHRoZW9yZW1zLCBmaXJzdAogICAgX3RoaW5rXyBhYm91dCB3aGV0aGVyIChhKSBpdCBjYW4gYmUg
cHJvdmVkIHVzaW5nIG9ubHkKICAgIHNpbXBsaWZpY2F0aW9uIGFuZCByZXdyaXRpbmcsIChiKSBp
dCBhbHNvIHJlcXVpcmVzIGNhc2UKICAgIGFuYWx5c2lzIChbZGVzdHJ1Y3RdKSwgb3IgKGMpIGl0
IGFsc28gcmVxdWlyZXMgaW5kdWN0aW9uLiAgV3JpdGUKICAgIGRvd24geW91ciBwcmVkaWN0aW9u
LiAgVGhlbiBmaWxsIGluIHRoZSBwcm9vZi4gIChUaGVyZSBpcyBubyBuZWVkCiAgICB0byB0dXJu
IGluIHlvdXIgcGllY2Ugb2YgcGFwZXI7IHRoaXMgaXMganVzdCB0byBlbmNvdXJhZ2UgeW91IHRv
CiAgICByZWZsZWN0IGJlZm9yZSB5b3UgaGFjayEpICopCgpUaGVvcmVtIGxlYl9yZWZsIDogZm9y
YWxsIG46bmF0LAogIHRydWUgPSBsZWIgbiBuLgpQcm9vZi4KICBpbnRyb3Mgbi4KICBpbmR1Y3Rp
b24gbiBhcyBbfCBuJ10uCiAgcmVmbGV4aXZpdHkuCiAgc2ltcGwuIHJld3JpdGUgLT4gSUhuJy4g
cmVmbGV4aXZpdHkuClFlZC4KClRoZW9yZW0gemVyb19uYmVxX1MgOiBmb3JhbGwgbjpuYXQsCiAg
YmVxX25hdCAwIChTIG4pID0gZmFsc2UuClByb29mLgogIGludHJvcyBuLiByZWZsZXhpdml0eS4K
UWVkLgoKVGhlb3JlbSBhbmRiX2ZhbHNlX3IgOiBmb3JhbGwgYiA6IGJvb2wsCiAgYW5kYiBiIGZh
bHNlID0gZmFsc2UuClByb29mLgogIGludHJvcyBiLgogIGluZHVjdGlvbiBiIGFzIFt8IGInXTsg
cmVmbGV4aXZpdHkuClFlZC4KClRoZW9yZW0gcGx1c19ibGVfY29tcGF0X2wgOiBmb3JhbGwgbiBt
IHAgOiBuYXQsCiAgbGViIG4gbSA9IHRydWUgLT4gbGViIChwICsgbikgKHAgKyBtKSA9IHRydWUu
ClByb29mLgogICgqIEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gU19uYmVxXzAg
OiBmb3JhbGwgbjpuYXQsCiAgYmVxX25hdCAoUyBuKSAwID0gZmFsc2UuClByb29mLgogICgqIEZJ
TEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gbXVsdF8xX2wgOiBmb3JhbGwgbjpuYXQs
IDEgKiBuID0gbi4KUHJvb2YuCiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVkLgoKVGhlb3Jl
bSBhbGwzX3NwZWMgOiBmb3JhbGwgYiBjIDogYm9vbCwKICAgIG9yYgogICAgICAoYW5kYiBiIGMp
CiAgICAgIChvcmIgKG5lZ2IgYikKICAgICAgICAgICAgICAgKG5lZ2IgYykpCiAgPSB0cnVlLgpQ
cm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQuCgpUaGVvcmVtIG11bHRfcGx1c19k
aXN0cl9yIDogZm9yYWxsIG4gbSBwIDogbmF0LAogIChuICsgbSkgKiBwID0gKG4gKiBwKSArICht
ICogcCkuClByb29mLgogICgqIEZJTEwgSU4gSEVSRSAqKSBBZG1pdHRlZC4KClRoZW9yZW0gbXVs
dF9hc3NvYyA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBuICogKG0gKiBwKSA9IChuICogbSkgKiBw
LgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRtaXR0ZWQuCigqKiBbXSAqKQoKKCoqICoq
KiogRXhlcmNpc2U6IDIgc3RhcnMsIG9wdGlvbmFsIChiZXFfbmF0X3JlZmwpICAqKQooKiogUHJv
dmUgdGhlIGZvbGxvd2luZyB0aGVvcmVtLiAgKFB1dHRpbmcgdGhlIFt0cnVlXSBvbiB0aGUgbGVm
dC1oYW5kCiAgICBzaWRlIG9mIHRoZSBlcXVhbGl0eSBtYXkgbG9vayBvZGQsIGJ1dCB0aGlzIGlz
IGhvdyB0aGUgdGhlb3JlbSBpcwogICAgc3RhdGVkIGluIHRoZSBDb3Egc3RhbmRhcmQgbGlicmFy
eSwgc28gd2UgZm9sbG93IHN1aXQuICBSZXdyaXRpbmcKICAgIHdvcmtzIGVxdWFsbHkgd2VsbCBp
biBlaXRoZXIgZGlyZWN0aW9uLCBzbyB3ZSB3aWxsIGhhdmUgbm8gcHJvYmxlbQogICAgdXNpbmcg
dGhlIHRoZW9yZW0gbm8gbWF0dGVyIHdoaWNoIHdheSB3ZSBzdGF0ZSBpdC4pICopCgpUaGVvcmVt
IGJlcV9uYXRfcmVmbCA6IGZvcmFsbCBuIDogbmF0LAogIHRydWUgPSBiZXFfbmF0IG4gbi4KUHJv
b2YuCiAgKCogRklMTCBJTiBIRVJFICopIEFkbWl0dGVkLgooKiogW10gKikKCigqKiAqKioqIEV4
ZXJjaXNlOiAyIHN0YXJzLCBvcHRpb25hbCAocGx1c19zd2FwJykgICopCigqKiBUaGUgW3JlcGxh
Y2VdIHRhY3RpYyBhbGxvd3MgeW91IHRvIHNwZWNpZnkgYSBwYXJ0aWN1bGFyIHN1YnRlcm0gdG8K
ICAgcmV3cml0ZSBhbmQgd2hhdCB5b3Ugd2FudCBpdCByZXdyaXR0ZW4gdG86IFtyZXBsYWNlICh0
KSB3aXRoICh1KV0KICAgcmVwbGFjZXMgKGFsbCBjb3BpZXMgb2YpIGV4cHJlc3Npb24gW3RdIGlu
IHRoZSBnb2FsIGJ5IGV4cHJlc3Npb24KICAgW3VdLCBhbmQgZ2VuZXJhdGVzIFt0ID0gdV0gYXMg
YW4gYWRkaXRpb25hbCBzdWJnb2FsLiBUaGlzIGlzIG9mdGVuCiAgIHVzZWZ1bCB3aGVuIGEgcGxh
aW4gW3Jld3JpdGVdIGFjdHMgb24gdGhlIHdyb25nIHBhcnQgb2YgdGhlIGdvYWwuCgogICBVc2Ug
dGhlIFtyZXBsYWNlXSB0YWN0aWMgdG8gZG8gYSBwcm9vZiBvZiBbcGx1c19zd2FwJ10sIGp1c3Qg
bGlrZQogICBbcGx1c19zd2FwXSBidXQgd2l0aG91dCBuZWVkaW5nIFthc3NlcnQgKG4gKyBtID0g
bSArIG4pXS4gKikKClRoZW9yZW0gcGx1c19zd2FwJyA6IGZvcmFsbCBuIG0gcCA6IG5hdCwKICBu
ICsgKG0gKyBwKSA9IG0gKyAobiArIHApLgpQcm9vZi4KICAoKiBGSUxMIElOIEhFUkUgKikgQWRt
aXR0ZWQuCigqKiBbXSAqKQoKKCoqICoqKiogRXhlcmNpc2U6IDMgc3RhcnMsIHJlY29tbWVuZGVk
IChiaW5hcnlfY29tbXV0ZSkgICopCigqKiBSZWNhbGwgdGhlIFtpbmNyXSBhbmQgW2Jpbl90b19u
YXRdIGZ1bmN0aW9ucyB0aGF0IHlvdQogICAgd3JvdGUgZm9yIHRoZSBbYmluYXJ5XSBleGVyY2lz
ZSBpbiB0aGUgW0Jhc2ljc10gY2hhcHRlci4gIFByb3ZlCiAgICB0aGF0IHRoZSBmb2xsb3dpbmcg
ZGlhZ3JhbSBjb21tdXRlczoKCiAgICAgICAgICAgICAgIGJpbiAtLS0tLS0tLS0gaW5jciAtLS0t
LS0tPiBiaW4KICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8CiAg
ICAgICAgICAgIGJpbl90b19uYXQgICAgICAgICAgICAgICAgICBiaW5fdG9fbmF0CiAgICAgICAg
ICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgfAogICAgICAgICAgICAgICAgdiAg
ICAgICAgICAgICAgICAgICAgICAgICAgIHYKICAgICAgICAgICAgICAgbmF0IC0tLS0tLS0tLS0g
UyAtLS0tLS0tLS0+IG5hdAoKICAgIFRoYXQgaXMsIGluY3JlbWVudGluZyBhIGJpbmFyeSBudW1i
ZXIgYW5kIHRoZW4gY29udmVydGluZyBpdCB0byAKICAgIGEgKHVuYXJ5KSBuYXR1cmFsIG51bWJl
ciB5aWVsZHMgdGhlIHNhbWUgcmVzdWx0IGFzIGZpcnN0IGNvbnZlcnRpbmcKICAgIGl0IHRvIGEg
bmF0dXJhbCBudW1iZXIgYW5kIHRoZW4gaW5jcmVtZW50aW5nLiAgCiAgICBOYW1lIHlvdXIgdGhl
b3JlbSBbYmluX3RvX25hdF9wcmVzX2luY3JdICgicHJlcyIgZm9yICJwcmVzZXJ2ZXMiKS4KCiAg
ICBCZWZvcmUgeW91IHN0YXJ0IHdvcmtpbmcgb24gdGhpcyBleGVyY2lzZSwgcGxlYXNlIGNvcHkg
dGhlCiAgICBkZWZpbml0aW9ucyBmcm9tIHlvdXIgc29sdXRpb24gdG8gdGhlIFtiaW5hcnldIGV4
ZXJjaXNlIGhlcmUgc28KICAgIHRoYXQgdGhpcyBmaWxlIGNhbiBiZSBncmFkZWQgb24gaXRzIG93
bi4gIElmIHlvdSBmaW5kIHlvdXJzZWxmCiAgICB3YW50aW5nIHRvIGNoYW5nZSB5b3VyIG9yaWdp
bmFsIGRlZmluaXRpb25zIHRvIG1ha2UgdGhlIHByb3BlcnR5CiAgICBlYXNpZXIgdG8gcHJvdmUs
IGZlZWwgZnJlZSB0byBkbyBzbyEgKikKCigqIEZJTEwgSU4gSEVSRSAqKQooKiogW10gKikKCigq
KiAqKioqIEV4ZXJjaXNlOiA1IHN0YXJzLCBhZHZhbmNlZCAoYmluYXJ5X2ludmVyc2UpICAqKQoo
KiogVGhpcyBleGVyY2lzZSBpcyBhIGNvbnRpbnVhdGlvbiBvZiB0aGUgcHJldmlvdXMgZXhlcmNp
c2UgYWJvdXQKICAgIGJpbmFyeSBudW1iZXJzLiAgWW91IHdpbGwgbmVlZCB5b3VyIGRlZmluaXRp
b25zIGFuZCB0aGVvcmVtcyBmcm9tCiAgICB0aGVyZSB0byBjb21wbGV0ZSB0aGlzIG9uZS4KCiAg
ICAoYSkgRmlyc3QsIHdyaXRlIGEgZnVuY3Rpb24gdG8gY29udmVydCBuYXR1cmFsIG51bWJlcnMg
dG8gYmluYXJ5CiAgICAgICAgbnVtYmVycy4gIFRoZW4gcHJvdmUgdGhhdCBzdGFydGluZyB3aXRo
IGFueSBuYXR1cmFsIG51bWJlciwKICAgICAgICBjb252ZXJ0aW5nIHRvIGJpbmFyeSwgdGhlbiBj
b252ZXJ0aW5nIGJhY2sgeWllbGRzIHRoZSBzYW1lCiAgICAgICAgbmF0dXJhbCBudW1iZXIgeW91
IHN0YXJ0ZWQgd2l0aC4KCiAgICAoYikgWW91IG1pZ2h0IG5hdHVyYWxseSB0aGluayB0aGF0IHdl
IHNob3VsZCBhbHNvIHByb3ZlIHRoZQogICAgICAgIG9wcG9zaXRlIGRpcmVjdGlvbjogdGhhdCBz
dGFydGluZyB3aXRoIGEgYmluYXJ5IG51bWJlciwKICAgICAgICBjb252ZXJ0aW5nIHRvIGEgbmF0
dXJhbCwgYW5kIHRoZW4gYmFjayB0byBiaW5hcnkgeWllbGRzIHRoZQogICAgICAgIHNhbWUgbnVt
YmVyIHdlIHN0YXJ0ZWQgd2l0aC4gIEhvd2V2ZXIsIHRoaXMgaXMgbm90IHRydWUhCiAgICAgICAg
RXhwbGFpbiB3aGF0IHRoZSBwcm9ibGVtIGlzLgoKICAgIChjKSBEZWZpbmUgYSAiZGlyZWN0IiBu
b3JtYWxpemF0aW9uIGZ1bmN0aW9uIC0tIGkuZS4sIGEgZnVuY3Rpb24KICAgICAgICBbbm9ybWFs
aXplXSBmcm9tIGJpbmFyeSBudW1iZXJzIHRvIGJpbmFyeSBudW1iZXJzIHN1Y2ggdGhhdCwKICAg
ICAgICBmb3IgYW55IGJpbmFyeSBudW1iZXIgYiwgY29udmVydGluZyB0byBhIG5hdHVyYWwgYW5k
IHRoZW4gYmFjawogICAgICAgIHRvIGJpbmFyeSB5aWVsZHMgWyhub3JtYWxpemUgYildLiAgUHJv
dmUgaXQuICAoV2FybmluZzogVGhpcwogICAgICAgIHBhcnQgaXMgdHJpY2t5ISkKCiAgICBBZ2Fp
biwgZmVlbCBmcmVlIHRvIGNoYW5nZSB5b3VyIGVhcmxpZXIgZGVmaW5pdGlvbnMgaWYgdGhpcyBo
ZWxwcwogICAgaGVyZS4gKikKCigqIEZJTEwgSU4gSEVSRSAqKQooKiogW10gKikKCigqICMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjICopCigqKiAqIEZvcm1hbCB2cy4gSW5mb3JtYWwgUHJvb2YgKE9wdGlvbmFsKSAqKQoKKCoq
ICJfSW5mb3JtYWwgcHJvb2ZzIGFyZSBhbGdvcml0aG1zOyBmb3JtYWwgcHJvb2ZzIGFyZSBjb2Rl
Xy4iICopCgooKiogVGhlIHF1ZXN0aW9uIG9mIHdoYXQgY29uc3RpdHV0ZXMgYSBwcm9vZiBvZiBh
IG1hdGhlbWF0aWNhbAogICAgY2xhaW0gaGFzIGNoYWxsZW5nZWQgcGhpbG9zb3BoZXJzIGZvciBt
aWxsZW5uaWEsIGJ1dCBhIHJvdWdoIGFuZAogICAgcmVhZHkgZGVmaW5pdGlvbiBjb3VsZCBiZSB0
aGlzOiBBIHByb29mIG9mIGEgbWF0aGVtYXRpY2FsCiAgICBwcm9wb3NpdGlvbiBbUF0gaXMgYSB3
cml0dGVuIChvciBzcG9rZW4pIHRleHQgdGhhdCBpbnN0aWxscyBpbiB0aGUKICAgIHJlYWRlciBv
ciBoZWFyZXIgdGhlIGNlcnRhaW50eSB0aGF0IFtQXSBpcyB0cnVlLiAgVGhhdCBpcywgYSBwcm9v
ZgogICAgaXMgYW4gYWN0IG9mIGNvbW11bmljYXRpb24uCgogICAgQWN0cyBvZiBjb21tdW5pY2F0
aW9uIG1heSBpbnZvbHZlIGRpZmZlcmVudCBzb3J0cyBvZiByZWFkZXJzLiAgT24KICAgIG9uZSBo
YW5kLCB0aGUgInJlYWRlciIgY2FuIGJlIGEgcHJvZ3JhbSBsaWtlIENvcSwgaW4gd2hpY2ggY2Fz
ZQogICAgdGhlICJiZWxpZWYiIHRoYXQgaXMgaW5zdGlsbGVkIGlzIHRoYXQgW1BdIGNhbiBiZSBt
ZWNoYW5pY2FsbHkKICAgIGRlcml2ZWQgZnJvbSBhIGNlcnRhaW4gc2V0IG9mIGZvcm1hbCBsb2dp
Y2FsIHJ1bGVzLCBhbmQgdGhlIHByb29mCiAgICBpcyBhIHJlY2lwZSB0aGF0IGd1aWRlcyB0aGUg
cHJvZ3JhbSBpbiBjaGVja2luZyB0aGlzIGZhY3QuICBTdWNoCiAgICByZWNpcGVzIGFyZSBfZm9y
bWFsXyBwcm9vZnMuCgogICAgQWx0ZXJuYXRpdmVseSwgdGhlIHJlYWRlciBjYW4gYmUgYSBodW1h
biBiZWluZywgaW4gd2hpY2ggY2FzZSB0aGUKICAgIHByb29mIHdpbGwgYmUgd3JpdHRlbiBpbiBF
bmdsaXNoIG9yIHNvbWUgb3RoZXIgbmF0dXJhbCBsYW5ndWFnZSwKICAgIGFuZCB3aWxsIHRodXMg
bmVjZXNzYXJpbHkgYmUgX2luZm9ybWFsXy4gIEhlcmUsIHRoZSBjcml0ZXJpYSBmb3IKICAgIHN1
Y2Nlc3MgYXJlIGxlc3MgY2xlYXJseSBzcGVjaWZpZWQuICBBICJ2YWxpZCIgcHJvb2YgaXMgb25l
IHRoYXQKICAgIG1ha2VzIHRoZSByZWFkZXIgYmVsaWV2ZSBbUF0uICBCdXQgdGhlIHNhbWUgcHJv
b2YgbWF5IGJlIHJlYWQgYnkKICAgIG1hbnkgZGlmZmVyZW50IHJlYWRlcnMsIHNvbWUgb2Ygd2hv
bSBtYXkgYmUgY29udmluY2VkIGJ5IGEKICAgIHBhcnRpY3VsYXIgd2F5IG9mIHBocmFzaW5nIHRo
ZSBhcmd1bWVudCwgd2hpbGUgb3RoZXJzIG1heSBub3QgYmUuCiAgICBTb21lIHJlYWRlcnMgbWF5
IGJlIHBhcnRpY3VsYXJseSBwZWRhbnRpYywgaW5leHBlcmllbmNlZCwgb3IganVzdAogICAgcGxh
aW4gdGhpY2staGVhZGVkOyB0aGUgb25seSB3YXkgdG8gY29udmluY2UgdGhlbSB3aWxsIGJlIHRv
IG1ha2UKICAgIHRoZSBhcmd1bWVudCBpbiBwYWluc3Rha2luZyBkZXRhaWwuICBCdXQgb3RoZXIg
cmVhZGVycywgbW9yZQogICAgZmFtaWxpYXIgaW4gdGhlIGFyZWEsIG1heSBmaW5kIGFsbCB0aGlz
IGRldGFpbCBzbyBvdmVyd2hlbG1pbmcKICAgIHRoYXQgdGhleSBsb3NlIHRoZSBvdmVyYWxsIHRo
cmVhZDsgYWxsIHRoZXkgd2FudCBpcyB0byBiZSB0b2xkIHRoZQogICAgbWFpbiBpZGVhcywgc2lu
Y2UgaXQgaXMgZWFzaWVyIGZvciB0aGVtIHRvIGZpbGwgaW4gdGhlIGRldGFpbHMgZm9yCiAgICB0
aGVtc2VsdmVzIHRoYW4gdG8gd2FkZSB0aHJvdWdoIGEgd3JpdHRlbiBwcmVzZW50YXRpb24gb2Yg
dGhlbS4KICAgIFVsdGltYXRlbHksIHRoZXJlIGlzIG5vIHVuaXZlcnNhbCBzdGFuZGFyZCwgYmVj
YXVzZSB0aGVyZSBpcyBubwogICAgc2luZ2xlIHdheSBvZiB3cml0aW5nIGFuIGluZm9ybWFsIHBy
b29mIHRoYXQgaXMgZ3VhcmFudGVlZCB0bwogICAgY29udmluY2UgZXZlcnkgY29uY2VpdmFibGUg
cmVhZGVyLgoKICAgIEluIHByYWN0aWNlLCBob3dldmVyLCBtYXRoZW1hdGljaWFucyBoYXZlIGRl
dmVsb3BlZCBhIHJpY2ggc2V0IG9mCiAgICBjb252ZW50aW9ucyBhbmQgaWRpb21zIGZvciB3cml0
aW5nIGFib3V0IGNvbXBsZXggbWF0aGVtYXRpY2FsCiAgICBvYmplY3RzIHRoYXQgLS0gYXQgbGVh
c3Qgd2l0aGluIGEgY2VydGFpbiBjb21tdW5pdHkgLS0gbWFrZQogICAgY29tbXVuaWNhdGlvbiBm
YWlybHkgcmVsaWFibGUuICBUaGUgY29udmVudGlvbnMgb2YgdGhpcyBzdHlsaXplZAogICAgZm9y
bSBvZiBjb21tdW5pY2F0aW9uIGdpdmUgYSBmYWlybHkgY2xlYXIgc3RhbmRhcmQgZm9yIGp1ZGdp
bmcKICAgIHByb29mcyBnb29kIG9yIGJhZC4KCiAgICBCZWNhdXNlIHdlIGFyZSB1c2luZyBDb3Eg
aW4gdGhpcyBjb3Vyc2UsIHdlIHdpbGwgYmUgd29ya2luZwogICAgaGVhdmlseSB3aXRoIGZvcm1h
bCBwcm9vZnMuICBCdXQgdGhpcyBkb2Vzbid0IG1lYW4gd2UgY2FuCiAgICBjb21wbGV0ZWx5IGZv
cmdldCBhYm91dCBpbmZvcm1hbCBvbmVzISAgRm9ybWFsIHByb29mcyBhcmUgdXNlZnVsCiAgICBp
biBtYW55IHdheXMsIGJ1dCB0aGV5IGFyZSBfbm90XyB2ZXJ5IGVmZmljaWVudCB3YXlzIG9mCiAg
ICBjb21tdW5pY2F0aW5nIGlkZWFzIGJldHdlZW4gaHVtYW4gYmVpbmdzLiAqKQoKKCoqIEZvciBl
eGFtcGxlLCBoZXJlIGlzIGEgcHJvb2YgdGhhdCBhZGRpdGlvbiBpcyBhc3NvY2lhdGl2ZTogKikK
ClRoZW9yZW0gcGx1c19hc3NvYycgOiBmb3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkg
PSAobiArIG0pICsgcC4KUHJvb2YuIGludHJvcyBuIG0gcC4gaW5kdWN0aW9uIG4gYXMgW3wgbicg
SUhuJ10uIHJlZmxleGl2aXR5LgogIHNpbXBsLiByZXdyaXRlIC0+IElIbicuIHJlZmxleGl2aXR5
LiAgUWVkLgoKKCoqIENvcSBpcyBwZXJmZWN0bHkgaGFwcHkgd2l0aCB0aGlzLiAgRm9yIGEgaHVt
YW4sIGhvd2V2ZXIsIGl0CiAgICBpcyBkaWZmaWN1bHQgdG8gbWFrZSBtdWNoIHNlbnNlIG9mIGl0
LiAgV2UgY2FuIHVzZSBjb21tZW50cyBhbmQKICAgIGJ1bGxldHMgdG8gc2hvdyB0aGUgc3RydWN0
dXJlIGEgbGl0dGxlIG1vcmUgY2xlYXJseS4uLiAqKQoKVGhlb3JlbSBwbHVzX2Fzc29jJycgOiBm
b3JhbGwgbiBtIHAgOiBuYXQsCiAgbiArIChtICsgcCkgPSAobiArIG0pICsgcC4KUHJvb2YuCiAg
aW50cm9zIG4gbSBwLiBpbmR1Y3Rpb24gbiBhcyBbfCBuJyBJSG4nXS4KICAtICgqIG4gPSAwICop
CiAgICByZWZsZXhpdml0eS4KICAtICgqIG4gPSBTIG4nICopCiAgICBzaW1wbC4gcmV3cml0ZSAt
PiBJSG4nLiByZWZsZXhpdml0eS4gICBRZWQuCgooKiogLi4uIGFuZCBpZiB5b3UncmUgdXNlZCB0
byBDb3EgeW91IG1heSBiZSBhYmxlIHRvIHN0ZXAKICAgIHRocm91Z2ggdGhlIHRhY3RpY3Mgb25l
IGFmdGVyIHRoZSBvdGhlciBpbiB5b3VyIG1pbmQgYW5kIGltYWdpbmUKICAgIHRoZSBzdGF0ZSBv
ZiB0aGUgY29udGV4dCBhbmQgZ29hbCBzdGFjayBhdCBlYWNoIHBvaW50LCBidXQgaWYgdGhlCiAg
ICBwcm9vZiB3ZXJlIGV2ZW4gYSBsaXR0bGUgYml0IG1vcmUgY29tcGxpY2F0ZWQgdGhpcyB3b3Vs
ZCBiZSBuZXh0CiAgICB0byBpbXBvc3NpYmxlLgoKICAgIEEgKHBlZGFudGljKSBtYXRoZW1hdGlj
aWFuIG1pZ2h0IHdyaXRlIHRoZSBwcm9vZiBzb21ldGhpbmcgbGlrZQogICAgdGhpczogKikKCigq
KiAtIF9UaGVvcmVtXzogRm9yIGFueSBbbl0sIFttXSBhbmQgW3BdLAoKICAgICAgbiArIChtICsg
cCkgPSAobiArIG0pICsgcC4KCiAgICBfUHJvb2ZfOiBCeSBpbmR1Y3Rpb24gb24gW25dLgoKICAg
IC0gRmlyc3QsIHN1cHBvc2UgW24gPSAwXS4gIFdlIG11c3Qgc2hvdwoKICAgICAgICAwICsgKG0g
KyBwKSA9ICgwICsgbSkgKyBwLgoKICAgICAgVGhpcyBmb2xsb3dzIGRpcmVjdGx5IGZyb20gdGhl
IGRlZmluaXRpb24gb2YgWytdLgoKICAgIC0gTmV4dCwgc3VwcG9zZSBbbiA9IFMgbiddLCB3aGVy
ZQoKICAgICAgICBuJyArIChtICsgcCkgPSAobicgKyBtKSArIHAuCgogICAgICBXZSBtdXN0IHNo
b3cKCiAgICAgICAgKFMgbicpICsgKG0gKyBwKSA9ICgoUyBuJykgKyBtKSArIHAuCgogICAgICBC
eSB0aGUgZGVmaW5pdGlvbiBvZiBbK10sIHRoaXMgZm9sbG93cyBmcm9tCgogICAgICAgIFMgKG4n
ICsgKG0gKyBwKSkgPSBTICgobicgKyBtKSArIHApLAoKICAgICAgd2hpY2ggaXMgaW1tZWRpYXRl
IGZyb20gdGhlIGluZHVjdGlvbiBoeXBvdGhlc2lzLiAgX1FlZF8uICopCgoKKCoqIFRoZSBvdmVy
YWxsIGZvcm0gb2YgdGhlIHByb29mIGlzIGJhc2ljYWxseSBzaW1pbGFyLCBhbmQgb2YKICAgIGNv
dXJzZSB0aGlzIGlzIG5vIGFjY2lkZW50OiBDb3EgaGFzIGJlZW4gZGVzaWduZWQgc28gdGhhdCBp
dHMKICAgIFtpbmR1Y3Rpb25dIHRhY3RpYyBnZW5lcmF0ZXMgdGhlIHNhbWUgc3ViLWdvYWxzLCBp
biB0aGUgc2FtZQogICAgb3JkZXIsIGFzIHRoZSBidWxsZXQgcG9pbnRzIHRoYXQgYSBtYXRoZW1h
dGljaWFuIHdvdWxkIHdyaXRlLiAgQnV0CiAgICB0aGVyZSBhcmUgc2lnbmlmaWNhbnQgZGlmZmVy
ZW5jZXMgb2YgZGV0YWlsOiB0aGUgZm9ybWFsIHByb29mIGlzCiAgICBtdWNoIG1vcmUgZXhwbGlj
aXQgaW4gc29tZSB3YXlzIChlLmcuLCB0aGUgdXNlIG9mIFtyZWZsZXhpdml0eV0pCiAgICBidXQg
bXVjaCBsZXNzIGV4cGxpY2l0IGluIG90aGVycyAoaW4gcGFydGljdWxhciwgdGhlICJwcm9vZiBz
dGF0ZSIKICAgIGF0IGFueSBnaXZlbiBwb2ludCBpbiB0aGUgQ29xIHByb29mIGlzIGNvbXBsZXRl
bHkgaW1wbGljaXQsCiAgICB3aGVyZWFzIHRoZSBpbmZvcm1hbCBwcm9vZiByZW1pbmRzIHRoZSBy
ZWFkZXIgc2V2ZXJhbCB0aW1lcyB3aGVyZQogICAgdGhpbmdzIHN0YW5kKS4gKikKCigqKiAqKioq
IEV4ZXJjaXNlOiAyIHN0YXJzLCBhZHZhbmNlZCwgcmVjb21tZW5kZWQgKHBsdXNfY29tbV9pbmZv
cm1hbCkgICopCigqKiBUcmFuc2xhdGUgeW91ciBzb2x1dGlvbiBmb3IgW3BsdXNfY29tbV0gaW50
byBhbiBpbmZvcm1hbCBwcm9vZjoKCiAgICBUaGVvcmVtOiBBZGRpdGlvbiBpcyBjb21tdXRhdGl2
ZS4KCiAgICBQcm9vZjogKCogRklMTCBJTiBIRVJFICopCiopCigqKiBbXSAqKQoKKCoqICoqKiog
RXhlcmNpc2U6IDIgc3RhcnMsIG9wdGlvbmFsIChiZXFfbmF0X3JlZmxfaW5mb3JtYWwpICAqKQoo
KiogV3JpdGUgYW4gaW5mb3JtYWwgcHJvb2Ygb2YgdGhlIGZvbGxvd2luZyB0aGVvcmVtLCB1c2lu
ZyB0aGUKICAgIGluZm9ybWFsIHByb29mIG9mIFtwbHVzX2Fzc29jXSBhcyBhIG1vZGVsLiAgRG9u
J3QganVzdAogICAgcGFyYXBocmFzZSB0aGUgQ29xIHRhY3RpY3MgaW50byBFbmdsaXNoIQoKICAg
IFRoZW9yZW06IFt0cnVlID0gYmVxX25hdCBuIG5dIGZvciBhbnkgW25dLgoKICAgIFByb29mOiAo
KiBGSUxMIElOIEhFUkUgKikKW10gKikKCigqKiAkRGF0ZTogMjAxNi0wNS0yNiAxNjoxNzoxOSAt
MDQwMCAoVGh1LCAyNiBNYXkgMjAxNikgJCAqKQoK
(*UHIDE*)